{"version":3,"sources":["encode.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,cAAc,QAAQ,kBAAR,CAAd,CAAjB;AAAA,IACI,cAAc,mBAAmB,UAAnB,CADlB;;AAGA,QAAQ,GAAR,GAAc,WAAW,UAAX,EAAuB,WAAvB,CAAd;;AAEA,IAAI,cAAc,cAAc,QAAQ,uBAAR,CAAd,CAAlB;AAAA,IACI,eAAe,mBAAmB,WAAnB,CADnB;;AAGA,QAAQ,IAAR,GAAe,WAAW,WAAX,EAAwB,YAAxB,CAAf;;AAEA,SAAS,aAAT,CAAuB,GAAvB,EAA2B;AAC1B,QAAO,OAAO,IAAP,CAAY,GAAZ,EAAiB,IAAjB,GAAwB,MAAxB,CAA+B,UAAS,OAAT,EAAkB,IAAlB,EAAuB;AAC5D,UAAQ,IAAI,IAAJ,CAAR,IAAqB,MAAM,IAAN,GAAa,GAAlC;AACA,SAAO,OAAP;AACA,EAHM,EAGJ,EAHI,CAAP;AAIA;;AAED,SAAS,kBAAT,CAA4B,OAA5B,EAAoC;AACnC,KAAI,SAAS,EAAb;AAAA,KACI,WAAW,EADf;;AAGA,QAAO,IAAP,CAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAS,CAAT,EAAW;AACvC,MAAG,EAAE,MAAF,KAAa,CAAhB,EAAkB;AACjB,UAAO,IAAP,CAAY,OAAO,CAAnB;AACA,GAFD,MAEO;AACN,YAAS,IAAT,CAAc,CAAd;AACA;AACD,EAND;;AAQA;AACA,UAAS,OAAT,CAAiB,MAAM,OAAO,IAAP,CAAY,EAAZ,CAAN,GAAwB,GAAzC;;AAEA,QAAO,IAAI,MAAJ,CAAW,SAAS,IAAT,CAAc,GAAd,CAAX,EAA+B,GAA/B,CAAP;AACA;;AAED,IAAI,cAAc,aAAlB;AAAA,IACI,mBAAmB,iCADvB;;AAGA,SAAS,kBAAT,CAA4B,CAA5B,EAA8B;AAC7B,QAAO,QAAQ,EAAE,UAAF,CAAa,CAAb,EAAgB,QAAhB,CAAyB,EAAzB,EAA6B,WAA7B,EAAR,GAAqD,GAA5D;AACA;;AAED,SAAS,cAAT,CAAwB,CAAxB,EAA0B;AACzB;AACA,KAAI,OAAO,EAAE,UAAF,CAAa,CAAb,CAAX;AACA,KAAI,MAAO,EAAE,UAAF,CAAa,CAAb,CAAX;AACA,KAAI,YAAY,CAAC,OAAO,MAAR,IAAkB,KAAlB,GAA0B,GAA1B,GAAgC,MAAhC,GAAyC,OAAzD;AACA,QAAO,QAAQ,UAAU,QAAV,CAAmB,EAAnB,EAAuB,WAAvB,EAAR,GAA+C,GAAtD;AACA;;AAED,SAAS,UAAT,CAAoB,OAApB,EAA6B,EAA7B,EAAgC;AAC/B,UAAS,IAAT,CAAc,IAAd,EAAmB;AAClB,SAAO,QAAQ,IAAR,CAAP;AACA;;AAED,QAAO,UAAS,IAAT,EAAc;AACpB,SAAO,KACJ,OADI,CACI,EADJ,EACQ,IADR,EAEJ,OAFI,CAEI,gBAFJ,EAEsB,cAFtB,EAGJ,OAHI,CAGI,WAHJ,EAGiB,kBAHjB,CAAP;AAIA,EALD;AAMA;;AAED,IAAI,cAAc,mBAAmB,UAAnB,CAAlB;;AAEA,SAAS,SAAT,CAAmB,IAAnB,EAAwB;AACvB,QAAO,KACJ,OADI,CACI,WADJ,EACiB,kBADjB,EAEJ,OAFI,CAEI,gBAFJ,EAEsB,cAFtB,EAGJ,OAHI,CAGI,WAHJ,EAGiB,kBAHjB,CAAP;AAIA;;AAED,QAAQ,MAAR,GAAiB,SAAjB","file":"encode-compiled.js","sourcesContent":["var inverseXML = getInverseObj(require(\"../maps/xml.json\")),\n    xmlReplacer = getInverseReplacer(inverseXML);\n\nexports.XML = getInverse(inverseXML, xmlReplacer);\n\nvar inverseHTML = getInverseObj(require(\"../maps/entities.json\")),\n    htmlReplacer = getInverseReplacer(inverseHTML);\n\nexports.HTML = getInverse(inverseHTML, htmlReplacer);\n\nfunction getInverseObj(obj){\n\treturn Object.keys(obj).sort().reduce(function(inverse, name){\n\t\tinverse[obj[name]] = \"&\" + name + \";\";\n\t\treturn inverse;\n\t}, {});\n}\n\nfunction getInverseReplacer(inverse){\n\tvar single = [],\n\t    multiple = [];\n\n\tObject.keys(inverse).forEach(function(k){\n\t\tif(k.length === 1){\n\t\t\tsingle.push(\"\\\\\" + k);\n\t\t} else {\n\t\t\tmultiple.push(k);\n\t\t}\n\t});\n\n\t//TODO add ranges\n\tmultiple.unshift(\"[\" + single.join(\"\") + \"]\");\n\n\treturn new RegExp(multiple.join(\"|\"), \"g\");\n}\n\nvar re_nonASCII = /[^\\0-\\x7F]/g,\n    re_astralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\nfunction singleCharReplacer(c){\n\treturn \"&#x\" + c.charCodeAt(0).toString(16).toUpperCase() + \";\";\n}\n\nfunction astralReplacer(c){\n\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\tvar high = c.charCodeAt(0);\n\tvar low  = c.charCodeAt(1);\n\tvar codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;\n\treturn \"&#x\" + codePoint.toString(16).toUpperCase() + \";\";\n}\n\nfunction getInverse(inverse, re){\n\tfunction func(name){\n\t\treturn inverse[name];\n\t}\n\n\treturn function(data){\n\t\treturn data\n\t\t\t\t.replace(re, func)\n\t\t\t\t.replace(re_astralSymbols, astralReplacer)\n\t\t\t\t.replace(re_nonASCII, singleCharReplacer);\n\t};\n}\n\nvar re_xmlChars = getInverseReplacer(inverseXML);\n\nfunction escapeXML(data){\n\treturn data\n\t\t\t.replace(re_xmlChars, singleCharReplacer)\n\t\t\t.replace(re_astralSymbols, astralReplacer)\n\t\t\t.replace(re_nonASCII, singleCharReplacer);\n}\n\nexports.escape = escapeXML;\n"]}