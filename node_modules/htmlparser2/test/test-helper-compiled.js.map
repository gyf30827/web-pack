{"version":3,"sources":["test-helper.js"],"names":[],"mappings":"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","file":"test-helper-compiled.js","sourcesContent":["var htmlparser2 = require(\"..\"),\n    fs = require(\"fs\"),\n    path = require(\"path\"),\n    assert = require(\"assert\"),\n\tParser = htmlparser2.Parser,\n\tCollectingHandler = htmlparser2.CollectingHandler;\n\nexports.writeToParser = function(handler, options, data){\n\tvar parser = new Parser(handler, options);\n\t//first, try to run the test via chunks\n\tfor(var i = 0; i < data.length; i++){\n\t\tparser.write(data.charAt(i));\n\t}\n\tparser.end();\n\t//then parse everything\n\tparser.parseComplete(data);\n};\n\n//returns a tree structure\nexports.getEventCollector = function(cb){\n\tvar handler = new CollectingHandler({onerror: cb, onend: function(){\n\t\tcb(null, handler.events.reduce(eventReducer, []));\n\t}});\n\n\treturn handler;\n};\n\nfunction eventReducer(events, arr){\n\tif(arr[0] === \"onerror\" || arr[0] === \"onend\");\n\telse if(arr[0] === \"ontext\" && events.length && events[events.length-1].event === \"text\"){\n\t\tevents[events.length-1].data[0] += arr[1];\n\t} else {\n\t\tevents.push({\n\t\t\tevent: arr[0].substr(2),\n\t\t\tdata: arr.slice(1)\n\t\t});\n\t}\n\n\treturn events;\n}\n\nfunction getCallback(expected, done){\n\tvar repeated = false;\n\n\treturn function(err, actual){\n\t\tassert.ifError(err);\n\t\ttry {\n\t\t\tassert.deepEqual(expected, actual, \"didn't get expected output\");\n\t\t} catch(e){\n\t\t\te.expected = JSON.stringify(expected, null, 2);\n\t\t\te.actual = JSON.stringify(actual, null, 2);\n\t\t\tthrow e;\n\t\t}\n\n\t\tif(repeated) done();\n\t\telse repeated = true;\n\t};\n}\n\nexports.mochaTest = function(name, root, test){\n\tdescribe(name, readDir);\n\n\tfunction readDir(cb){\n\t\tvar dir = path.join(root, name);\n\n\t\tfs\n\t\t.readdirSync(dir)\n\t\t.filter(RegExp.prototype.test, /^[^\\._]/) //ignore all files with a leading dot or underscore\n\t\t.map(function(name){\n\t\t\treturn path.join(dir, name);\n\t\t})\n\t\t.map(require)\n\t\t.forEach(runTest);\n\t}\n\n\tfunction runTest(file){\n\t\tit(file.name, function(done){\n\t\t\ttest(file, getCallback(file.expected, done));\n\t\t});\n\t}\n};"]}