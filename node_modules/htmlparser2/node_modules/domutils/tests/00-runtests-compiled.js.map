{"version":3,"sources":["00-runtests.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,QAAQ,IAAR,CAAT;AAAA,IACC,SAAS,QAAQ,QAAR,CADV;;AAGA,IAAI,WAAW,CAAf;AAAA,IACC,YAAY,CADb;;AAGA,SAAS,OAAT,CAAiB,QAAjB,EAA2B,MAA3B,EAAkC;AACjC,KAAG,OAAO,QAAP,KAAoB,OAAO,MAA9B,EAAqC;AACpC,QAAM,MAAM,oBAAN,CAAN;AACA;AACD,KAAG,OAAO,QAAP,KAAoB,QAApB,IAAgC,aAAa,IAAhD,EAAqD;AACpD,MAAG,aAAa,MAAhB,EAAuB;AACtB,SAAM,MAAM,+BAAN,CAAN;AACA;AACD;AACA;;AAED,MAAI,IAAI,IAAR,IAAgB,QAAhB,EAAyB;AACxB,MAAG,EAAE,QAAQ,MAAV,CAAH,EAAsB,MAAM,MAAM,oCAAoC,IAA1C,CAAN;AACtB,UAAQ,SAAS,IAAT,CAAR,EAAwB,OAAO,IAAP,CAAxB;AACA;AACD;;AAED,SAAS,QAAT,CAAkB,IAAlB,EAAuB;AACtB;AACA,IAAG,WAAH,CAAe,YAAY,KAAK,GAAhC,EACE,GADF,CACM,UAAS,IAAT,EAAc;AACnB,MAAG,KAAK,CAAL,MAAY,GAAf,EAAoB,OAAO,KAAP;AACpB,MAAG,KAAK,MAAL,CAAY,CAAC,CAAb,MAAoB,OAAvB,EAAgC,OAAO,KAAK,KAAL,CACtC,GAAG,YAAH,CAAgB,YAAY,KAAK,GAAjB,GAAuB,IAAvC,CADsC,CAAP;AAGhC,SAAO,QAAQ,YAAY,KAAK,GAAjB,GAAuB,IAA/B,CAAP;AACA,EAPD,EAOG,OAPH,CAOW,UAAS,IAAT,EAAc;AACxB,MAAG,CAAC,IAAJ,EAAU;AACV,MAAI,SAAS,KAAb;;AAEA;;AAEA,UAAQ,GAAR,CAAY,UAAZ,EAAwB,KAAK,IAA7B;;AAEA,OAAK,IAAL,CAAU,IAAV,EAAgB,UAAS,GAAT,EAAc,GAAd,EAAkB;AACjC,UAAO,OAAP,CAAe,GAAf;AACA,WAAQ,KAAK,QAAb,EAAuB,GAAvB;;AAEA,OAAG,MAAH,EAAU;AACT;AACA;AACA,IAHD,MAIK,SAAS,IAAT;AACL,GATD;AAUA,EAzBD;AA0BA,SAAQ,GAAR,CAAY,IAAZ,EAAkB,KAAK,GAAL,CAAS,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAlB,EAAyC,SAAzC;AACA;;AAED;AACA,CACC,mBADD,EAEE,GAFF,CAEM,OAFN,EAEe,OAFf,CAEuB,QAFvB;;AAIA;AACC,UAAS,KAAT,GAAgB;AAChB,KAAG,aAAa,CAAhB,EAAmB,OAAO,QAAQ,QAAR,CAAiB,KAAjB,CAAP;AACnB,SAAQ,GAAR,CAAY,cAAZ,EAA4B,SAA5B;AACA,CAHA,GAAD","file":"00-runtests-compiled.js","sourcesContent":["var fs = require(\"fs\"),\n\tassert = require(\"assert\");\n\nvar runCount = 0,\n\ttestCount = 0;\n\nfunction compare(expected, result){\n\tif(typeof expected !== typeof result){\n\t\tthrow Error(\"types didn't match\");\n\t}\n\tif(typeof expected !== \"object\" || expected === null){\n\t\tif(expected !== result){\n\t\t\tthrow Error(\"result doesn't equal expected\");\n\t\t}\n\t\treturn;\n\t}\n\n\tfor(var prop in expected){\n\t\tif(!(prop in result)) throw Error(\"result didn't contain property \" + prop);\n\t\tcompare(expected[prop], result[prop]);\n\t}\n}\n\nfunction runTests(test){\n\t//read files, load them, run them\n\tfs.readdirSync(__dirname + test.dir\n\t).map(function(file){\n\t\tif(file[0] === \".\") return false;\n\t\tif(file.substr(-5) === \".json\") return JSON.parse(\n\t\t\tfs.readFileSync(__dirname + test.dir + file)\n\t\t);\n\t\treturn require(__dirname + test.dir + file);\n\t}).forEach(function(file){\n\t\tif(!file) return;\n\t\tvar second = false;\n\t\t\n\t\trunCount++;\n\t\t\n\t\tconsole.log(\"Testing:\", file.name);\n\t\t\n\t\ttest.test(file, function(err, dom){\n\t\t\tassert.ifError(err);\n\t\t\tcompare(file.expected, dom);\n\t\t\t\t\t\t\n\t\t\tif(second){\n\t\t\t\trunCount--;\n\t\t\t\ttestCount++;\n\t\t\t}\n\t\t\telse second = true;\n\t\t});\n\t});\n\tconsole.log(\"->\", test.dir.slice(1, -1), \"started\");\n}\n\n//run all tests\n[\n \"./02-dom_utils.js\"\n].map(require).forEach(runTests);\n\n//log the results\n(function check(){\n\tif(runCount !== 0) return process.nextTick(check);\n\tconsole.log(\"Total tests:\", testCount);\n}());"]}