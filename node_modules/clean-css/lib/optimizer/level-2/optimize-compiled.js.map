{"version":3,"sources":["optimize.js"],"names":[],"mappings":"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","file":"optimize-compiled.js","sourcesContent":["var mergeAdjacent = require('./merge-adjacent');\nvar mergeMediaQueries = require('./merge-media-queries');\nvar mergeNonAdjacentByBody = require('./merge-non-adjacent-by-body');\nvar mergeNonAdjacentBySelector = require('./merge-non-adjacent-by-selector');\nvar reduceNonAdjacent = require('./reduce-non-adjacent');\nvar removeDuplicateFontAtRules = require('./remove-duplicate-font-at-rules');\nvar removeDuplicateMediaQueries = require('./remove-duplicate-media-queries');\nvar removeDuplicates = require('./remove-duplicates');\nvar removeUnusedAtRules = require('./remove-unused-at-rules');\nvar restructure = require('./restructure');\n\nvar optimizeProperties = require('./properties/optimize');\n\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\n\nvar Token = require('../../tokenizer/token');\n\nfunction removeEmpty(tokens) {\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    var token = tokens[i];\n    var isEmpty = false;\n\n    switch (token[0]) {\n      case Token.RULE:\n        isEmpty = token[1].length === 0 || token[2].length === 0;\n        break;\n      case Token.NESTED_BLOCK:\n        removeEmpty(token[2]);\n        isEmpty = token[2].length === 0;\n        break;\n      case Token.AT_RULE:\n        isEmpty = token[1].length === 0;\n        break;\n      case Token.AT_RULE_BLOCK:\n        isEmpty = token[2].length === 0;\n    }\n\n    if (isEmpty) {\n      tokens.splice(i, 1);\n      i--;\n      l--;\n    }\n  }\n}\n\nfunction recursivelyOptimizeBlocks(tokens, context) {\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    var token = tokens[i];\n\n    if (token[0] == Token.NESTED_BLOCK) {\n      var isKeyframes = /@(-moz-|-o-|-webkit-)?keyframes/.test(token[1][0][1]);\n      level2Optimize(token[2], context, !isKeyframes);\n    }\n  }\n}\n\nfunction recursivelyOptimizeProperties(tokens, context) {\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    var token = tokens[i];\n\n    switch (token[0]) {\n      case Token.RULE:\n        optimizeProperties(token[2], true, true, context);\n        break;\n      case Token.NESTED_BLOCK:\n        recursivelyOptimizeProperties(token[2], context);\n    }\n  }\n}\n\nfunction level2Optimize(tokens, context, withRestructuring) {\n  var levelOptions = context.options.level[OptimizationLevel.Two];\n  var reduced;\n  var i;\n\n  recursivelyOptimizeBlocks(tokens, context);\n  recursivelyOptimizeProperties(tokens, context);\n\n  if (levelOptions.removeDuplicateRules) {\n    removeDuplicates(tokens, context);\n  }\n\n  if (levelOptions.mergeAdjacentRules) {\n    mergeAdjacent(tokens, context);\n  }\n\n  if (levelOptions.reduceNonAdjacentRules) {\n    reduceNonAdjacent(tokens, context);\n  }\n\n  if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != 'body') {\n    mergeNonAdjacentBySelector(tokens, context);\n  }\n\n  if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != 'selector') {\n    mergeNonAdjacentByBody(tokens, context);\n  }\n\n  if (levelOptions.restructureRules && levelOptions.mergeAdjacentRules && withRestructuring) {\n    restructure(tokens, context);\n    mergeAdjacent(tokens, context);\n  }\n\n  if (levelOptions.restructureRules && !levelOptions.mergeAdjacentRules && withRestructuring) {\n    restructure(tokens, context);\n  }\n\n  if (levelOptions.removeDuplicateFontRules) {\n    removeDuplicateFontAtRules(tokens, context);\n  }\n\n  if (levelOptions.removeDuplicateMediaBlocks) {\n    removeDuplicateMediaQueries(tokens, context);\n  }\n\n  if (levelOptions.removeUnusedAtRules) {\n    removeUnusedAtRules(tokens, context);\n  }\n\n  if (levelOptions.mergeMedia) {\n    reduced = mergeMediaQueries(tokens, context);\n    for (i = reduced.length - 1; i >= 0; i--) {\n      level2Optimize(reduced[i][2], context, false);\n    }\n  }\n\n  if (levelOptions.removeEmpty) {\n    removeEmpty(tokens);\n  }\n\n  return tokens;\n}\n\nmodule.exports = level2Optimize;\n"]}