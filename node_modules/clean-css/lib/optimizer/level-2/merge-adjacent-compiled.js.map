{"version":3,"sources":["merge-adjacent.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;;AAEA,IAAI,qBAAqB,QAAQ,uBAAR,CAAzB;;AAEA,IAAI,gBAAgB,QAAQ,2BAAR,CAApB;AACA,IAAI,YAAY,QAAQ,uBAAR,CAAhB;;AAEA,IAAI,oBAAoB,QAAQ,kCAAR,EAA4C,iBAApE;;AAEA,IAAI,gBAAgB,QAAQ,uBAAR,EAAiC,IAArD;AACA,IAAI,iBAAiB,QAAQ,uBAAR,EAAiC,KAAtD;;AAEA,IAAI,QAAQ,QAAQ,uBAAR,CAAZ;;AAEA,SAAS,aAAT,CAAuB,MAAvB,EAA+B,OAA/B,EAAwC;AACtC,MAAI,YAAY,CAAC,IAAD,EAAO,EAAP,EAAW,EAAX,CAAhB;AACA,MAAI,UAAU,QAAQ,OAAtB;AACA,MAAI,gBAAgB,QAAQ,aAAR,CAAsB,SAAtB,CAAgC,aAApD;AACA,MAAI,yBAAyB,QAAQ,KAAR,CAAc,kBAAkB,GAAhC,EAAqC,sBAAlE;AACA,MAAI,yBAAyB,QAAQ,aAAR,CAAsB,SAAtB,CAAgC,sBAA7D;AACA,MAAI,0BAA0B,QAAQ,aAAR,CAAsB,SAAtB,CAAgC,uBAA9D;AACA,MAAI,aAAa,QAAQ,aAAR,CAAsB,SAAtB,CAAgC,UAAjD;AACA,MAAI,wBAAwB,QAAQ,aAAR,CAAsB,SAAtB,CAAgC,qBAA5D;;AAEA,OAAK,IAAI,IAAI,CAAR,EAAW,IAAI,OAAO,MAA3B,EAAmC,IAAI,CAAvC,EAA0C,GAA1C,EAA+C;AAC7C,QAAI,QAAQ,OAAO,CAAP,CAAZ;;AAEA,QAAI,MAAM,CAAN,KAAY,MAAM,IAAtB,EAA4B;AAC1B,kBAAY,CAAC,IAAD,EAAO,EAAP,EAAW,EAAX,CAAZ;AACA;AACD;;AAED,QAAI,UAAU,CAAV,KAAgB,MAAM,IAAtB,IAA8B,eAAe,MAAM,CAAN,CAAf,KAA4B,eAAe,UAAU,CAAV,CAAf,CAA9D,EAA4F;AAC1F,YAAM,SAAN,CAAgB,IAAhB,CAAqB,KAArB,CAA2B,UAAU,CAAV,CAA3B,EAAyC,MAAM,CAAN,CAAzC;AACA,yBAAmB,UAAU,CAAV,CAAnB,EAAiC,IAAjC,EAAuC,IAAvC,EAA6C,OAA7C;AACA,YAAM,CAAN,IAAW,EAAX;AACD,KAJD,MAIO,IAAI,UAAU,CAAV,KAAgB,MAAM,IAAtB,IAA8B,cAAc,MAAM,CAAN,CAAd,KAA2B,cAAc,UAAU,CAAV,CAAd,CAAzD,IACP,YAAY,eAAe,MAAM,CAAN,CAAf,CAAZ,EAAsC,sBAAtC,EAA8D,uBAA9D,EAAuF,qBAAvF,CADO,IAEP,YAAY,eAAe,UAAU,CAAV,CAAf,CAAZ,EAA0C,sBAA1C,EAAkE,uBAAlE,EAA2F,qBAA3F,CAFO,IAGP,UAAU,CAAV,EAAa,MAAb,GAAsB,UAHnB,EAG+B;AACpC,gBAAU,CAAV,IAAe,UAAU,UAAU,CAAV,EAAa,MAAb,CAAoB,MAAM,CAAN,CAApB,CAAV,EAAyC,KAAzC,EAAgD,aAAhD,EAA+D,KAA/D,EAAsE,QAAQ,QAA9E,CAAf;AACA,gBAAU,CAAV,IAAe,UAAU,MAAV,GAAmB,CAAnB,GAAuB,cAAc,UAAU,CAAV,CAAd,EAA4B,sBAA5B,CAAvB,GAA6E,UAAU,CAAV,CAA5F;AACA,YAAM,CAAN,IAAW,EAAX;AACD,KAPM,MAOA;AACL,kBAAY,KAAZ;AACD;AACF;AACF;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"merge-adjacent-compiled.js","sourcesContent":["var isMergeable = require('./is-mergeable');\n\nvar optimizeProperties = require('./properties/optimize');\n\nvar sortSelectors = require('../level-1/sort-selectors');\nvar tidyRules = require('../level-1/tidy-rules');\n\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\n\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\n\nvar Token = require('../../tokenizer/token');\n\nfunction mergeAdjacent(tokens, context) {\n  var lastToken = [null, [], []];\n  var options = context.options;\n  var adjacentSpace = options.compatibility.selectors.adjacentSpace;\n  var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var mergeLimit = options.compatibility.selectors.mergeLimit;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    var token = tokens[i];\n\n    if (token[0] != Token.RULE) {\n      lastToken = [null, [], []];\n      continue;\n    }\n\n    if (lastToken[0] == Token.RULE && serializeRules(token[1]) == serializeRules(lastToken[1])) {\n      Array.prototype.push.apply(lastToken[2], token[2]);\n      optimizeProperties(lastToken[2], true, true, context);\n      token[2] = [];\n    } else if (lastToken[0] == Token.RULE && serializeBody(token[2]) == serializeBody(lastToken[2]) &&\n        isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) &&\n        isMergeable(serializeRules(lastToken[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) &&\n        lastToken[1].length < mergeLimit) {\n      lastToken[1] = tidyRules(lastToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);\n      lastToken[1] = lastToken.length > 1 ? sortSelectors(lastToken[1], selectorsSortingMethod) : lastToken[1];\n      token[2] = [];\n    } else {\n      lastToken = token;\n    }\n  }\n}\n\nmodule.exports = mergeAdjacent;\n"]}