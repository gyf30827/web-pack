{"version":3,"sources":["is-allowed-resource.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,MAAM,QAAQ,KAAR,CAAV;;AAEA,IAAI,mBAAmB,QAAQ,6BAAR,CAAvB;AACA,IAAI,cAAc,QAAQ,uBAAR,CAAlB;;AAEA,IAAI,gBAAgB,OAApB;;AAEA,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,QAAhC,EAA0C,KAA1C,EAAiD;AAC/C,MAAI,KAAJ;AACA,MAAI,WAAJ;AACA,MAAI,UAAU,WAAW,KAAX,GAAmB,IAAjC;AACA,MAAI,IAAJ;AACA,MAAI,SAAJ;AACA,MAAI,cAAJ;AACA,MAAI,CAAJ;;AAEA,MAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,KAAP;AACD;;AAED,MAAI,YAAY,CAAC,YAAY,GAAZ,CAAjB,EAAmC;AACjC,UAAM,gBAAgB,GAAtB;AACD;;AAED,UAAQ,WACN,IAAI,KAAJ,CAAU,GAAV,EAAe,IADT,GAEN,GAFF;;AAIA,gBAAc,WACZ,GADY,GAEZ,KAAK,OAAL,CAAa,GAAb,CAFF;;AAIA,OAAK,IAAI,CAAT,EAAY,IAAI,MAAM,MAAtB,EAA8B,GAA9B,EAAmC;AACjC,WAAO,MAAM,CAAN,CAAP;AACA,gBAAY,KAAK,CAAL,KAAW,GAAvB;AACA,qBAAiB,KAAK,SAAL,CAAe,CAAf,CAAjB;;AAEA,QAAI,aAAa,QAAb,IAAyB,aAAa,cAAb,CAA7B,EAA2D;AACzD,gBAAU,WAAW,CAAC,kBAAkB,GAAlB,EAAuB,IAAvB,EAA6B,CAAC,cAAD,CAA7B,CAAtB;AACD,KAFD,MAEO,IAAI,aAAa,CAAC,QAAd,IAA0B,CAAC,aAAa,cAAb,CAA/B,EAA6D;AAClE,gBAAU,WAAW,CAAC,kBAAkB,GAAlB,EAAuB,KAAvB,EAA8B,CAAC,cAAD,CAA9B,CAAtB;AACD,KAFM,MAEA,IAAI,SAAJ,EAAe;AACpB,gBAAU,WAAW,IAArB;AACD,KAFM,MAEA,IAAI,QAAQ,KAAZ,EAAmB;AACxB,gBAAU,IAAV;AACD,KAFM,MAEA,IAAI,YAAY,QAAQ,OAAxB,EAAiC;AACtC,gBAAU,WAAW,KAArB;AACD,KAFM,MAEA,IAAI,YAAY,QAAQ,QAAxB,EAAkC;AACvC,gBAAU,IAAV;AACD,KAFM,MAEA,IAAI,CAAC,QAAD,IAAa,QAAQ,QAAzB,EAAmC;AACxC,gBAAU,KAAV;AACD,KAFM,MAEA,IAAI,CAAC,QAAD,IAAa,QAAQ,OAAzB,EAAkC;AACvC,gBAAU,IAAV;AACD,KAFM,MAEA,IAAI,SAAS,KAAb,EAAoB;AACzB,gBAAU,IAAV;AACD,KAFM,MAEA,IAAI,SAAS,GAAb,EAAkB;AACvB,gBAAU,IAAV;AACD,KAFM,MAEA,IAAI,YAAY,YAAY,OAAZ,CAAoB,IAApB,MAA8B,CAA9C,EAAiD;AACtD,gBAAU,IAAV;AACD,KAFM,MAEA,IAAI,CAAC,QAAD,IAAa,YAAY,OAAZ,CAAoB,KAAK,OAAL,CAAa,IAAb,CAApB,MAA4C,CAA7D,EAAgE;AACrE,gBAAU,IAAV;AACD,KAFM,MAEA,IAAI,YAAY,aAAa,cAAb,CAAhB,EAA8C;AACnD,gBAAU,WAAW,IAArB;AACD,KAFM,MAEA;AACL,gBAAU,KAAV;AACD;AACF;;AAED,SAAO,OAAP;AACD;;AAED,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AAC1B,SAAO,iBAAiB,IAAjB,KAA0B,IAAI,KAAJ,CAAU,gBAAgB,IAAhB,GAAuB,IAAjC,EAAuC,IAAvC,IAA+C,IAAhF;AACD;;AAED,OAAO,OAAP,GAAiB,iBAAjB","file":"is-allowed-resource-compiled.js","sourcesContent":["var path = require('path');\nvar url = require('url');\n\nvar isRemoteResource = require('../utils/is-remote-resource');\nvar hasProtocol = require('../utils/has-protocol');\n\nvar HTTP_PROTOCOL = 'http:';\n\nfunction isAllowedResource(uri, isRemote, rules) {\n  var match;\n  var absoluteUri;\n  var allowed = isRemote ? false : true;\n  var rule;\n  var isNegated;\n  var normalizedRule;\n  var i;\n\n  if (rules.length === 0) {\n    return false;\n  }\n\n  if (isRemote && !hasProtocol(uri)) {\n    uri = HTTP_PROTOCOL + uri;\n  }\n\n  match = isRemote ?\n    url.parse(uri).host :\n    uri;\n\n  absoluteUri = isRemote ?\n    uri :\n    path.resolve(uri);\n\n  for (i = 0; i < rules.length; i++) {\n    rule = rules[i];\n    isNegated = rule[0] == '!';\n    normalizedRule = rule.substring(1);\n\n    if (isNegated && isRemote && isRemoteRule(normalizedRule)) {\n      allowed = allowed && !isAllowedResource(uri, true, [normalizedRule]);\n    } else if (isNegated && !isRemote && !isRemoteRule(normalizedRule)) {\n      allowed = allowed && !isAllowedResource(uri, false, [normalizedRule]);\n    } else if (isNegated) {\n      allowed = allowed && true;\n    } else if (rule == 'all') {\n      allowed = true;\n    } else if (isRemote && rule == 'local') {\n      allowed = allowed || false;\n    } else if (isRemote && rule == 'remote') {\n      allowed = true;\n    } else if (!isRemote && rule == 'remote') {\n      allowed = false;\n    } else if (!isRemote && rule == 'local') {\n      allowed = true;\n    } else if (rule === match) {\n      allowed = true;\n    } else if (rule === uri) {\n      allowed = true;\n    } else if (isRemote && absoluteUri.indexOf(rule) === 0) {\n      allowed = true;\n    } else if (!isRemote && absoluteUri.indexOf(path.resolve(rule)) === 0) {\n      allowed = true;\n    } else if (isRemote != isRemoteRule(normalizedRule)) {\n      allowed = allowed && true;\n    } else {\n      allowed = false;\n    }\n  }\n\n  return allowed;\n}\n\nfunction isRemoteRule(rule) {\n  return isRemoteResource(rule) || url.parse(HTTP_PROTOCOL + '//' + rule).host == rule;\n}\n\nmodule.exports = isAllowedResource;\n"]}