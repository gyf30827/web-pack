{"version":3,"sources":["input-source-map-tracker.js"],"names":[],"mappings":"AAAA,IAAI,oBAAoB,QAAQ,YAAR,EAAsB,iBAA9C;;AAEA,SAAS,qBAAT,GAAiC;AAC/B,MAAI,OAAO,EAAX;;AAEA,SAAO;AACL,SAAK,IAAI,IAAJ,CAAS,IAAT,EAAe,IAAf,CADA;AAEL,gBAAY,WAAW,IAAX,CAAgB,IAAhB,EAAsB,IAAtB,CAFP;AAGL,yBAAqB,oBAAoB,IAApB,CAAyB,IAAzB,EAA+B,IAA/B,CAHhB;AAIL,WAAO,MAAM,IAAN,CAAW,IAAX,EAAiB,IAAjB;AAJF,GAAP;AAMD;;AAED,SAAS,GAAT,CAAa,IAAb,EAAmB;AACjB,SAAO,IAAP;AACD;;AAED,SAAS,UAAT,CAAoB,IAApB,EAA0B,MAA1B,EAAkC;AAChC,SAAO,UAAU,IAAjB;AACD;;AAED,SAAS,mBAAT,CAA6B,IAA7B,EAAmC,QAAnC,EAA6C,KAA7C,EAAoD,iBAApD,EAAuE;AACrE,MAAI,OAAO,SAAS,CAAT,CAAX;AACA,MAAI,SAAS,SAAS,CAAT,CAAb;AACA,MAAI,SAAS,SAAS,CAAT,CAAb;AACA,MAAI,WAAW;AACb,UAAM,IADO;AAEb,YAAQ,SAAS;AAFJ,GAAf;AAIA,MAAI,gBAAJ;;AAEA,SAAO,CAAC,gBAAD,IAAqB,SAAS,MAAT,GAAkB,MAA9C,EAAsD;AACpD,aAAS,MAAT;AACA,uBAAmB,KAAK,MAAL,EAAa,mBAAb,CAAiC,QAAjC,CAAnB;AACD;;AAED,MAAI,iBAAiB,IAAjB,KAA0B,IAA1B,IAAkC,OAAO,CAAzC,IAA8C,oBAAoB,CAAtE,EAAyE;AACvE,WAAO,oBAAoB,IAApB,EAA0B,CAAC,OAAO,CAAR,EAAW,MAAX,EAAmB,MAAnB,CAA1B,EAAsD,KAAtD,EAA6D,oBAAoB,CAAjF,CAAP;AACD;;AAED,SAAO,iBAAiB,IAAjB,KAA0B,IAA1B,GACL,WAAW,gBAAX,CADK,GAEL,QAFF;AAGD;;AAED,SAAS,UAAT,CAAoB,MAApB,EAA4B;AAC1B,SAAO,CAAC,OAAO,IAAR,EAAc,OAAO,MAArB,EAA6B,OAAO,MAApC,CAAP;AACD;;AAED,SAAS,KAAT,CAAe,IAAf,EAAqB,MAArB,EAA6B,IAA7B,EAAmC;AACjC,OAAK,MAAL,IAAe,IAAI,iBAAJ,CAAsB,IAAtB,CAAf;AACD;;AAED,OAAO,OAAP,GAAiB,qBAAjB","file":"input-source-map-tracker-compiled.js","sourcesContent":["var SourceMapConsumer = require('source-map').SourceMapConsumer;\n\nfunction inputSourceMapTracker() {\n  var maps = {};\n\n  return {\n    all: all.bind(null, maps),\n    isTracking: isTracking.bind(null, maps),\n    originalPositionFor: originalPositionFor.bind(null, maps),\n    track: track.bind(null, maps)\n  };\n}\n\nfunction all(maps) {\n  return maps;\n}\n\nfunction isTracking(maps, source) {\n  return source in maps;\n}\n\nfunction originalPositionFor(maps, metadata, range, selectorFallbacks) {\n  var line = metadata[0];\n  var column = metadata[1];\n  var source = metadata[2];\n  var position = {\n    line: line,\n    column: column + range\n  };\n  var originalPosition;\n\n  while (!originalPosition && position.column > column) {\n    position.column--;\n    originalPosition = maps[source].originalPositionFor(position);\n  }\n\n  if (originalPosition.line === null && line > 1 && selectorFallbacks > 0) {\n    return originalPositionFor(maps, [line - 1, column, source], range, selectorFallbacks - 1);\n  }\n\n  return originalPosition.line !== null ?\n    toMetadata(originalPosition) :\n    metadata;\n}\n\nfunction toMetadata(asHash) {\n  return [asHash.line, asHash.column, asHash.source];\n}\n\nfunction track(maps, source, data) {\n  maps[source] = new SourceMapConsumer(data);\n}\n\nmodule.exports = inputSourceMapTracker;\n"]}