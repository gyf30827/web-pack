{"version":3,"sources":["load-remote-resource.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,MAAM,QAAQ,KAAR,CAAV;;AAEA,IAAI,iBAAiB,QAAQ,2BAAR,CAArB;AACA,IAAI,kBAAkB,QAAQ,4BAAR,CAAtB;AACA,IAAI,WAAW,QAAQ,mBAAR,CAAf;;AAEA,IAAI,gBAAgB,OAApB;;AAEA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC,aAAjC,EAAgD,aAAhD,EAA+D,QAA/D,EAAyE;AACvE,MAAI,gBAAgB,cAAc,QAAd,IAA0B,cAAc,QAA5D;AACA,MAAI,eAAe,KAAnB;AACA,MAAI,cAAJ;AACA,MAAI,KAAJ;;AAEA,mBAAiB,SACf,IAAI,KAAJ,CAAU,GAAV,CADe,EAEf,iBAAiB,EAFF,CAAjB;;AAKA,MAAI,cAAc,QAAd,KAA2B,SAA/B,EAA0C;AACxC;AACA,mBAAe,QAAf,GAA0B,cAAc,QAAd,IAA0B,aAApD;AACA,mBAAe,IAAf,GAAsB,eAAe,IAArC;AACD;;AAED,UAAS,iBAAiB,CAAC,gBAAgB,aAAhB,CAAnB,IAAsD,eAAe,GAAf,CAAtD,GACN,KAAK,GADC,GAEN,MAAM,GAFR;;AAIA,QAAM,cAAN,EAAsB,UAAU,GAAV,EAAe;AACnC,QAAI,SAAS,EAAb;AACA,QAAI,QAAJ;;AAEA,QAAI,YAAJ,EAAkB;AAChB;AACD;;AAED,QAAI,IAAI,UAAJ,GAAiB,GAAjB,IAAwB,IAAI,UAAJ,GAAiB,GAA7C,EAAkD;AAChD,aAAO,SAAS,IAAI,UAAb,EAAyB,IAAzB,CAAP;AACD,KAFD,MAEO,IAAI,IAAI,UAAJ,GAAiB,GAArB,EAA0B;AAC/B,iBAAW,IAAI,OAAJ,CAAY,GAAZ,EAAiB,IAAI,OAAJ,CAAY,QAA7B,CAAX;AACA,aAAO,mBAAmB,QAAnB,EAA6B,aAA7B,EAA4C,aAA5C,EAA2D,QAA3D,CAAP;AACD;;AAED,QAAI,EAAJ,CAAO,MAAP,EAAe,UAAU,KAAV,EAAiB;AAC9B,aAAO,IAAP,CAAY,MAAM,QAAN,EAAZ;AACD,KAFD;AAGA,QAAI,EAAJ,CAAO,KAAP,EAAc,YAAY;AACxB,UAAI,OAAO,OAAO,IAAP,CAAY,EAAZ,CAAX;AACA,eAAS,IAAT,EAAe,IAAf;AACD,KAHD;AAID,GAtBD,EAuBC,EAvBD,CAuBI,OAvBJ,EAuBa,UAAU,GAAV,EAAe;AAC1B,QAAI,YAAJ,EAAkB;AAChB;AACD;;AAED,mBAAe,IAAf;AACA,aAAS,IAAI,OAAb,EAAsB,IAAtB;AACD,GA9BD,EA+BC,EA/BD,CA+BI,SA/BJ,EA+Be,YAAY;AACzB,QAAI,YAAJ,EAAkB;AAChB;AACD;;AAED,mBAAe,IAAf;AACA,aAAS,SAAT,EAAoB,IAApB;AACD,GAtCD,EAuCC,UAvCD,CAuCY,aAvCZ;AAwCD;;AAED,OAAO,OAAP,GAAiB,kBAAjB","file":"load-remote-resource-compiled.js","sourcesContent":["var http = require('http');\nvar https = require('https');\nvar url = require('url');\n\nvar isHttpResource = require('../utils/is-http-resource');\nvar isHttpsResource = require('../utils/is-https-resource');\nvar override = require('../utils/override');\n\nvar HTTP_PROTOCOL = 'http:';\n\nfunction loadRemoteResource(uri, inlineRequest, inlineTimeout, callback) {\n  var proxyProtocol = inlineRequest.protocol || inlineRequest.hostname;\n  var errorHandled = false;\n  var requestOptions;\n  var fetch;\n\n  requestOptions = override(\n    url.parse(uri),\n    inlineRequest || {}\n  );\n\n  if (inlineRequest.hostname !== undefined) {\n    // overwrite as we always expect a http proxy currently\n    requestOptions.protocol = inlineRequest.protocol || HTTP_PROTOCOL;\n    requestOptions.path = requestOptions.href;\n  }\n\n  fetch = (proxyProtocol && !isHttpsResource(proxyProtocol)) || isHttpResource(uri) ?\n    http.get :\n    https.get;\n\n  fetch(requestOptions, function (res) {\n    var chunks = [];\n    var movedUri;\n\n    if (errorHandled) {\n      return;\n    }\n\n    if (res.statusCode < 200 || res.statusCode > 399) {\n      return callback(res.statusCode, null);\n    } else if (res.statusCode > 299) {\n      movedUri = url.resolve(uri, res.headers.location);\n      return loadRemoteResource(movedUri, inlineRequest, inlineTimeout, callback);\n    }\n\n    res.on('data', function (chunk) {\n      chunks.push(chunk.toString());\n    });\n    res.on('end', function () {\n      var body = chunks.join('');\n      callback(null, body);\n    });\n  })\n  .on('error', function (res) {\n    if (errorHandled) {\n      return;\n    }\n\n    errorHandled = true;\n    callback(res.message, null);\n  })\n  .on('timeout', function () {\n    if (errorHandled) {\n      return;\n    }\n\n    errorHandled = true;\n    callback('timeout', null);\n  })\n  .setTimeout(inlineTimeout);\n}\n\nmodule.exports = loadRemoteResource;\n"]}