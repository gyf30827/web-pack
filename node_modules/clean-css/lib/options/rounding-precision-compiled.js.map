{"version":3,"sources":["rounding-precision.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,mBAAR,CAAf;;AAEA,IAAI,kBAAkB,OAAtB;;AAEA,IAAI,YAAY,CAAC,GAAD,EAAM,KAAN,CAAhB;AACA,IAAI,oBAAoB,KAAxB,C,CAA+B;AAC/B,IAAI,uBAAuB,GAA3B,C,CAAgC;AAChC,IAAI,4BAA4B,GAAhC,C,CAAqC;;AAErC,SAAS,qBAAT,CAA+B,MAA/B,EAAuC;AACrC,SAAO,SAAS,SAAS,iBAAT,CAAT,EAAsC,mBAAmB,MAAnB,CAAtC,CAAP;AACD;;AAED,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,SAAO;AACL,UAAM,KADD;AAEL,UAAM,KAFD;AAGL,UAAM,KAHD;AAIL,UAAM,KAJD;AAKL,UAAM,KALD;AAML,UAAM,KAND;AAOL,UAAM,KAPD;AAQL,UAAM,KARD;AASL,UAAM,KATD;AAUL,SAAK,KAVA;AAWL,WAAO,KAXF;AAYL,UAAM,KAZD;AAaL,YAAQ,KAbH;AAcL,YAAQ,KAdH;AAeL,UAAM,KAfD;AAgBL,SAAK;AAhBA,GAAP;AAkBD;;AAED,SAAS,kBAAT,CAA4B,MAA5B,EAAoC;AAClC,MAAI,WAAW,IAAX,IAAmB,WAAW,SAAlC,EAA6C;AAC3C,WAAO,EAAP;AACD;;AAED,MAAI,OAAO,MAAP,IAAiB,SAArB,EAAgC;AAC9B,WAAO,EAAP;AACD;;AAED,MAAI,OAAO,MAAP,IAAiB,QAAjB,IAA6B,UAAU,CAAC,CAA5C,EAA+C;AAC7C,WAAO,SAAS,iBAAT,CAAP;AACD;;AAED,MAAI,OAAO,MAAP,IAAiB,QAArB,EAA+B;AAC7B,WAAO,SAAS,MAAT,CAAP;AACD;;AAED,MAAI,OAAO,MAAP,IAAiB,QAAjB,IAA6B,gBAAgB,IAAhB,CAAqB,MAArB,CAAjC,EAA+D;AAC7D,WAAO,SAAS,SAAS,MAAT,CAAT,CAAP;AACD;;AAED,MAAI,OAAO,MAAP,IAAiB,QAAjB,IAA6B,UAAU,iBAA3C,EAA8D;AAC5D,WAAO,SAAS,iBAAT,CAAP;AACD;;AAED,MAAI,OAAO,MAAP,IAAiB,QAArB,EAA+B;AAC7B,WAAO,MAAP;AACD;;AAED,SAAO,OACJ,KADI,CACE,oBADF,EAEJ,MAFI,CAEG,UAAU,WAAV,EAAuB,SAAvB,EAAkC;AACxC,QAAI,iBAAiB,UAAU,KAAV,CAAgB,yBAAhB,CAArB;AACA,QAAI,OAAO,eAAe,CAAf,CAAX;AACA,QAAI,QAAQ,SAAS,eAAe,CAAf,CAAT,CAAZ;;AAEA,QAAI,MAAM,KAAN,KAAgB,SAAS,CAAC,CAA9B,EAAiC;AAC/B,cAAQ,iBAAR;AACD;;AAED,QAAI,UAAU,OAAV,CAAkB,IAAlB,IAA0B,CAAC,CAA/B,EAAkC;AAChC,oBAAc,SAAS,WAAT,EAAsB,SAAS,KAAT,CAAtB,CAAd;AACD,KAFD,MAEO;AACL,kBAAY,IAAZ,IAAoB,KAApB;AACD;;AAED,WAAO,WAAP;AACD,GAlBI,EAkBF,EAlBE,CAAP;AAmBD;;AAED,OAAO,OAAP,GAAiB;AACf,WAAS,iBADM;AAEf,yBAAuB;AAFR,CAAjB","file":"rounding-precision-compiled.js","sourcesContent":["var override = require('../utils/override');\n\nvar INTEGER_PATTERN = /^\\d+$/;\n\nvar ALL_UNITS = ['*', 'all'];\nvar DEFAULT_PRECISION = 'off'; // all precision changes are disabled\nvar DIRECTIVES_SEPARATOR = ','; // e.g. *=5,px=3\nvar DIRECTIVE_VALUE_SEPARATOR = '='; // e.g. *=5\n\nfunction roundingPrecisionFrom(source) {\n  return override(defaults(DEFAULT_PRECISION), buildPrecisionFrom(source));\n}\n\nfunction defaults(value) {\n  return {\n    'ch': value,\n    'cm': value,\n    'em': value,\n    'ex': value,\n    'in': value,\n    'mm': value,\n    'pc': value,\n    'pt': value,\n    'px': value,\n    'q': value,\n    'rem': value,\n    'vh': value,\n    'vmax': value,\n    'vmin': value,\n    'vw': value,\n    '%': value\n  };\n}\n\nfunction buildPrecisionFrom(source) {\n  if (source === null || source === undefined) {\n    return {};\n  }\n\n  if (typeof source == 'boolean') {\n    return {};\n  }\n\n  if (typeof source == 'number' && source == -1) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'number') {\n    return defaults(source);\n  }\n\n  if (typeof source == 'string' && INTEGER_PATTERN.test(source)) {\n    return defaults(parseInt(source));\n  }\n\n  if (typeof source == 'string' && source == DEFAULT_PRECISION) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'object') {\n    return source;\n  }\n\n  return source\n    .split(DIRECTIVES_SEPARATOR)\n    .reduce(function (accumulator, directive) {\n      var directiveParts = directive.split(DIRECTIVE_VALUE_SEPARATOR);\n      var name = directiveParts[0];\n      var value = parseInt(directiveParts[1]);\n\n      if (isNaN(value) || value == -1) {\n        value = DEFAULT_PRECISION;\n      }\n\n      if (ALL_UNITS.indexOf(name) > -1) {\n        accumulator = override(accumulator, defaults(value));\n      } else {\n        accumulator[name] = value;\n      }\n\n      return accumulator;\n    }, {});\n}\n\nmodule.exports = {\n  DEFAULT: DEFAULT_PRECISION,\n  roundingPrecisionFrom: roundingPrecisionFrom\n};\n"]}