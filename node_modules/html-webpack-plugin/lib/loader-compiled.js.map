{"version":3,"sources":["loader.js"],"names":[],"mappings":"AAAA;AACA;;AAEA,IAAI,IAAI,QAAQ,QAAR,CAAR;AACA,IAAI,cAAc,QAAQ,cAAR,CAAlB;;AAEA,OAAO,OAAP,GAAiB,UAAU,MAAV,EAAkB;AACjC,MAAI,KAAK,SAAT,EAAoB;AAClB,SAAK,SAAL;AACD;AACD,MAAI,uBAAuB,KAAK,OAAL,CAAa,MAAb,CAAoB,UAAU,MAAV,EAAkB;AAC/D;AACA,WAAO,CAAC,OAAO,MAAP,IAAiB,OAAO,MAAzB,MAAqC,OAAO,OAAnD;AACD,GAH0B,CAA3B;AAIA;AACA,MAAI,qBAAqB,MAArB,GAA8B,CAAlC,EAAqC;AACnC,WAAO,MAAP;AACD;AACD;AACA,MAAI,QAAQ,IAAR,CAAa,KAAK,YAAlB,CAAJ,EAAqC;AACnC,WAAO,MAAP;AACD;;AAED;AACA;AACA;AACA,MAAI,UAAU,YAAY,UAAZ,CAAuB,KAAK,KAA5B,CAAd;AACA;AACA;AACA;AACA;AACA,MAAI,WAAW,EAAE,QAAF,CAAW,MAAX,EAAmB,EAAE,QAAF,CAAW,OAAX,EAAoB,EAAE,UAAU,MAAZ,EAApB,CAAnB,CAAf;AACA;AACA;AACA,MAAI,oBAAoB,CACtB,aADsB,EAEtB,SAFsB,EAGtB,eAHsB,EAItB,mBAJsB,CAAxB;AAMA,SAAO,qBAAqB,YAAY,gBAAZ,CAA6B,IAA7B,EAAmC,QAAQ,OAAR,CAAgB,QAAhB,CAAnC,CAArB,GAAqF,IAArF,GACL,8CADK;AAEH;AACA;AACA,oBAAkB,GAAlB,CAAsB,UAAU,YAAV,EAAwB;AAC5C,WAAO,SAAS,YAAT,GAAwB,oBAAxB,GAA+C,YAAtD;AACD,GAFD,EAEG,IAFH,CAEQ,GAFR,CAJG,GAMY,GANZ;AAOH;AACA,YARG,GAQU,SAAS,MARnB,GAQ4B,MAR5B,GASL,GATF;AAUD,CA5CD","file":"loader-compiled.js","sourcesContent":["/* This loader renders the template with underscore if no other loader was found */\n'use strict';\n\nvar _ = require('lodash');\nvar loaderUtils = require('loader-utils');\n\nmodule.exports = function (source) {\n  if (this.cacheable) {\n    this.cacheable();\n  }\n  var allLoadersButThisOne = this.loaders.filter(function (loader) {\n    // Loader API changed from `loader.module` to `loader.normal` in Webpack 2.\n    return (loader.module || loader.normal) !== module.exports;\n  });\n  // This loader shouldn't kick in if there is any other loader\n  if (allLoadersButThisOne.length > 0) {\n    return source;\n  }\n  // Skip .js files\n  if (/\\.js$/.test(this.resourcePath)) {\n    return source;\n  }\n\n  // The following part renders the tempalte with lodash as aminimalistic loader\n  //\n  // Get templating options\n  var options = loaderUtils.parseQuery(this.query);\n  // Webpack 2 does not allow with() statements, which lodash templates use to unwrap\n  // the parameters passed to the compiled template inside the scope. We therefore\n  // need to unwrap them ourselves here. This is essentially what lodash does internally\n  // To tell lodash it should not use with we set a variable\n  var template = _.template(source, _.defaults(options, { variable: 'data' }));\n  // All templateVariables which should be available\n  // @see HtmlWebpackPlugin.prototype.executeTemplate\n  var templateVariables = [\n    'compilation',\n    'webpack',\n    'webpackConfig',\n    'htmlWebpackPlugin'\n  ];\n  return 'var _ = require(' + loaderUtils.stringifyRequest(this, require.resolve('lodash')) + ');' +\n    'module.exports = function (templateParams) {' +\n      // Declare the template variables in the outer scope of the\n      // lodash template to unwrap them\n      templateVariables.map(function (variableName) {\n        return 'var ' + variableName + ' = templateParams.' + variableName;\n      }).join(';') + ';' +\n      // Execute the lodash template\n      'return (' + template.source + ')();' +\n    '}';\n};\n"]}