{"version":3,"sources":["ast.js"],"names":[],"mappings":"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","file":"ast-compiled.js","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction DEFNODE(type, props, methods, base) {\n    if (arguments.length < 4) base = AST_Node;\n    if (!props) props = [];\n    else props = props.split(/\\s+/);\n    var self_props = props;\n    if (base && base.PROPS)\n        props = props.concat(base.PROPS);\n    var code = \"return function AST_\" + type + \"(props){ if (props) { \";\n    for (var i = props.length; --i >= 0;) {\n        code += \"this.\" + props[i] + \" = props.\" + props[i] + \";\";\n    }\n    var proto = base && new base;\n    if (proto && proto.initialize || (methods && methods.initialize))\n        code += \"this.initialize();\";\n    code += \"}}\";\n    var ctor = new Function(code)();\n    if (proto) {\n        ctor.prototype = proto;\n        ctor.BASE = base;\n    }\n    if (base) base.SUBCLASSES.push(ctor);\n    ctor.prototype.CTOR = ctor;\n    ctor.PROPS = props || null;\n    ctor.SELF_PROPS = self_props;\n    ctor.SUBCLASSES = [];\n    if (type) {\n        ctor.prototype.TYPE = ctor.TYPE = type;\n    }\n    if (methods) for (i in methods) if (HOP(methods, i)) {\n        if (/^\\$/.test(i)) {\n            ctor[i.substr(1)] = methods[i];\n        } else {\n            ctor.prototype[i] = methods[i];\n        }\n    }\n    ctor.DEFMETHOD = function(name, method) {\n        this.prototype[name] = method;\n    };\n    if (typeof exports !== \"undefined\") {\n        exports[\"AST_\" + type] = ctor;\n    }\n    return ctor;\n};\n\nvar AST_Token = DEFNODE(\"Token\", \"type value line col pos endline endcol endpos nlb comments_before file raw\", {\n}, null);\n\nvar AST_Node = DEFNODE(\"Node\", \"start end\", {\n    _clone: function(deep) {\n        if (deep) {\n            var self = this.clone();\n            return self.transform(new TreeTransformer(function(node) {\n                if (node !== self) {\n                    return node.clone(true);\n                }\n            }));\n        }\n        return new this.CTOR(this);\n    },\n    clone: function(deep) {\n        return this._clone(deep);\n    },\n    $documentation: \"Base class of all AST nodes\",\n    $propdoc: {\n        start: \"[AST_Token] The first token of this node\",\n        end: \"[AST_Token] The last token of this node\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    },\n    walk: function(visitor) {\n        return this._walk(visitor); // not sure the indirection will be any help\n    }\n}, null);\n\nAST_Node.warn_function = null;\nAST_Node.warn = function(txt, props) {\n    if (AST_Node.warn_function)\n        AST_Node.warn_function(string_template(txt, props));\n};\n\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE(\"Statement\", null, {\n    $documentation: \"Base class of all statements\",\n});\n\nvar AST_Debugger = DEFNODE(\"Debugger\", null, {\n    $documentation: \"Represents a debugger statement\",\n}, AST_Statement);\n\nvar AST_Directive = DEFNODE(\"Directive\", \"value quote\", {\n    $documentation: \"Represents a directive, like \\\"use strict\\\";\",\n    $propdoc: {\n        value: \"[string] The value of this directive as a plain string (it's not an AST_String!)\",\n        quote: \"[string] the original quote character\"\n    },\n}, AST_Statement);\n\nvar AST_SimpleStatement = DEFNODE(\"SimpleStatement\", \"body\", {\n    $documentation: \"A statement consisting of an expression, i.e. a = 1 + 2\",\n    $propdoc: {\n        body: \"[AST_Node] an expression node (should not be instanceof AST_Statement)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n        });\n    }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n    var body = node.body;\n    if (body instanceof AST_Statement) {\n        body._walk(visitor);\n    }\n    else for (var i = 0, len = body.length; i < len; i++) {\n        body[i]._walk(visitor);\n    }\n};\n\nvar AST_Block = DEFNODE(\"Block\", \"body\", {\n    $documentation: \"A body of statements (usually bracketed)\",\n    $propdoc: {\n        body: \"[AST_Statement*] an array of statements\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Statement);\n\nvar AST_BlockStatement = DEFNODE(\"BlockStatement\", null, {\n    $documentation: \"A block statement\",\n}, AST_Block);\n\nvar AST_EmptyStatement = DEFNODE(\"EmptyStatement\", null, {\n    $documentation: \"The empty statement (empty block or simply a semicolon)\"\n}, AST_Statement);\n\nvar AST_StatementWithBody = DEFNODE(\"StatementWithBody\", \"body\", {\n    $documentation: \"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`\",\n    $propdoc: {\n        body: \"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement\"\n    }\n}, AST_Statement);\n\nvar AST_LabeledStatement = DEFNODE(\"LabeledStatement\", \"label\", {\n    $documentation: \"Statement with a label\",\n    $propdoc: {\n        label: \"[AST_Label] a label definition\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.label._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (deep) {\n            var label = node.label;\n            var def = this.label;\n            node.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_LoopControl\n                    && node.label && node.label.thedef === def) {\n                    node.label.thedef = label;\n                    label.references.push(node);\n                }\n            }));\n        }\n        return node;\n    }\n}, AST_StatementWithBody);\n\nvar AST_IterationStatement = DEFNODE(\"IterationStatement\", null, {\n    $documentation: \"Internal class.  All loops inherit from it.\"\n}, AST_StatementWithBody);\n\nvar AST_DWLoop = DEFNODE(\"DWLoop\", \"condition\", {\n    $documentation: \"Base class for do/while statements\",\n    $propdoc: {\n        condition: \"[AST_Node] the loop condition.  Should not be instanceof AST_Statement\"\n    }\n}, AST_IterationStatement);\n\nvar AST_Do = DEFNODE(\"Do\", null, {\n    $documentation: \"A `do` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n            this.condition._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_While = DEFNODE(\"While\", null, {\n    $documentation: \"A `while` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_For = DEFNODE(\"For\", \"init condition step\", {\n    $documentation: \"A `for` statement\",\n    $propdoc: {\n        init: \"[AST_Node?] the `for` initialization code, or null if empty\",\n        condition: \"[AST_Node?] the `for` termination clause, or null if empty\",\n        step: \"[AST_Node?] the `for` update clause, or null if empty\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.init) this.init._walk(visitor);\n            if (this.condition) this.condition._walk(visitor);\n            if (this.step) this.step._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForIn = DEFNODE(\"ForIn\", \"init name object\", {\n    $documentation: \"A `for ... in` statement\",\n    $propdoc: {\n        init: \"[AST_Node] the `for/in` initialization code\",\n        name: \"[AST_SymbolRef?] the loop variable, only if `init` is AST_Var\",\n        object: \"[AST_Node] the object that we're looping through\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.init._walk(visitor);\n            this.object._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_With = DEFNODE(\"With\", \"expression\", {\n    $documentation: \"A `with` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `with` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE(\"Scope\", \"variables functions uses_with uses_eval parent_scope enclosed cname\", {\n    $documentation: \"Base class for all statements introducing a lexical scope\",\n    $propdoc: {\n        variables: \"[Object/S] a map of name -> SymbolDef for all variables/functions defined in this scope\",\n        functions: \"[Object/S] like `variables`, but only lists function declarations\",\n        uses_with: \"[boolean/S] tells whether this scope uses the `with` statement\",\n        uses_eval: \"[boolean/S] tells whether this scope contains a direct call to the global `eval`\",\n        parent_scope: \"[AST_Scope?/S] link to the parent scope\",\n        enclosed: \"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes\",\n        cname: \"[integer/S] current index for mangling variables (used internally by the mangler)\",\n    },\n}, AST_Block);\n\nvar AST_Toplevel = DEFNODE(\"Toplevel\", \"globals\", {\n    $documentation: \"The toplevel scope\",\n    $propdoc: {\n        globals: \"[Object/S] a map of name -> SymbolDef for all undeclared names\",\n    },\n    wrap_commonjs: function(name) {\n        var body = this.body;\n        var wrapped_tl = \"(function(exports){'$ORIG';})(typeof \" + name + \"=='undefined'?(\" + name + \"={}):\" + name + \");\";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function before(node){\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n        return wrapped_tl;\n    }\n}, AST_Scope);\n\nvar AST_Lambda = DEFNODE(\"Lambda\", \"name argnames uses_arguments\", {\n    $documentation: \"Base class for functions\",\n    $propdoc: {\n        name: \"[AST_SymbolDeclaration?] the name of this function\",\n        argnames: \"[AST_SymbolFunarg*] array of function arguments\",\n        uses_arguments: \"[boolean/S] tells whether this function accesses the arguments array\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.name) this.name._walk(visitor);\n            var argnames = this.argnames;\n            for (var i = 0, len = argnames.length; i < len; i++) {\n                argnames[i]._walk(visitor);\n            }\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Scope);\n\nvar AST_Accessor = DEFNODE(\"Accessor\", null, {\n    $documentation: \"A setter/getter function.  The `name` property is always null.\"\n}, AST_Lambda);\n\nvar AST_Function = DEFNODE(\"Function\", \"inlined\", {\n    $documentation: \"A function expression\"\n}, AST_Lambda);\n\nvar AST_Defun = DEFNODE(\"Defun\", \"inlined\", {\n    $documentation: \"A function definition\"\n}, AST_Lambda);\n\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE(\"Jump\", null, {\n    $documentation: \"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)\"\n}, AST_Statement);\n\nvar AST_Exit = DEFNODE(\"Exit\", \"value\", {\n    $documentation: \"Base class for “exits” (`return` and `throw`)\",\n    $propdoc: {\n        value: \"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.value && function(){\n            this.value._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Return = DEFNODE(\"Return\", null, {\n    $documentation: \"A `return` statement\"\n}, AST_Exit);\n\nvar AST_Throw = DEFNODE(\"Throw\", null, {\n    $documentation: \"A `throw` statement\"\n}, AST_Exit);\n\nvar AST_LoopControl = DEFNODE(\"LoopControl\", \"label\", {\n    $documentation: \"Base class for loop control statements (`break` and `continue`)\",\n    $propdoc: {\n        label: \"[AST_LabelRef?] the label, or null if none\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.label && function(){\n            this.label._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Break = DEFNODE(\"Break\", null, {\n    $documentation: \"A `break` statement\"\n}, AST_LoopControl);\n\nvar AST_Continue = DEFNODE(\"Continue\", null, {\n    $documentation: \"A `continue` statement\"\n}, AST_LoopControl);\n\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE(\"If\", \"condition alternative\", {\n    $documentation: \"A `if` statement\",\n    $propdoc: {\n        condition: \"[AST_Node] the `if` condition\",\n        alternative: \"[AST_Statement?] the `else` part, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n            if (this.alternative) this.alternative._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE(\"Switch\", \"expression\", {\n    $documentation: \"A `switch` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `switch` “discriminant”\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_SwitchBranch = DEFNODE(\"SwitchBranch\", null, {\n    $documentation: \"Base class for `switch` branches\",\n}, AST_Block);\n\nvar AST_Default = DEFNODE(\"Default\", null, {\n    $documentation: \"A `default` switch branch\",\n}, AST_SwitchBranch);\n\nvar AST_Case = DEFNODE(\"Case\", \"expression\", {\n    $documentation: \"A `case` switch branch\",\n    $propdoc: {\n        expression: \"[AST_Node] the `case` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_SwitchBranch);\n\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE(\"Try\", \"bcatch bfinally\", {\n    $documentation: \"A `try` statement\",\n    $propdoc: {\n        bcatch: \"[AST_Catch?] the catch block, or null if not present\",\n        bfinally: \"[AST_Finally?] the finally block, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            walk_body(this, visitor);\n            if (this.bcatch) this.bcatch._walk(visitor);\n            if (this.bfinally) this.bfinally._walk(visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Catch = DEFNODE(\"Catch\", \"argname\", {\n    $documentation: \"A `catch` node; only makes sense as part of a `try` statement\",\n    $propdoc: {\n        argname: \"[AST_SymbolCatch] symbol for the exception\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.argname._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Finally = DEFNODE(\"Finally\", null, {\n    $documentation: \"A `finally` node; only makes sense as part of a `try` statement\"\n}, AST_Block);\n\n/* -----[ VAR ]----- */\n\nvar AST_Definitions = DEFNODE(\"Definitions\", \"definitions\", {\n    $documentation: \"Base class for `var` nodes (variable declarations/initializations)\",\n    $propdoc: {\n        definitions: \"[AST_VarDef*] array of variable definitions\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var definitions = this.definitions;\n            for (var i = 0, len = definitions.length; i < len; i++) {\n                definitions[i]._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_Var = DEFNODE(\"Var\", null, {\n    $documentation: \"A `var` statement\"\n}, AST_Definitions);\n\nvar AST_VarDef = DEFNODE(\"VarDef\", \"name value\", {\n    $documentation: \"A variable declaration; only appears in a AST_Definitions node\",\n    $propdoc: {\n        name: \"[AST_SymbolVar] name of the variable\",\n        value: \"[AST_Node?] initializer, or null of there's no initializer\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.name._walk(visitor);\n            if (this.value) this.value._walk(visitor);\n        });\n    }\n});\n\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE(\"Call\", \"expression args\", {\n    $documentation: \"A function call expression\",\n    $propdoc: {\n        expression: \"[AST_Node] expression to invoke as function\",\n        args: \"[AST_Node*] array of arguments\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var args = this.args;\n            for (var i = 0, len = args.length; i < len; i++) {\n                args[i]._walk(visitor);\n            }\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_New = DEFNODE(\"New\", null, {\n    $documentation: \"An object instantiation.  Derives from a function call since it has exactly the same properties\"\n}, AST_Call);\n\nvar AST_Sequence = DEFNODE(\"Sequence\", \"expressions\", {\n    $documentation: \"A sequence expression (comma-separated expressions)\",\n    $propdoc: {\n        expressions: \"[AST_Node*] array of expressions (at least two)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expressions.forEach(function(node) {\n                node._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_PropAccess = DEFNODE(\"PropAccess\", \"expression property\", {\n    $documentation: \"Base class for property access expressions, i.e. `a.foo` or `a[\\\"foo\\\"]`\",\n    $propdoc: {\n        expression: \"[AST_Node] the “container” expression\",\n        property: \"[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it's an arbitrary AST_Node\"\n    }\n});\n\nvar AST_Dot = DEFNODE(\"Dot\", null, {\n    $documentation: \"A dotted property access expression\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Sub = DEFNODE(\"Sub\", null, {\n    $documentation: \"Index-style property access, i.e. `a[\\\"foo\\\"]`\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            this.property._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Unary = DEFNODE(\"Unary\", \"operator expression\", {\n    $documentation: \"Base class for unary expressions\",\n    $propdoc: {\n        operator: \"[string] the operator\",\n        expression: \"[AST_Node] expression that this unary operator applies to\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_UnaryPrefix = DEFNODE(\"UnaryPrefix\", null, {\n    $documentation: \"Unary prefix expression, i.e. `typeof i` or `++i`\"\n}, AST_Unary);\n\nvar AST_UnaryPostfix = DEFNODE(\"UnaryPostfix\", null, {\n    $documentation: \"Unary postfix expression, i.e. `i++`\"\n}, AST_Unary);\n\nvar AST_Binary = DEFNODE(\"Binary\", \"operator left right\", {\n    $documentation: \"Binary expression, i.e. `a + b`\",\n    $propdoc: {\n        left: \"[AST_Node] left-hand side expression\",\n        operator: \"[string] the operator\",\n        right: \"[AST_Node] right-hand side expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.left._walk(visitor);\n            this.right._walk(visitor);\n        });\n    }\n});\n\nvar AST_Conditional = DEFNODE(\"Conditional\", \"condition consequent alternative\", {\n    $documentation: \"Conditional expression using the ternary operator, i.e. `a ? b : c`\",\n    $propdoc: {\n        condition: \"[AST_Node]\",\n        consequent: \"[AST_Node]\",\n        alternative: \"[AST_Node]\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.consequent._walk(visitor);\n            this.alternative._walk(visitor);\n        });\n    }\n});\n\nvar AST_Assign = DEFNODE(\"Assign\", null, {\n    $documentation: \"An assignment expression — `a = b + 5`\",\n}, AST_Binary);\n\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE(\"Array\", \"elements\", {\n    $documentation: \"An array literal\",\n    $propdoc: {\n        elements: \"[AST_Node*] array of elements\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var elements = this.elements;\n            for (var i = 0, len = elements.length; i < len; i++) {\n                elements[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_Object = DEFNODE(\"Object\", \"properties\", {\n    $documentation: \"An object literal\",\n    $propdoc: {\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var properties = this.properties;\n            for (var i = 0, len = properties.length; i < len; i++) {\n                properties[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_ObjectProperty = DEFNODE(\"ObjectProperty\", \"key value\", {\n    $documentation: \"Base class for literal object properties\",\n    $propdoc: {\n        key: \"[string] the property name converted to a string for ObjectKeyVal.  For setters and getters this is an AST_SymbolAccessor.\",\n        value: \"[AST_Node] property value.  For setters and getters this is an AST_Accessor.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.value._walk(visitor);\n        });\n    }\n});\n\nvar AST_ObjectKeyVal = DEFNODE(\"ObjectKeyVal\", \"quote\", {\n    $documentation: \"A key: value object property\",\n    $propdoc: {\n        quote: \"[string] the original quote character\"\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSetter = DEFNODE(\"ObjectSetter\", null, {\n    $documentation: \"An object setter property\",\n}, AST_ObjectProperty);\n\nvar AST_ObjectGetter = DEFNODE(\"ObjectGetter\", null, {\n    $documentation: \"An object getter property\",\n}, AST_ObjectProperty);\n\nvar AST_Symbol = DEFNODE(\"Symbol\", \"scope name thedef\", {\n    $propdoc: {\n        name: \"[string] name of this symbol\",\n        scope: \"[AST_Scope/S] the current scope (not necessarily the definition scope)\",\n        thedef: \"[SymbolDef/S] the definition of this symbol\"\n    },\n    $documentation: \"Base class for all symbols\",\n});\n\nvar AST_SymbolAccessor = DEFNODE(\"SymbolAccessor\", null, {\n    $documentation: \"The name of a property accessor (setter/getter function)\"\n}, AST_Symbol);\n\nvar AST_SymbolDeclaration = DEFNODE(\"SymbolDeclaration\", \"init\", {\n    $documentation: \"A declaration symbol (symbol in var, function name or argument, symbol in catch)\",\n}, AST_Symbol);\n\nvar AST_SymbolVar = DEFNODE(\"SymbolVar\", null, {\n    $documentation: \"Symbol defining a variable\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolFunarg = DEFNODE(\"SymbolFunarg\", null, {\n    $documentation: \"Symbol naming a function argument\",\n}, AST_SymbolVar);\n\nvar AST_SymbolDefun = DEFNODE(\"SymbolDefun\", null, {\n    $documentation: \"Symbol defining a function\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolLambda = DEFNODE(\"SymbolLambda\", null, {\n    $documentation: \"Symbol naming a function expression\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolCatch = DEFNODE(\"SymbolCatch\", null, {\n    $documentation: \"Symbol naming the exception in catch\",\n}, AST_SymbolDeclaration);\n\nvar AST_Label = DEFNODE(\"Label\", \"references\", {\n    $documentation: \"Symbol naming a label (declaration)\",\n    $propdoc: {\n        references: \"[AST_LoopControl*] a list of nodes referring to this label\"\n    },\n    initialize: function() {\n        this.references = [];\n        this.thedef = this;\n    }\n}, AST_Symbol);\n\nvar AST_SymbolRef = DEFNODE(\"SymbolRef\", null, {\n    $documentation: \"Reference to some symbol (not definition/declaration)\",\n}, AST_Symbol);\n\nvar AST_LabelRef = DEFNODE(\"LabelRef\", null, {\n    $documentation: \"Reference to a label symbol\",\n}, AST_Symbol);\n\nvar AST_This = DEFNODE(\"This\", null, {\n    $documentation: \"The `this` symbol\",\n}, AST_Symbol);\n\nvar AST_Constant = DEFNODE(\"Constant\", null, {\n    $documentation: \"Base class for all constants\",\n    getValue: function() {\n        return this.value;\n    }\n});\n\nvar AST_String = DEFNODE(\"String\", \"value quote\", {\n    $documentation: \"A string literal\",\n    $propdoc: {\n        value: \"[string] the contents of this string\",\n        quote: \"[string] the original quote character\"\n    }\n}, AST_Constant);\n\nvar AST_Number = DEFNODE(\"Number\", \"value literal\", {\n    $documentation: \"A number literal\",\n    $propdoc: {\n        value: \"[number] the numeric value\",\n        literal: \"[string] numeric value as string (optional)\"\n    }\n}, AST_Constant);\n\nvar AST_RegExp = DEFNODE(\"RegExp\", \"value\", {\n    $documentation: \"A regexp literal\",\n    $propdoc: {\n        value: \"[RegExp] the actual regexp\"\n    }\n}, AST_Constant);\n\nvar AST_Atom = DEFNODE(\"Atom\", null, {\n    $documentation: \"Base class for atoms\",\n}, AST_Constant);\n\nvar AST_Null = DEFNODE(\"Null\", null, {\n    $documentation: \"The `null` atom\",\n    value: null\n}, AST_Atom);\n\nvar AST_NaN = DEFNODE(\"NaN\", null, {\n    $documentation: \"The impossible value\",\n    value: 0/0\n}, AST_Atom);\n\nvar AST_Undefined = DEFNODE(\"Undefined\", null, {\n    $documentation: \"The `undefined` value\",\n    value: (function(){}())\n}, AST_Atom);\n\nvar AST_Hole = DEFNODE(\"Hole\", null, {\n    $documentation: \"A hole in an array\",\n    value: (function(){}())\n}, AST_Atom);\n\nvar AST_Infinity = DEFNODE(\"Infinity\", null, {\n    $documentation: \"The `Infinity` value\",\n    value: 1/0\n}, AST_Atom);\n\nvar AST_Boolean = DEFNODE(\"Boolean\", null, {\n    $documentation: \"Base class for booleans\",\n}, AST_Atom);\n\nvar AST_False = DEFNODE(\"False\", null, {\n    $documentation: \"The `false` atom\",\n    value: false\n}, AST_Boolean);\n\nvar AST_True = DEFNODE(\"True\", null, {\n    $documentation: \"The `true` atom\",\n    value: true\n}, AST_Boolean);\n\n/* -----[ TreeWalker ]----- */\n\nfunction TreeWalker(callback) {\n    this.visit = callback;\n    this.stack = [];\n    this.directives = Object.create(null);\n};\nTreeWalker.prototype = {\n    _visit: function(node, descend) {\n        this.push(node);\n        var ret = this.visit(node, descend ? function(){\n            descend.call(node);\n        } : noop);\n        if (!ret && descend) {\n            descend.call(node);\n        }\n        this.pop();\n        return ret;\n    },\n    parent: function(n) {\n        return this.stack[this.stack.length - 2 - (n || 0)];\n    },\n    push: function(node) {\n        if (node instanceof AST_Lambda) {\n            this.directives = Object.create(this.directives);\n        } else if (node instanceof AST_Directive && !this.directives[node.value]) {\n            this.directives[node.value] = node;\n        }\n        this.stack.push(node);\n    },\n    pop: function() {\n        if (this.stack.pop() instanceof AST_Lambda) {\n            this.directives = Object.getPrototypeOf(this.directives);\n        }\n    },\n    self: function() {\n        return this.stack[this.stack.length - 1];\n    },\n    find_parent: function(type) {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof type) return x;\n        }\n    },\n    has_directive: function(type) {\n        var dir = this.directives[type];\n        if (dir) return dir;\n        var node = this.stack[this.stack.length - 1];\n        if (node instanceof AST_Scope) {\n            for (var i = 0; i < node.body.length; ++i) {\n                var st = node.body[i];\n                if (!(st instanceof AST_Directive)) break;\n                if (st.value == type) return st;\n            }\n        }\n    },\n    in_boolean_context: function() {\n        var stack = this.stack;\n        var i = stack.length, self = stack[--i];\n        while (i > 0) {\n            var p = stack[--i];\n            if ((p instanceof AST_If           && p.condition === self) ||\n                (p instanceof AST_Conditional  && p.condition === self) ||\n                (p instanceof AST_DWLoop       && p.condition === self) ||\n                (p instanceof AST_For          && p.condition === self) ||\n                (p instanceof AST_UnaryPrefix  && p.operator == \"!\" && p.expression === self))\n            {\n                return true;\n            }\n            if (!(p instanceof AST_Binary && (p.operator == \"&&\" || p.operator == \"||\")))\n                return false;\n            self = p;\n        }\n    },\n    loopcontrol_target: function(node) {\n        var stack = this.stack;\n        if (node.label) for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)\n                return x.body;\n        } else for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_IterationStatement\n                || node instanceof AST_Break && x instanceof AST_Switch)\n                return x;\n        }\n    }\n};\n"]}