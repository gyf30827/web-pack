{"version":3,"sources":["compress.js"],"names":[],"mappings":"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","file":"compress-compiled.js","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction Compressor(options, false_by_default) {\n    if (!(this instanceof Compressor))\n        return new Compressor(options, false_by_default);\n    TreeTransformer.call(this, this.before, this.after);\n    this.options = defaults(options, {\n        booleans      : !false_by_default,\n        cascade       : !false_by_default,\n        collapse_vars : !false_by_default,\n        comparisons   : !false_by_default,\n        conditionals  : !false_by_default,\n        dead_code     : !false_by_default,\n        drop_console  : false,\n        drop_debugger : !false_by_default,\n        evaluate      : !false_by_default,\n        expression    : false,\n        global_defs   : {},\n        hoist_funs    : !false_by_default,\n        hoist_props   : !false_by_default,\n        hoist_vars    : false,\n        ie8           : false,\n        if_return     : !false_by_default,\n        inline        : !false_by_default,\n        join_vars     : !false_by_default,\n        keep_fargs    : true,\n        keep_fnames   : false,\n        keep_infinity : false,\n        loops         : !false_by_default,\n        negate_iife   : !false_by_default,\n        passes        : 1,\n        properties    : !false_by_default,\n        pure_getters  : !false_by_default && \"strict\",\n        pure_funcs    : null,\n        reduce_funcs  : !false_by_default,\n        reduce_vars   : !false_by_default,\n        sequences     : !false_by_default,\n        side_effects  : !false_by_default,\n        switches      : !false_by_default,\n        top_retain    : null,\n        toplevel      : !!(options && options[\"top_retain\"]),\n        typeofs       : !false_by_default,\n        unsafe        : false,\n        unsafe_comps  : false,\n        unsafe_Func   : false,\n        unsafe_math   : false,\n        unsafe_proto  : false,\n        unsafe_regexp : false,\n        unused        : !false_by_default,\n        warnings      : false,\n    }, true);\n    var global_defs = this.options[\"global_defs\"];\n    if (typeof global_defs == \"object\") for (var key in global_defs) {\n        if (/^@/.test(key) && HOP(global_defs, key)) {\n            global_defs[key.slice(1)] = parse(global_defs[key], {\n                expression: true\n            });\n        }\n    }\n    var pure_funcs = this.options[\"pure_funcs\"];\n    if (typeof pure_funcs == \"function\") {\n        this.pure_funcs = pure_funcs;\n    } else {\n        this.pure_funcs = pure_funcs ? function(node) {\n            return pure_funcs.indexOf(node.expression.print_to_string()) < 0;\n        } : return_true;\n    }\n    var top_retain = this.options[\"top_retain\"];\n    if (top_retain instanceof RegExp) {\n        this.top_retain = function(def) {\n            return top_retain.test(def.name);\n        };\n    } else if (typeof top_retain == \"function\") {\n        this.top_retain = top_retain;\n    } else if (top_retain) {\n        if (typeof top_retain == \"string\") {\n            top_retain = top_retain.split(/,/);\n        }\n        this.top_retain = function(def) {\n            return top_retain.indexOf(def.name) >= 0;\n        };\n    }\n    var toplevel = this.options[\"toplevel\"];\n    this.toplevel = typeof toplevel == \"string\" ? {\n        funcs: /funcs/.test(toplevel),\n        vars: /vars/.test(toplevel)\n    } : {\n        funcs: toplevel,\n        vars: toplevel\n    };\n    var sequences = this.options[\"sequences\"];\n    this.sequences_limit = sequences == 1 ? 800 : sequences | 0;\n    this.warnings_produced = {};\n};\n\nCompressor.prototype = new TreeTransformer;\nmerge(Compressor.prototype, {\n    option: function(key) { return this.options[key] },\n    exposed: function(def) {\n        if (def.global) for (var i = 0, len = def.orig.length; i < len; i++)\n            if (!this.toplevel[def.orig[i] instanceof AST_SymbolDefun ? \"funcs\" : \"vars\"])\n                return true;\n        return false;\n    },\n    compress: function(node) {\n        if (this.option(\"expression\")) {\n            node.process_expression(true);\n        }\n        var passes = +this.options.passes || 1;\n        var last_count = 1 / 0;\n        var mangle = { ie8: this.option(\"ie8\") };\n        for (var pass = 0; pass < passes; pass++) {\n            node.figure_out_scope(mangle);\n            if (pass > 0 || this.option(\"reduce_vars\"))\n                node.reset_opt_flags(this);\n            node = node.transform(this);\n            if (passes > 1) {\n                var count = 0;\n                node.walk(new TreeWalker(function() {\n                    count++;\n                }));\n                this.info(\"pass \" + pass + \": last_count: \" + last_count + \", count: \" + count);\n                if (count >= last_count) break;\n                last_count = count;\n            }\n        }\n        if (this.option(\"expression\")) {\n            node.process_expression(false);\n        }\n        return node;\n    },\n    info: function() {\n        if (this.options.warnings == \"verbose\") {\n            AST_Node.warn.apply(AST_Node, arguments);\n        }\n    },\n    warn: function(text, props) {\n        if (this.options.warnings) {\n            // only emit unique warnings\n            var message = string_template(text, props);\n            if (!(message in this.warnings_produced)) {\n                this.warnings_produced[message] = true;\n                AST_Node.warn.apply(AST_Node, arguments);\n            }\n        }\n    },\n    clear_warnings: function() {\n        this.warnings_produced = {};\n    },\n    before: function(node, descend, in_list) {\n        if (node._squeezed) return node;\n        var was_scope = false;\n        if (node instanceof AST_Scope) {\n            node = node.hoist_properties(this);\n            node = node.hoist_declarations(this);\n            was_scope = true;\n        }\n        // Before https://github.com/mishoo/UglifyJS2/pull/1602 AST_Node.optimize()\n        // would call AST_Node.transform() if a different instance of AST_Node is\n        // produced after OPT().\n        // This corrupts TreeWalker.stack, which cause AST look-ups to malfunction.\n        // Migrate and defer all children's AST_Node.transform() to below, which\n        // will now happen after this parent AST_Node has been properly substituted\n        // thus gives a consistent AST snapshot.\n        descend(node, this);\n        // Existing code relies on how AST_Node.optimize() worked, and omitting the\n        // following replacement call would result in degraded efficiency of both\n        // output and performance.\n        descend(node, this);\n        var opt = node.optimize(this);\n        if (was_scope && opt instanceof AST_Scope) {\n            opt.drop_unused(this);\n            descend(opt, this);\n        }\n        if (opt === node) opt._squeezed = true;\n        return opt;\n    }\n});\n\n(function(){\n\n    function OPT(node, optimizer) {\n        node.DEFMETHOD(\"optimize\", function(compressor){\n            var self = this;\n            if (self._optimized) return self;\n            if (compressor.has_directive(\"use asm\")) return self;\n            var opt = optimizer(self, compressor);\n            opt._optimized = true;\n            return opt;\n        });\n    };\n\n    OPT(AST_Node, function(self, compressor){\n        return self;\n    });\n\n    AST_Node.DEFMETHOD(\"equivalent_to\", function(node){\n        return this.TYPE == node.TYPE && this.print_to_string() == node.print_to_string();\n    });\n\n    AST_Scope.DEFMETHOD(\"process_expression\", function(insert, compressor) {\n        var self = this;\n        var tt = new TreeTransformer(function(node) {\n            if (insert && node instanceof AST_SimpleStatement) {\n                return make_node(AST_Return, node, {\n                    value: node.body\n                });\n            }\n            if (!insert && node instanceof AST_Return) {\n                if (compressor) {\n                    var value = node.value && node.value.drop_side_effect_free(compressor, true);\n                    return value ? make_node(AST_SimpleStatement, node, {\n                        body: value\n                    }) : make_node(AST_EmptyStatement, node);\n                }\n                return make_node(AST_SimpleStatement, node, {\n                    body: node.value || make_node(AST_UnaryPrefix, node, {\n                        operator: \"void\",\n                        expression: make_node(AST_Number, node, {\n                            value: 0\n                        })\n                    })\n                });\n            }\n            if (node instanceof AST_Lambda && node !== self) {\n                return node;\n            }\n            if (node instanceof AST_Block) {\n                var index = node.body.length - 1;\n                if (index >= 0) {\n                    node.body[index] = node.body[index].transform(tt);\n                }\n            }\n            if (node instanceof AST_If) {\n                node.body = node.body.transform(tt);\n                if (node.alternative) {\n                    node.alternative = node.alternative.transform(tt);\n                }\n            }\n            if (node instanceof AST_With) {\n                node.body = node.body.transform(tt);\n            }\n            return node;\n        });\n        self.transform(tt);\n    });\n\n    AST_Toplevel.DEFMETHOD(\"reset_opt_flags\", function(compressor) {\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var unused = compressor.option(\"unused\");\n        // Stack of look-up tables to keep track of whether a `SymbolDef` has been\n        // properly assigned before use:\n        // - `push()` & `pop()` when visiting conditional branches\n        // - backup & restore via `save_ids` when visiting out-of-order sections\n        var safe_ids = Object.create(null);\n        var suppressor = new TreeWalker(function(node) {\n            if (!(node instanceof AST_Symbol)) return;\n            var d = node.definition();\n            if (!d) return;\n            if (node instanceof AST_SymbolRef) d.references.push(node);\n            d.fixed = false;\n        });\n        var in_loop = null;\n        var loop_ids = Object.create(null);\n        var tw = new TreeWalker(function(node, descend) {\n            node._squeezed = false;\n            node._optimized = false;\n            if (reduce_vars) {\n                if (node instanceof AST_Toplevel) node.globals.each(reset_def);\n                if (node instanceof AST_Scope) node.variables.each(reset_def);\n                if (node instanceof AST_SymbolRef) {\n                    var d = node.definition();\n                    d.references.push(node);\n                    var value;\n                    if (d.fixed === undefined || !safe_to_read(d) || d.single_use == \"m\") {\n                        d.fixed = false;\n                    } else if (d.fixed) {\n                        value = node.fixed_value();\n                        if (value && ref_once(d)) {\n                            d.single_use = value instanceof AST_Lambda\n                                || d.scope === node.scope && value.is_constant_expression();\n                        } else {\n                            d.single_use = false;\n                        }\n                        if (is_modified(node, value, 0, is_immutable(value))) {\n                            if (d.single_use) {\n                                d.single_use = \"m\";\n                            } else {\n                                d.fixed = false;\n                            }\n                        }\n                    }\n                    mark_escaped(d, node.scope, node, value, 0);\n                }\n                if (node instanceof AST_SymbolCatch) {\n                    node.definition().fixed = false;\n                }\n                if (node instanceof AST_VarDef) {\n                    var d = node.name.definition();\n                    if (d.fixed === undefined || safe_to_assign(d, node.value)) {\n                        if (node.value) {\n                            d.fixed = function() {\n                                return node.value;\n                            };\n                            loop_ids[d.id] = in_loop;\n                            mark(d, false);\n                            descend();\n                        } else {\n                            d.fixed = null;\n                        }\n                        mark(d, true);\n                        return true;\n                    } else if (node.value) {\n                        d.fixed = false;\n                    }\n                }\n                if (node instanceof AST_Assign\n                    && node.operator == \"=\"\n                    && node.left instanceof AST_SymbolRef) {\n                    var d = node.left.definition();\n                    if (safe_to_assign(d, node.right)) {\n                        d.references.push(node.left);\n                        d.fixed = function() {\n                            return node.right;\n                        };\n                        mark(d, false);\n                        node.right.walk(tw);\n                        mark(d, true);\n                        return true;\n                    }\n                }\n                if (node instanceof AST_Defun) {\n                    node.inlined = false;\n                    var d = node.name.definition();\n                    if (compressor.exposed(d) || safe_to_read(d)) {\n                        d.fixed = false;\n                    } else {\n                        d.fixed = node;\n                        loop_ids[d.id] = in_loop;\n                        mark(d, true);\n                        d.single_use = ref_once(d);\n                    }\n                    var save_ids = safe_ids;\n                    safe_ids = Object.create(null);\n                    descend();\n                    safe_ids = save_ids;\n                    return true;\n                }\n                if (node instanceof AST_Function) {\n                    node.inlined = false;\n                    push();\n                    var iife;\n                    if (!node.name\n                        && (iife = tw.parent()) instanceof AST_Call\n                        && iife.expression === node) {\n                        // Virtually turn IIFE parameters into variable definitions:\n                        //   (function(a,b) {...})(c,d) => (function() {var a=c,b=d; ...})()\n                        // So existing transformation rules can work on them.\n                        node.argnames.forEach(function(arg, i) {\n                            var d = arg.definition();\n                            if (!node.uses_arguments && d.fixed === undefined) {\n                                d.fixed = function() {\n                                    return iife.args[i] || make_node(AST_Undefined, iife);\n                                };\n                                loop_ids[d.id] = in_loop;\n                                mark(d, true);\n                            } else {\n                                d.fixed = false;\n                            }\n                        });\n                    }\n                    descend();\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_Accessor) {\n                    push();\n                    descend();\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_Binary && lazy_op(node.operator)) {\n                    node.left.walk(tw);\n                    push();\n                    node.right.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_Conditional) {\n                    node.condition.walk(tw);\n                    push();\n                    node.consequent.walk(tw);\n                    pop();\n                    push();\n                    node.alternative.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_If) {\n                    node.condition.walk(tw);\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    if (node.alternative) {\n                        push();\n                        node.alternative.walk(tw);\n                        pop();\n                    }\n                    return true;\n                }\n                if (node instanceof AST_DWLoop) {\n                    var saved_loop = in_loop;\n                    in_loop = node;\n                    push();\n                    node.condition.walk(tw);\n                    node.body.walk(tw);\n                    pop();\n                    in_loop = saved_loop;\n                    return true;\n                }\n                if (node instanceof AST_LabeledStatement) {\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_For) {\n                    if (node.init) node.init.walk(tw);\n                    var saved_loop = in_loop;\n                    in_loop = node;\n                    if (node.condition) {\n                        push();\n                        node.condition.walk(tw);\n                        pop();\n                    }\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    if (node.step) {\n                        push();\n                        node.step.walk(tw);\n                        pop();\n                    }\n                    in_loop = saved_loop;\n                    return true;\n                }\n                if (node instanceof AST_ForIn) {\n                    node.init.walk(suppressor);\n                    node.object.walk(tw);\n                    var saved_loop = in_loop;\n                    in_loop = node;\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    in_loop = saved_loop;\n                    return true;\n                }\n                if (node instanceof AST_Try) {\n                    push();\n                    walk_body(node, tw);\n                    pop();\n                    if (node.bcatch) {\n                        push();\n                        node.bcatch.walk(tw);\n                        pop();\n                    }\n                    if (node.bfinally) node.bfinally.walk(tw);\n                    return true;\n                }\n                if (node instanceof AST_SwitchBranch) {\n                    push();\n                    descend();\n                    pop();\n                    return true;\n                }\n            }\n        });\n        this.walk(tw);\n\n        function mark(def, safe) {\n            safe_ids[def.id] = safe;\n        }\n\n        function safe_to_read(def) {\n            if (safe_ids[def.id]) {\n                if (def.fixed == null) {\n                    var orig = def.orig[0];\n                    if (orig instanceof AST_SymbolFunarg || orig.name == \"arguments\") return false;\n                    def.fixed = make_node(AST_Undefined, orig);\n                }\n                return true;\n            }\n            return def.fixed instanceof AST_Defun;\n        }\n\n        function safe_to_assign(def, value) {\n            if (!HOP(safe_ids, def.id)) return false;\n            if (!safe_to_read(def)) return false;\n            if (def.fixed === false) return false;\n            if (def.fixed != null && (!value || def.references.length > 0)) return false;\n            return !def.orig.some(function(sym) {\n                return sym instanceof AST_SymbolDefun\n                    || sym instanceof AST_SymbolLambda;\n            });\n        }\n\n        function push() {\n            safe_ids = Object.create(safe_ids);\n        }\n\n        function pop() {\n            safe_ids = Object.getPrototypeOf(safe_ids);\n        }\n\n        function reset_def(def) {\n            def.direct_access = false;\n            def.escaped = false;\n            if (def.scope.uses_eval || def.scope.uses_with) {\n                def.fixed = false;\n            } else if (!compressor.exposed(def)) {\n                def.fixed = undefined;\n            } else {\n                def.fixed = false;\n            }\n            def.references = [];\n            def.should_replace = undefined;\n            def.single_use = undefined;\n        }\n\n        function ref_once(def) {\n            return unused\n                && !def.scope.uses_eval\n                && !def.scope.uses_with\n                && def.references.length == 1\n                && loop_ids[def.id] === in_loop;\n        }\n\n        function is_immutable(value) {\n            if (!value) return false;\n            return value.is_constant()\n                || value instanceof AST_Lambda\n                || value instanceof AST_This;\n        }\n\n        function read_property(obj, key) {\n            if (key instanceof AST_Constant) key = key.getValue();\n            if (key instanceof AST_Node) return null;\n            var value;\n            if (obj instanceof AST_Array) {\n                var elements = obj.elements;\n                if (key == \"length\") return make_node_from_constant(elements.length, obj);\n                if (typeof key == \"number\" && key in elements) value = elements[key];\n            } else if (obj instanceof AST_Object) {\n                var props = obj.properties;\n                for (var i = props.length; --i >= 0;) {\n                    var prop = props[i];\n                    if (!(prop instanceof AST_ObjectKeyVal)) return;\n                    if (!value && props[i].key === key) value = props[i].value;\n                }\n            }\n            return value instanceof AST_SymbolRef && value.fixed_value() || value;\n        }\n\n        function is_modified(node, value, level, immutable) {\n            var parent = tw.parent(level);\n            if (is_lhs(node, parent)\n                || !immutable\n                    && parent instanceof AST_Call\n                    && parent.expression === node\n                    && (!(value instanceof AST_Function)\n                        || !(parent instanceof AST_New) && value.contains_this())) {\n                return true;\n            } else if (parent instanceof AST_Array) {\n                return is_modified(parent, parent, level + 1);\n            } else if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n                var obj = tw.parent(level + 1);\n                return is_modified(obj, obj, level + 2);\n            } else if (parent instanceof AST_PropAccess && parent.expression === node) {\n                return !immutable && is_modified(parent, read_property(value, parent.property), level + 1);\n            }\n        }\n\n        function mark_escaped(d, scope, node, value, level) {\n            var parent = tw.parent(level);\n            if (value) {\n                if (value.is_constant()) return;\n                if (level > 0 && value.is_constant_expression(scope)) return;\n            }\n            if (parent instanceof AST_Assign && parent.operator == \"=\" && node === parent.right\n                || parent instanceof AST_Call && node !== parent.expression\n                || parent instanceof AST_Return && node === parent.value && node.scope !== d.scope\n                || parent instanceof AST_VarDef && node === parent.value) {\n                d.escaped = true;\n                return;\n            } else if (parent instanceof AST_Array) {\n                mark_escaped(d, scope, parent, parent, level + 1);\n            } else if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n                var obj = tw.parent(level + 1);\n                mark_escaped(d, scope, obj, obj, level + 2);\n            } else if (parent instanceof AST_PropAccess && node === parent.expression) {\n                value = read_property(value, parent.property);\n                mark_escaped(d, scope, parent, value, level + 1);\n                if (value) return;\n            }\n            if (level == 0) d.direct_access = true;\n        }\n    });\n\n    AST_Symbol.DEFMETHOD(\"fixed_value\", function() {\n        var fixed = this.definition().fixed;\n        if (!fixed || fixed instanceof AST_Node) return fixed;\n        return fixed();\n    });\n\n    AST_SymbolRef.DEFMETHOD(\"is_immutable\", function() {\n        var orig = this.definition().orig;\n        return orig.length == 1 && orig[0] instanceof AST_SymbolLambda;\n    });\n\n    function is_lhs_read_only(lhs) {\n        if (lhs instanceof AST_This) return true;\n        if (lhs instanceof AST_SymbolRef) return lhs.definition().orig[0] instanceof AST_SymbolLambda;\n        if (lhs instanceof AST_PropAccess) {\n            lhs = lhs.expression;\n            if (lhs instanceof AST_SymbolRef) {\n                if (lhs.is_immutable()) return false;\n                lhs = lhs.fixed_value();\n            }\n            if (!lhs) return true;\n            if (lhs instanceof AST_RegExp) return false;\n            if (lhs instanceof AST_Constant) return true;\n            return is_lhs_read_only(lhs);\n        }\n        return false;\n    }\n\n    function find_variable(compressor, name) {\n        var scope, i = 0;\n        while (scope = compressor.parent(i++)) {\n            if (scope instanceof AST_Scope) break;\n            if (scope instanceof AST_Catch) {\n                scope = scope.argname.definition().scope;\n                break;\n            }\n        }\n        return scope.find_variable(name);\n    }\n\n    function make_node(ctor, orig, props) {\n        if (!props) props = {};\n        if (orig) {\n            if (!props.start) props.start = orig.start;\n            if (!props.end) props.end = orig.end;\n        }\n        return new ctor(props);\n    };\n\n    function make_sequence(orig, expressions) {\n        if (expressions.length == 1) return expressions[0];\n        return make_node(AST_Sequence, orig, {\n            expressions: expressions\n        });\n    }\n\n    function make_node_from_constant(val, orig) {\n        switch (typeof val) {\n          case \"string\":\n            return make_node(AST_String, orig, {\n                value: val\n            });\n          case \"number\":\n            if (isNaN(val)) return make_node(AST_NaN, orig);\n            if (isFinite(val)) {\n                return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                    operator: \"-\",\n                    expression: make_node(AST_Number, orig, { value: -val })\n                }) : make_node(AST_Number, orig, { value: val });\n            }\n            return val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                operator: \"-\",\n                expression: make_node(AST_Infinity, orig)\n            }) : make_node(AST_Infinity, orig);\n          case \"boolean\":\n            return make_node(val ? AST_True : AST_False, orig);\n          case \"undefined\":\n            return make_node(AST_Undefined, orig);\n          default:\n            if (val === null) {\n                return make_node(AST_Null, orig, { value: null });\n            }\n            if (val instanceof RegExp) {\n                return make_node(AST_RegExp, orig, { value: val });\n            }\n            throw new Error(string_template(\"Can't handle constant of type: {type}\", {\n                type: typeof val\n            }));\n        }\n    };\n\n    // we shouldn't compress (1,func)(something) to\n    // func(something) because that changes the meaning of\n    // the func (becomes lexical instead of global).\n    function maintain_this_binding(parent, orig, val) {\n        if (parent instanceof AST_UnaryPrefix && parent.operator == \"delete\"\n            || parent instanceof AST_Call && parent.expression === orig\n                && (val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == \"eval\")) {\n            return make_sequence(orig, [ make_node(AST_Number, orig, { value: 0 }), val ]);\n        }\n        return val;\n    }\n\n    function merge_sequence(array, node) {\n        if (node instanceof AST_Sequence) {\n            array.push.apply(array, node.expressions);\n        } else {\n            array.push(node);\n        }\n    }\n\n    function as_statement_array(thing) {\n        if (thing === null) return [];\n        if (thing instanceof AST_BlockStatement) return thing.body;\n        if (thing instanceof AST_EmptyStatement) return [];\n        if (thing instanceof AST_Statement) return [ thing ];\n        throw new Error(\"Can't convert thing to statement array\");\n    };\n\n    function is_empty(thing) {\n        if (thing === null) return true;\n        if (thing instanceof AST_EmptyStatement) return true;\n        if (thing instanceof AST_BlockStatement) return thing.body.length == 0;\n        return false;\n    };\n\n    function loop_body(x) {\n        if (x instanceof AST_Switch) return x;\n        if (x instanceof AST_For || x instanceof AST_ForIn || x instanceof AST_DWLoop) {\n            return (x.body instanceof AST_BlockStatement ? x.body : x);\n        }\n        return x;\n    };\n\n    function is_iife_call(node) {\n        if (node instanceof AST_Call && !(node instanceof AST_New)) {\n            return node.expression instanceof AST_Function || is_iife_call(node.expression);\n        }\n        return false;\n    }\n\n    function is_undeclared_ref(node) {\n        return node instanceof AST_SymbolRef && node.definition().undeclared;\n    }\n\n    var global_names = makePredicate(\"Array Boolean clearInterval clearTimeout console Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error escape eval EvalError Function isFinite isNaN JSON Math Number parseFloat parseInt RangeError ReferenceError RegExp Object setInterval setTimeout String SyntaxError TypeError unescape URIError\");\n    AST_SymbolRef.DEFMETHOD(\"is_declared\", function(compressor) {\n        return !this.definition().undeclared\n            || compressor.option(\"unsafe\") && global_names(this.name);\n    });\n\n    function drop_decl(def) {\n        def.eliminated++;\n        if (def.orig.length == def.eliminated) {\n            def.scope.functions.del(def.name);\n            def.scope.variables.del(def.name);\n        }\n    }\n\n    function is_identifier_atom(node) {\n        return node instanceof AST_Infinity\n            || node instanceof AST_NaN\n            || node instanceof AST_Undefined;\n    }\n\n    function tighten_body(statements, compressor) {\n        var CHANGED, max_iter = 10;\n        do {\n            CHANGED = false;\n            eliminate_spurious_blocks(statements);\n            if (compressor.option(\"dead_code\")) {\n                eliminate_dead_code(statements, compressor);\n            }\n            if (compressor.option(\"if_return\")) {\n                handle_if_return(statements, compressor);\n            }\n            if (compressor.sequences_limit > 0) {\n                sequencesize(statements, compressor);\n            }\n            if (compressor.option(\"join_vars\")) {\n                join_consecutive_vars(statements, compressor);\n            }\n            if (compressor.option(\"collapse_vars\")) {\n                collapse(statements, compressor);\n            }\n        } while (CHANGED && max_iter-- > 0);\n\n        // Search from right to left for assignment-like expressions:\n        // - `var a = x;`\n        // - `a = x;`\n        // - `++a`\n        // For each candidate, scan from left to right for first usage, then try\n        // to fold assignment into the site for compression.\n        // Will not attempt to collapse assignments into or past code blocks\n        // which are not sequentially executed, e.g. loops and conditionals.\n        function collapse(statements, compressor) {\n            var scope = compressor.find_parent(AST_Scope);\n            if (scope.uses_eval || scope.uses_with) return statements;\n            var args;\n            var candidates = [];\n            var stat_index = statements.length;\n            var scanner = new TreeTransformer(function(node, descend) {\n                if (abort) return node;\n                // Skip nodes before `candidate` as quickly as possible\n                if (!hit) {\n                    if (node === candidate) {\n                        hit = true;\n                        return node;\n                    }\n                    return;\n                }\n                // Stop immediately if these node types are encountered\n                var parent = scanner.parent();\n                if (node instanceof AST_Assign && node.operator != \"=\" && lhs.equivalent_to(node.left)\n                    || node instanceof AST_Call && lhs instanceof AST_PropAccess && lhs.equivalent_to(node.expression)\n                    || node instanceof AST_Debugger\n                    || node instanceof AST_IterationStatement && !(node instanceof AST_For)\n                    || node instanceof AST_SymbolRef && !node.is_declared(compressor)\n                    || node instanceof AST_Try\n                    || node instanceof AST_With\n                    || parent instanceof AST_For && node !== parent.init) {\n                    abort = true;\n                    return node;\n                }\n                // Replace variable with assignment when found\n                if (can_replace\n                    && !(node instanceof AST_SymbolDeclaration)\n                    && lhs.equivalent_to(node)) {\n                    if (is_lhs(node, parent)) {\n                        if (value_def) replaced++;\n                        return node;\n                    }\n                    CHANGED = abort = true;\n                    replaced++;\n                    compressor.info(\"Collapsing {name} [{file}:{line},{col}]\", {\n                        name: node.print_to_string(),\n                        file: node.start.file,\n                        line: node.start.line,\n                        col: node.start.col\n                    });\n                    if (candidate instanceof AST_UnaryPostfix) {\n                        return make_node(AST_UnaryPrefix, candidate, candidate);\n                    }\n                    if (candidate instanceof AST_VarDef) {\n                        if (value_def) {\n                            abort = false;\n                            return node;\n                        }\n                        var def = candidate.name.definition();\n                        var value = candidate.value;\n                        if (def.references.length - def.replaced == 1 && !compressor.exposed(def)) {\n                            def.replaced++;\n                            if (funarg && is_identifier_atom(value)) {\n                                return value.transform(compressor);\n                            } else {\n                                return maintain_this_binding(parent, node, value);\n                            }\n                        }\n                        return make_node(AST_Assign, candidate, {\n                            operator: \"=\",\n                            left: make_node(AST_SymbolRef, candidate.name, candidate.name),\n                            right: value\n                        });\n                    }\n                    candidate.write_only = false;\n                    return candidate;\n                }\n                // These node types have child nodes that execute sequentially,\n                // but are otherwise not safe to scan into or beyond them.\n                var sym;\n                if (node instanceof AST_Call\n                    || node instanceof AST_Exit\n                    || node instanceof AST_PropAccess\n                        && (side_effects || node.expression.may_throw_on_access(compressor))\n                    || node instanceof AST_SymbolRef\n                        && (lvalues[node.name]\n                            || side_effects && !references_in_scope(node.definition()))\n                    || (sym = lhs_or_def(node))\n                        && (sym instanceof AST_PropAccess || sym.name in lvalues)\n                    || (side_effects || !replace_all)\n                        && (parent instanceof AST_Binary && lazy_op(parent.operator)\n                            || parent instanceof AST_Case\n                            || parent instanceof AST_Conditional\n                            || parent instanceof AST_If)) {\n                    if (!(node instanceof AST_Scope)) descend(node, scanner);\n                    abort = true;\n                    return node;\n                }\n                // Skip (non-executed) functions and (leading) default case in switch statements\n                if (node instanceof AST_Default || node instanceof AST_Scope) return node;\n            });\n            var multi_replacer = new TreeTransformer(function(node) {\n                if (abort) return node;\n                // Skip nodes before `candidate` as quickly as possible\n                if (!hit) {\n                    if (node === candidate) {\n                        hit = true;\n                        return node;\n                    }\n                    return;\n                }\n                // Replace variable when found\n                if (node instanceof AST_SymbolRef\n                    && node.name == def.name) {\n                    if (!--replaced) abort = true;\n                    if (is_lhs(node, multi_replacer.parent())) return node;\n                    def.replaced++;\n                    value_def.replaced--;\n                    return candidate.value;\n                }\n                // Skip (non-executed) functions and (leading) default case in switch statements\n                if (node instanceof AST_Default || node instanceof AST_Scope) return node;\n            });\n            while (--stat_index >= 0) {\n                // Treat parameters as collapsible in IIFE, i.e.\n                //   function(a, b){ ... }(x());\n                // would be translated into equivalent assignments:\n                //   var a = x(), b = undefined;\n                if (stat_index == 0 && compressor.option(\"unused\")) extract_args();\n                // Find collapsible assignments\n                extract_candidates(statements[stat_index]);\n                while (candidates.length > 0) {\n                    var candidate = candidates.pop();\n                    var value_def = null;\n                    var lhs = get_lhs(candidate);\n                    if (!lhs || is_lhs_read_only(lhs) || lhs.has_side_effects(compressor)) continue;\n                    // Locate symbols which may execute code outside of scanning range\n                    var lvalues = get_lvalues(candidate);\n                    if (lhs instanceof AST_SymbolRef) lvalues[lhs.name] = false;\n                    var replace_all = value_def;\n                    if (!replace_all && lhs instanceof AST_SymbolRef) {\n                        var def = lhs.definition();\n                        replace_all = def.references.length - def.replaced == 1;\n                    }\n                    var side_effects = value_has_side_effects(candidate);\n                    var funarg = candidate.name instanceof AST_SymbolFunarg;\n                    var hit = funarg;\n                    var abort = false, replaced = 0, can_replace = !args || !hit;\n                    if (!can_replace) {\n                        for (var j = compressor.self().argnames.lastIndexOf(candidate.name) + 1; !abort && j < args.length; j++) {\n                            args[j].transform(scanner);\n                        }\n                        can_replace = true;\n                    }\n                    for (var i = stat_index; !abort && i < statements.length; i++) {\n                        statements[i].transform(scanner);\n                    }\n                    if (value_def) {\n                        var def = candidate.name.definition();\n                        if (abort && def.references.length - def.replaced > replaced) replaced = false;\n                        else {\n                            abort = false;\n                            hit = funarg;\n                            for (var i = stat_index; !abort && i < statements.length; i++) {\n                                statements[i].transform(multi_replacer);\n                            }\n                        }\n                    }\n                    if (replaced && !remove_candidate(candidate)) statements.splice(stat_index, 1);\n                }\n            }\n\n            function extract_args() {\n                var iife, fn = compressor.self();\n                if (fn instanceof AST_Function\n                    && !fn.name\n                    && !fn.uses_arguments\n                    && !fn.uses_eval\n                    && (iife = compressor.parent()) instanceof AST_Call\n                    && iife.expression === fn) {\n                    var fn_strict = compressor.has_directive(\"use strict\");\n                    if (fn_strict && !member(fn_strict, fn.body)) fn_strict = false;\n                    var len = fn.argnames.length;\n                    args = iife.args.slice(len);\n                    var names = Object.create(null);\n                    for (var i = len; --i >= 0;) {\n                        var sym = fn.argnames[i];\n                        var arg = iife.args[i];\n                        args.unshift(make_node(AST_VarDef, sym, {\n                            name: sym,\n                            value: arg\n                        }));\n                        if (sym.name in names) continue;\n                        names[sym.name] = true;\n                        if (!arg) arg = make_node(AST_Undefined, sym).transform(compressor);\n                        else {\n                            var tw = new TreeWalker(function(node) {\n                                if (!arg) return true;\n                                if (node instanceof AST_SymbolRef && fn.variables.has(node.name)) {\n                                    var s = node.definition().scope;\n                                    if (s !== scope) while (s = s.parent_scope) {\n                                        if (s === scope) return true;\n                                    }\n                                    arg = null;\n                                }\n                                if (node instanceof AST_This && (fn_strict || !tw.find_parent(AST_Scope))) {\n                                    arg = null;\n                                    return true;\n                                }\n                            });\n                            arg.walk(tw);\n                        }\n                        if (arg) candidates.unshift(make_node(AST_VarDef, sym, {\n                            name: sym,\n                            value: arg\n                        }));\n                    }\n                }\n            }\n\n            function extract_candidates(expr) {\n                if (expr instanceof AST_Assign && !expr.left.has_side_effects(compressor)\n                    || expr instanceof AST_Unary && (expr.operator == \"++\" || expr.operator == \"--\")) {\n                    candidates.push(expr);\n                } else if (expr instanceof AST_Sequence) {\n                    expr.expressions.forEach(extract_candidates);\n                } else if (expr instanceof AST_Definitions) {\n                    expr.definitions.forEach(function(var_def) {\n                        if (var_def.value) candidates.push(var_def);\n                    });\n                } else if (expr instanceof AST_SimpleStatement) {\n                    extract_candidates(expr.body);\n                } else if (expr instanceof AST_For && expr.init) {\n                    extract_candidates(expr.init);\n                }\n            }\n\n            function mangleable_var(var_def) {\n                var value = var_def.value;\n                if (!(value instanceof AST_SymbolRef)) return;\n                if (value.name == \"arguments\") return;\n                var def = value.definition();\n                if (def.undeclared) return;\n                return value_def = def;\n            }\n\n            function get_lhs(expr) {\n                if (expr instanceof AST_VarDef) {\n                    var def = expr.name.definition();\n                    var declared = def.orig.length - def.eliminated;\n                    var referenced = def.references.length - def.replaced;\n                    if (declared > 1 && !(expr.name instanceof AST_SymbolFunarg)\n                        || (referenced > 1 ? mangleable_var(expr) : !compressor.exposed(def))) {\n                        return make_node(AST_SymbolRef, expr.name, expr.name);\n                    }\n                } else {\n                    return expr[expr instanceof AST_Assign ? \"left\" : \"expression\"];\n                }\n            }\n\n            function get_rvalue(expr) {\n                return expr[expr instanceof AST_Assign ? \"right\" : \"value\"];\n            }\n\n            function get_lvalues(expr) {\n                var lvalues = Object.create(null);\n                if (expr instanceof AST_Unary) return lvalues;\n                var tw = new TreeWalker(function(node, descend) {\n                    var sym = node;\n                    while (sym instanceof AST_PropAccess) sym = sym.expression;\n                    if (sym instanceof AST_SymbolRef || sym instanceof AST_This) {\n                        lvalues[sym.name] = lvalues[sym.name] || is_lhs(node, tw.parent());\n                    }\n                });\n                get_rvalue(expr).walk(tw);\n                return lvalues;\n            }\n\n            function lhs_or_def(node) {\n                if (node instanceof AST_VarDef) return node.value && node.name;\n                return is_lhs(node.left, node);\n            }\n\n            function remove_candidate(expr) {\n                if (expr.name instanceof AST_SymbolFunarg) {\n                    var index = compressor.self().argnames.indexOf(expr.name);\n                    var args = compressor.parent().args;\n                    if (args[index]) args[index] = make_node(AST_Number, args[index], {\n                        value: 0\n                    });\n                    return true;\n                }\n                var found = false;\n                return statements[stat_index].transform(new TreeTransformer(function(node, descend, in_list) {\n                    if (found) return node;\n                    if (node === expr || node.body === expr) {\n                        found = true;\n                        if (node instanceof AST_VarDef) {\n                            drop_decl(node.name.definition());\n                            node.value = null;\n                            return node;\n                        }\n                        return in_list ? MAP.skip : null;\n                    }\n                }, function(node) {\n                    if (node instanceof AST_Sequence) switch (node.expressions.length) {\n                      case 0: return null;\n                      case 1: return node.expressions[0];\n                    }\n                }));\n            }\n\n            function value_has_side_effects(expr) {\n                if (expr instanceof AST_Unary) return false;\n                return get_rvalue(expr).has_side_effects(compressor);\n            }\n\n            function references_in_scope(def) {\n                if (def.orig.length == 1 && def.orig[0] instanceof AST_SymbolDefun) return true;\n                if (def.scope !== scope) return false;\n                return def.references.every(function(ref) {\n                    return ref.scope === scope;\n                });\n            }\n        }\n\n        function eliminate_spurious_blocks(statements) {\n            var seen_dirs = [];\n            for (var i = 0; i < statements.length;) {\n                var stat = statements[i];\n                if (stat instanceof AST_BlockStatement) {\n                    CHANGED = true;\n                    eliminate_spurious_blocks(stat.body);\n                    [].splice.apply(statements, [i, 1].concat(stat.body));\n                    i += stat.body.length;\n                } else if (stat instanceof AST_EmptyStatement) {\n                    CHANGED = true;\n                    statements.splice(i, 1);\n                } else if (stat instanceof AST_Directive) {\n                    if (seen_dirs.indexOf(stat.value) < 0) {\n                        i++;\n                        seen_dirs.push(stat.value);\n                    } else {\n                        CHANGED = true;\n                        statements.splice(i, 1);\n                    }\n                } else i++;\n            }\n        }\n\n        function handle_if_return(statements, compressor) {\n            var self = compressor.self();\n            var multiple_if_returns = has_multiple_if_returns(statements);\n            var in_lambda = self instanceof AST_Lambda;\n            for (var i = statements.length; --i >= 0;) {\n                var stat = statements[i];\n                var next = statements[i + 1];\n\n                if (in_lambda && stat instanceof AST_Return && !stat.value && !next) {\n                    CHANGED = true;\n                    statements.length--;\n                    continue;\n                }\n\n                if (stat instanceof AST_If) {\n                    var ab = aborts(stat.body);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.condition = stat.condition.negate(compressor);\n                        var body = as_statement_array_with_return(stat.body, ab);\n                        stat.body = make_node(AST_BlockStatement, stat, {\n                            body: as_statement_array(stat.alternative).concat(extract_functions())\n                        });\n                        stat.alternative = make_node(AST_BlockStatement, stat, {\n                            body: body\n                        });\n                        statements[i] = stat.transform(compressor);\n                        continue;\n                    }\n\n                    var ab = aborts(stat.alternative);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.body = make_node(AST_BlockStatement, stat.body, {\n                            body: as_statement_array(stat.body).concat(extract_functions())\n                        });\n                        var body = as_statement_array_with_return(stat.alternative, ab);\n                        stat.alternative = make_node(AST_BlockStatement, stat.alternative, {\n                            body: body\n                        });\n                        statements[i] = stat.transform(compressor);\n                        continue;\n                    }\n                }\n\n                if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                    var value = stat.body.value;\n                    //---\n                    // pretty silly case, but:\n                    // if (foo()) return; return; ==> foo(); return;\n                    if (!value && !stat.alternative\n                        && (in_lambda && !next || next instanceof AST_Return && !next.value)) {\n                        CHANGED = true;\n                        statements[i] = make_node(AST_SimpleStatement, stat.condition, {\n                            body: stat.condition\n                        });\n                        continue;\n                    }\n                    //---\n                    // if (foo()) return x; return y; ==> return foo() ? x : y;\n                    if (value && !stat.alternative && next instanceof AST_Return && next.value) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = next;\n                        statements.splice(i, 2, stat.transform(compressor));\n                        continue;\n                    }\n                    //---\n                    // if (foo()) return x; [ return ; ] ==> return foo() ? x : undefined;\n                    if (multiple_if_returns && in_lambda && value && !stat.alternative\n                        && (!next || next instanceof AST_Return)) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = next || make_node(AST_Return, stat, {\n                            value: null\n                        });\n                        statements.splice(i, next ? 2 : 1, stat.transform(compressor));\n                        continue;\n                    }\n                    //---\n                    // if (a) return b; if (c) return d; e; ==> return a ? b : c ? d : void e;\n                    //\n                    // if sequences is not enabled, this can lead to an endless loop (issue #866).\n                    // however, with sequences on this helps producing slightly better output for\n                    // the example code.\n                    var prev = statements[i - 1];\n                    if (compressor.option(\"sequences\") && in_lambda && !stat.alternative\n                        && prev instanceof AST_If && prev.body instanceof AST_Return\n                        && i + 2 == statements.length && next instanceof AST_SimpleStatement) {\n                        CHANGED = true;\n                        statements.push(make_node(AST_Return, next, {\n                            value: null\n                        }).transform(compressor));\n                        continue;\n                    }\n                }\n            }\n\n            function has_multiple_if_returns(statements) {\n                var n = 0;\n                for (var i = statements.length; --i >= 0;) {\n                    var stat = statements[i];\n                    if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                        if (++n > 1) return true;\n                    }\n                }\n                return false;\n            }\n\n            function is_return_void(value) {\n                return !value || value instanceof AST_UnaryPrefix && value.operator == \"void\";\n            }\n\n            function can_merge_flow(ab) {\n                if (!ab) return false;\n                var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;\n                return ab instanceof AST_Return && in_lambda && is_return_void(ab.value)\n                    || ab instanceof AST_Continue && self === loop_body(lct)\n                    || ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct;\n            }\n\n            function extract_functions() {\n                var tail = statements.slice(i + 1);\n                statements.length = i + 1;\n                return tail.filter(function(stat) {\n                    if (stat instanceof AST_Defun) {\n                        statements.push(stat);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n\n            function as_statement_array_with_return(node, ab) {\n                var body = as_statement_array(node).slice(0, -1);\n                if (ab.value) {\n                    body.push(make_node(AST_SimpleStatement, ab.value, {\n                        body: ab.value.expression\n                    }));\n                }\n                return body;\n            }\n        }\n\n        function eliminate_dead_code(statements, compressor) {\n            var has_quit;\n            var self = compressor.self();\n            for (var i = 0, n = 0, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                if (stat instanceof AST_LoopControl) {\n                    var lct = compressor.loopcontrol_target(stat);\n                    if (stat instanceof AST_Break\n                            && !(lct instanceof AST_IterationStatement)\n                            && loop_body(lct) === self\n                        || stat instanceof AST_Continue\n                            && loop_body(lct) === self) {\n                        if (stat.label) {\n                            remove(stat.label.thedef.references, stat);\n                        }\n                    } else {\n                        statements[n++] = stat;\n                    }\n                } else {\n                    statements[n++] = stat;\n                }\n                if (aborts(stat)) {\n                    has_quit = statements.slice(i + 1);\n                    break;\n                }\n            }\n            statements.length = n;\n            CHANGED = n != len;\n            if (has_quit) has_quit.forEach(function(stat) {\n                extract_declarations_from_unreachable_code(compressor, stat, statements);\n            });\n        }\n\n        function sequencesize(statements, compressor) {\n            if (statements.length < 2) return;\n            var seq = [], n = 0;\n            function push_seq() {\n                if (!seq.length) return;\n                var body = make_sequence(seq[0], seq);\n                statements[n++] = make_node(AST_SimpleStatement, body, { body: body });\n                seq = [];\n            }\n            for (var i = 0, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                if (stat instanceof AST_SimpleStatement) {\n                    if (seq.length >= compressor.sequences_limit) push_seq();\n                    var body = stat.body;\n                    if (seq.length > 0) body = body.drop_side_effect_free(compressor);\n                    if (body) merge_sequence(seq, body);\n                } else {\n                    push_seq();\n                    statements[n++] = stat;\n                }\n            }\n            push_seq();\n            statements.length = n;\n            sequencesize_2(statements, compressor);\n            CHANGED = statements.length != len;\n        }\n\n        function sequencesize_2(statements, compressor) {\n            function cons_seq(right) {\n                n--;\n                var left = prev.body;\n                if (!(left instanceof AST_Sequence)) {\n                    left = make_node(AST_Sequence, left, {\n                        expressions: [ left ]\n                    });\n                }\n                merge_sequence(left.expressions, right);\n                return left.transform(compressor);\n            };\n            var n = 0, prev;\n            for (var i = 0, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                if (prev) {\n                    if (stat instanceof AST_For && !(stat.init instanceof AST_Definitions)) {\n                        var abort = false;\n                        prev.body.walk(new TreeWalker(function(node) {\n                            if (abort || node instanceof AST_Scope) return true;\n                            if (node instanceof AST_Binary && node.operator == \"in\") {\n                                abort = true;\n                                return true;\n                            }\n                        }));\n                        if (!abort) {\n                            if (stat.init) stat.init = cons_seq(stat.init);\n                            else {\n                                stat.init = prev.body.drop_side_effect_free(compressor);\n                                n--;\n                            }\n                        }\n                    }\n                    else if (stat instanceof AST_If) {\n                        stat.condition = cons_seq(stat.condition);\n                    }\n                    else if (stat instanceof AST_With) {\n                        stat.expression = cons_seq(stat.expression);\n                    }\n                    else if (stat instanceof AST_Exit && stat.value) {\n                        stat.value = cons_seq(stat.value);\n                    }\n                    else if (stat instanceof AST_Exit) {\n                        stat.value = cons_seq(make_node(AST_Undefined, stat).transform(compressor));\n                    }\n                    else if (stat instanceof AST_Switch) {\n                        stat.expression = cons_seq(stat.expression);\n                    }\n                }\n                statements[n++] = stat;\n                prev = stat instanceof AST_SimpleStatement ? stat : null;\n            }\n            statements.length = n;\n        }\n\n        function join_consecutive_vars(statements, compressor) {\n            for (var i = 0, j = -1, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                var prev = statements[j];\n                if (stat instanceof AST_Definitions && prev && prev.TYPE == stat.TYPE) {\n                    prev.definitions = prev.definitions.concat(stat.definitions);\n                    CHANGED = true;\n                }\n                else if (stat instanceof AST_For\n                         && prev instanceof AST_Var\n                         && (!stat.init || stat.init.TYPE == prev.TYPE)) {\n                    CHANGED = true;\n                    if (stat.init) {\n                        stat.init.definitions = prev.definitions.concat(stat.init.definitions);\n                    } else {\n                        stat.init = prev;\n                    }\n                    statements[j] = stat;\n                }\n                else {\n                    statements[++j] = stat;\n                }\n            }\n            statements.length = j + 1;\n        };\n    }\n\n    function extract_declarations_from_unreachable_code(compressor, stat, target) {\n        if (!(stat instanceof AST_Defun)) {\n            compressor.warn(\"Dropping unreachable code [{file}:{line},{col}]\", stat.start);\n        }\n        stat.walk(new TreeWalker(function(node){\n            if (node instanceof AST_Definitions) {\n                compressor.warn(\"Declarations in unreachable code! [{file}:{line},{col}]\", node.start);\n                node.remove_initializers();\n                target.push(node);\n                return true;\n            }\n            if (node instanceof AST_Defun && (node === stat || !compressor.has_directive(\"use strict\"))) {\n                target.push(node);\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                return true;\n            }\n        }));\n    };\n\n    function is_undefined(node, compressor) {\n        return node.is_undefined\n            || node instanceof AST_Undefined\n            || node instanceof AST_UnaryPrefix\n                && node.operator == \"void\"\n                && !node.expression.has_side_effects(compressor);\n    }\n\n    // may_throw_on_access()\n    // returns true if this node may be null, undefined or contain `AST_Accessor`\n    (function(def) {\n        AST_Node.DEFMETHOD(\"may_throw_on_access\", function(compressor) {\n            return !compressor.option(\"pure_getters\")\n                || this._dot_throw(compressor);\n        });\n\n        function is_strict(compressor) {\n            return /strict/.test(compressor.option(\"pure_getters\"));\n        }\n\n        def(AST_Node, is_strict);\n        def(AST_Null, return_true);\n        def(AST_Undefined, return_true);\n        def(AST_Constant, return_false);\n        def(AST_Array, return_false);\n        def(AST_Object, function(compressor) {\n            if (!is_strict(compressor)) return false;\n            for (var i = this.properties.length; --i >=0;)\n                if (this.properties[i].value instanceof AST_Accessor) return true;\n            return false;\n        });\n        def(AST_Function, return_false);\n        def(AST_UnaryPostfix, return_false);\n        def(AST_UnaryPrefix, function() {\n            return this.operator == \"void\";\n        });\n        def(AST_Binary, function(compressor) {\n            switch (this.operator) {\n              case \"&&\":\n                return this.left._dot_throw(compressor);\n              case \"||\":\n                return this.left._dot_throw(compressor)\n                    && this.right._dot_throw(compressor);\n              default:\n                return false;\n            }\n        })\n        def(AST_Assign, function(compressor) {\n            return this.operator == \"=\"\n                && this.right._dot_throw(compressor);\n        })\n        def(AST_Conditional, function(compressor) {\n            return this.consequent._dot_throw(compressor)\n                || this.alternative._dot_throw(compressor);\n        })\n        def(AST_Sequence, function(compressor) {\n            return this.expressions[this.expressions.length - 1]._dot_throw(compressor);\n        });\n        def(AST_SymbolRef, function(compressor) {\n            if (this.is_undefined) return true;\n            if (!is_strict(compressor)) return false;\n            if (is_undeclared_ref(this) && this.is_declared(compressor)) return false;\n            if (this.is_immutable()) return false;\n            var fixed = this.fixed_value();\n            return !fixed || fixed._dot_throw(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"_dot_throw\", func);\n    });\n\n    /* -----[ boolean/negation helpers ]----- */\n\n    // methods to determine whether an expression has a boolean result type\n    (function(def){\n        var unary_bool = [ \"!\", \"delete\" ];\n        var binary_bool = [ \"in\", \"instanceof\", \"==\", \"!=\", \"===\", \"!==\", \"<\", \"<=\", \">=\", \">\" ];\n        def(AST_Node, return_false);\n        def(AST_UnaryPrefix, function(){\n            return member(this.operator, unary_bool);\n        });\n        def(AST_Binary, function(){\n            return member(this.operator, binary_bool)\n                || lazy_op(this.operator)\n                    && this.left.is_boolean()\n                    && this.right.is_boolean();\n        });\n        def(AST_Conditional, function(){\n            return this.consequent.is_boolean() && this.alternative.is_boolean();\n        });\n        def(AST_Assign, function(){\n            return this.operator == \"=\" && this.right.is_boolean();\n        });\n        def(AST_Sequence, function(){\n            return this.expressions[this.expressions.length - 1].is_boolean();\n        });\n        def(AST_True, return_true);\n        def(AST_False, return_true);\n    })(function(node, func){\n        node.DEFMETHOD(\"is_boolean\", func);\n    });\n\n    // methods to determine if an expression has a numeric result type\n    (function(def){\n        def(AST_Node, return_false);\n        def(AST_Number, return_true);\n        var unary = makePredicate(\"+ - ~ ++ --\");\n        def(AST_Unary, function(){\n            return unary(this.operator);\n        });\n        var binary = makePredicate(\"- * / % & | ^ << >> >>>\");\n        def(AST_Binary, function(compressor){\n            return binary(this.operator) || this.operator == \"+\"\n                && this.left.is_number(compressor)\n                && this.right.is_number(compressor);\n        });\n        def(AST_Assign, function(compressor){\n            return binary(this.operator.slice(0, -1))\n                || this.operator == \"=\" && this.right.is_number(compressor);\n        });\n        def(AST_Sequence, function(compressor){\n            return this.expressions[this.expressions.length - 1].is_number(compressor);\n        });\n        def(AST_Conditional, function(compressor){\n            return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"is_number\", func);\n    });\n\n    // methods to determine if an expression has a string result type\n    (function(def){\n        def(AST_Node, return_false);\n        def(AST_String, return_true);\n        def(AST_UnaryPrefix, function(){\n            return this.operator == \"typeof\";\n        });\n        def(AST_Binary, function(compressor){\n            return this.operator == \"+\" &&\n                (this.left.is_string(compressor) || this.right.is_string(compressor));\n        });\n        def(AST_Assign, function(compressor){\n            return (this.operator == \"=\" || this.operator == \"+=\") && this.right.is_string(compressor);\n        });\n        def(AST_Sequence, function(compressor){\n            return this.expressions[this.expressions.length - 1].is_string(compressor);\n        });\n        def(AST_Conditional, function(compressor){\n            return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"is_string\", func);\n    });\n\n    var lazy_op = makePredicate(\"&& ||\");\n    var unary_side_effects = makePredicate(\"delete ++ --\");\n\n    function is_lhs(node, parent) {\n        if (parent instanceof AST_Unary && unary_side_effects(parent.operator)) return parent.expression;\n        if (parent instanceof AST_Assign && parent.left === node) return node;\n    }\n\n    (function(def){\n        AST_Node.DEFMETHOD(\"resolve_defines\", function(compressor) {\n            if (!compressor.option(\"global_defs\")) return;\n            var def = this._find_defs(compressor, \"\");\n            if (def) {\n                var node, parent = this, level = 0;\n                do {\n                    node = parent;\n                    parent = compressor.parent(level++);\n                } while (parent instanceof AST_PropAccess && parent.expression === node);\n                if (is_lhs(node, parent)) {\n                    compressor.warn('global_defs ' + this.print_to_string() + ' redefined [{file}:{line},{col}]', this.start);\n                } else {\n                    return def;\n                }\n            }\n        });\n        function to_node(value, orig) {\n            if (value instanceof AST_Node) return make_node(value.CTOR, orig, value);\n            if (Array.isArray(value)) return make_node(AST_Array, orig, {\n                elements: value.map(function(value) {\n                    return to_node(value, orig);\n                })\n            });\n            if (value && typeof value == \"object\") {\n                var props = [];\n                for (var key in value) if (HOP(value, key)) {\n                    props.push(make_node(AST_ObjectKeyVal, orig, {\n                        key: key,\n                        value: to_node(value[key], orig)\n                    }));\n                }\n                return make_node(AST_Object, orig, {\n                    properties: props\n                });\n            }\n            return make_node_from_constant(value, orig);\n        }\n        def(AST_Node, noop);\n        def(AST_Dot, function(compressor, suffix){\n            return this.expression._find_defs(compressor, \".\" + this.property + suffix);\n        });\n        def(AST_SymbolRef, function(compressor, suffix){\n            if (!this.global()) return;\n            var name;\n            var defines = compressor.option(\"global_defs\");\n            if (defines && HOP(defines, (name = this.name + suffix))) {\n                var node = to_node(defines[name], this);\n                var top = compressor.find_parent(AST_Toplevel);\n                node.walk(new TreeWalker(function(node) {\n                    if (node instanceof AST_SymbolRef) {\n                        node.scope = top;\n                        node.thedef = top.def_global(node);\n                    }\n                }));\n                return node;\n            }\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"_find_defs\", func);\n    });\n\n    function best_of_expression(ast1, ast2) {\n        return ast1.print_to_string().length >\n            ast2.print_to_string().length\n            ? ast2 : ast1;\n    }\n\n    function best_of_statement(ast1, ast2) {\n        return best_of_expression(make_node(AST_SimpleStatement, ast1, {\n            body: ast1\n        }), make_node(AST_SimpleStatement, ast2, {\n            body: ast2\n        })).body;\n    }\n\n    function best_of(compressor, ast1, ast2) {\n        return (first_in_statement(compressor) ? best_of_statement : best_of_expression)(ast1, ast2);\n    }\n\n    // methods to evaluate a constant expression\n    (function(def){\n        // If the node has been successfully reduced to a constant,\n        // then its value is returned; otherwise the element itself\n        // is returned.\n        // They can be distinguished as constant value is never a\n        // descendant of AST_Node.\n        AST_Node.DEFMETHOD(\"evaluate\", function(compressor){\n            if (!compressor.option(\"evaluate\")) return this;\n            var val = this._eval(compressor);\n            return !val || val instanceof RegExp || typeof val != \"object\" ? val : this;\n        });\n        var unaryPrefix = makePredicate(\"! ~ - + void\");\n        AST_Node.DEFMETHOD(\"is_constant\", function(){\n            // Accomodate when compress option evaluate=false\n            // as well as the common constant expressions !0 and -1\n            if (this instanceof AST_Constant) {\n                return !(this instanceof AST_RegExp);\n            } else {\n                return this instanceof AST_UnaryPrefix\n                    && this.expression instanceof AST_Constant\n                    && unaryPrefix(this.operator);\n            }\n        });\n        def(AST_Statement, function(){\n            throw new Error(string_template(\"Cannot evaluate a statement [{file}:{line},{col}]\", this.start));\n        });\n        def(AST_Lambda, return_this);\n        function ev(node, compressor) {\n            if (!compressor) throw new Error(\"Compressor must be passed\");\n\n            return node._eval(compressor);\n        };\n        def(AST_Node, return_this);\n        def(AST_Constant, function(){\n            return this.getValue();\n        });\n        def(AST_Array, function(compressor){\n            if (compressor.option(\"unsafe\")) {\n                var elements = [];\n                for (var i = 0, len = this.elements.length; i < len; i++) {\n                    var element = this.elements[i];\n                    if (element instanceof AST_Function) continue;\n                    var value = ev(element, compressor);\n                    if (element === value) return this;\n                    elements.push(value);\n                }\n                return elements;\n            }\n            return this;\n        });\n        def(AST_Object, function(compressor){\n            if (compressor.option(\"unsafe\")) {\n                var val = {};\n                for (var i = 0, len = this.properties.length; i < len; i++) {\n                    var prop = this.properties[i];\n                    var key = prop.key;\n                    if (key instanceof AST_Symbol) {\n                        key = key.name;\n                    } else if (key instanceof AST_Node) {\n                        key = ev(key, compressor);\n                        if (key === prop.key) return this;\n                    }\n                    if (typeof Object.prototype[key] === 'function') {\n                        return this;\n                    }\n                    if (prop.value instanceof AST_Function) continue;\n                    val[key] = ev(prop.value, compressor);\n                    if (val[key] === prop.value) return this;\n                }\n                return val;\n            }\n            return this;\n        });\n        def(AST_UnaryPrefix, function(compressor){\n            // Function would be evaluated to an array and so typeof would\n            // incorrectly return 'object'. Hence making is a special case.\n            if (this.operator == \"typeof\" && this.expression instanceof AST_Function) {\n                return typeof function(){};\n            }\n            var e = ev(this.expression, compressor);\n            if (e === this.expression) return this;\n            switch (this.operator) {\n              case \"!\": return !e;\n              case \"typeof\":\n                // typeof <RegExp> returns \"object\" or \"function\" on different platforms\n                // so cannot evaluate reliably\n                if (e instanceof RegExp) return this;\n                return typeof e;\n              case \"void\": return void e;\n              case \"~\": return ~e;\n              case \"-\": return -e;\n              case \"+\": return +e;\n            }\n            return this;\n        });\n        def(AST_Binary, function(compressor){\n            var left = ev(this.left, compressor);\n            if (left === this.left) return this;\n            var right = ev(this.right, compressor);\n            if (right === this.right) return this;\n            var result;\n            switch (this.operator) {\n              case \"&&\"  : result = left &&  right; break;\n              case \"||\"  : result = left ||  right; break;\n              case \"|\"   : result = left |   right; break;\n              case \"&\"   : result = left &   right; break;\n              case \"^\"   : result = left ^   right; break;\n              case \"+\"   : result = left +   right; break;\n              case \"*\"   : result = left *   right; break;\n              case \"/\"   : result = left /   right; break;\n              case \"%\"   : result = left %   right; break;\n              case \"-\"   : result = left -   right; break;\n              case \"<<\"  : result = left <<  right; break;\n              case \">>\"  : result = left >>  right; break;\n              case \">>>\" : result = left >>> right; break;\n              case \"==\"  : result = left ==  right; break;\n              case \"===\" : result = left === right; break;\n              case \"!=\"  : result = left !=  right; break;\n              case \"!==\" : result = left !== right; break;\n              case \"<\"   : result = left <   right; break;\n              case \"<=\"  : result = left <=  right; break;\n              case \">\"   : result = left >   right; break;\n              case \">=\"  : result = left >=  right; break;\n              default:\n                  return this;\n            }\n            if (isNaN(result) && compressor.find_parent(AST_With)) {\n                // leave original expression as is\n                return this;\n            }\n            return result;\n        });\n        def(AST_Conditional, function(compressor){\n            var condition = ev(this.condition, compressor);\n            if (condition === this.condition) return this;\n            var node = condition ? this.consequent : this.alternative;\n            var value = ev(node, compressor);\n            return value === node ? this : value;\n        });\n        def(AST_SymbolRef, function(compressor){\n            if (!compressor.option(\"reduce_vars\")) return this;\n            var fixed = this.fixed_value();\n            if (!fixed) return this;\n            this._eval = return_this;\n            var value = ev(fixed, compressor);\n            if (value === fixed) {\n                delete this._eval;\n                return this;\n            }\n            if (!HOP(fixed, \"_eval\")) fixed._eval = function() {\n                return value;\n            };\n            if (value && typeof value == \"object\" && this.definition().escaped) {\n                delete this._eval;\n                return this;\n            }\n            this._eval = fixed._eval;\n            return value;\n        });\n        var global_objs = {\n            Array: Array,\n            Math: Math,\n            Number: Number,\n            String: String,\n        };\n        function convert_to_predicate(obj) {\n            for (var key in obj) {\n                obj[key] = makePredicate(obj[key]);\n            }\n        }\n        var static_values = {\n            Math: [\n                \"E\",\n                \"LN10\",\n                \"LN2\",\n                \"LOG2E\",\n                \"LOG10E\",\n                \"PI\",\n                \"SQRT1_2\",\n                \"SQRT2\",\n            ],\n            Number: [\n                \"MAX_VALUE\",\n                \"MIN_VALUE\",\n                \"NaN\",\n                \"NEGATIVE_INFINITY\",\n                \"POSITIVE_INFINITY\",\n            ],\n        };\n        convert_to_predicate(static_values);\n        def(AST_PropAccess, function(compressor){\n            if (compressor.option(\"unsafe\")) {\n                var key = this.property;\n                if (key instanceof AST_Node) {\n                    key = ev(key, compressor);\n                    if (key === this.property) return this;\n                }\n                var exp = this.expression;\n                var val;\n                if (is_undeclared_ref(exp)) {\n                    if (!(static_values[exp.name] || return_false)(key)) return this;\n                    val = global_objs[exp.name];\n                } else {\n                    val = ev(exp, compressor);\n                    if (!val || val === exp || !HOP(val, key)) return this;\n                }\n                return val[key];\n            }\n            return this;\n        });\n        var object_fns = [\n            \"constructor\",\n            \"toString\",\n            \"valueOf\",\n        ];\n        var native_fns = {\n            Array: [\n                \"indexOf\",\n                \"join\",\n                \"lastIndexOf\",\n                \"slice\",\n            ].concat(object_fns),\n            Boolean: object_fns,\n            Number: [\n                \"toExponential\",\n                \"toFixed\",\n                \"toPrecision\",\n            ].concat(object_fns),\n            RegExp: [\n                \"test\",\n            ].concat(object_fns),\n            String: [\n                \"charAt\",\n                \"charCodeAt\",\n                \"concat\",\n                \"indexOf\",\n                \"italics\",\n                \"lastIndexOf\",\n                \"match\",\n                \"replace\",\n                \"search\",\n                \"slice\",\n                \"split\",\n                \"substr\",\n                \"substring\",\n                \"trim\",\n            ].concat(object_fns),\n        };\n        convert_to_predicate(native_fns);\n        var static_fns = {\n            Array: [\n                \"isArray\",\n            ],\n            Math: [\n                \"abs\",\n                \"acos\",\n                \"asin\",\n                \"atan\",\n                \"ceil\",\n                \"cos\",\n                \"exp\",\n                \"floor\",\n                \"log\",\n                \"round\",\n                \"sin\",\n                \"sqrt\",\n                \"tan\",\n                \"atan2\",\n                \"pow\",\n                \"max\",\n                \"min\"\n            ],\n            Number: [\n                \"isFinite\",\n                \"isNaN\",\n            ],\n            String: [\n                \"fromCharCode\",\n            ],\n        };\n        convert_to_predicate(static_fns);\n        def(AST_Call, function(compressor){\n            var exp = this.expression;\n            if (compressor.option(\"unsafe\") && exp instanceof AST_PropAccess) {\n                var key = exp.property;\n                if (key instanceof AST_Node) {\n                    key = ev(key, compressor);\n                    if (key === exp.property) return this;\n                }\n                var val;\n                var e = exp.expression;\n                if (is_undeclared_ref(e)) {\n                    if (!(static_fns[e.name] || return_false)(key)) return this;\n                    val = global_objs[e.name];\n                } else {\n                    val = ev(e, compressor);\n                    if (val === e || !(val && native_fns[val.constructor.name] || return_false)(key)) return this;\n                }\n                var args = [];\n                for (var i = 0, len = this.args.length; i < len; i++) {\n                    var arg = this.args[i];\n                    var value = ev(arg, compressor);\n                    if (arg === value) return this;\n                    args.push(value);\n                }\n                return val[key].apply(val, args);\n            }\n            return this;\n        });\n        def(AST_New, return_this);\n    })(function(node, func){\n        node.DEFMETHOD(\"_eval\", func);\n    });\n\n    // method to negate an expression\n    (function(def){\n        function basic_negation(exp) {\n            return make_node(AST_UnaryPrefix, exp, {\n                operator: \"!\",\n                expression: exp\n            });\n        }\n        function best(orig, alt, first_in_statement) {\n            var negated = basic_negation(orig);\n            if (first_in_statement) {\n                var stat = make_node(AST_SimpleStatement, alt, {\n                    body: alt\n                });\n                return best_of_expression(negated, stat) === stat ? alt : negated;\n            }\n            return best_of_expression(negated, alt);\n        }\n        def(AST_Node, function(){\n            return basic_negation(this);\n        });\n        def(AST_Statement, function(){\n            throw new Error(\"Cannot negate a statement\");\n        });\n        def(AST_Function, function(){\n            return basic_negation(this);\n        });\n        def(AST_UnaryPrefix, function(){\n            if (this.operator == \"!\")\n                return this.expression;\n            return basic_negation(this);\n        });\n        def(AST_Sequence, function(compressor){\n            var expressions = this.expressions.slice();\n            expressions.push(expressions.pop().negate(compressor));\n            return make_sequence(this, expressions);\n        });\n        def(AST_Conditional, function(compressor, first_in_statement){\n            var self = this.clone();\n            self.consequent = self.consequent.negate(compressor);\n            self.alternative = self.alternative.negate(compressor);\n            return best(this, self, first_in_statement);\n        });\n        def(AST_Binary, function(compressor, first_in_statement){\n            var self = this.clone(), op = this.operator;\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (op) {\n                  case \"<=\" : self.operator = \">\"  ; return self;\n                  case \"<\"  : self.operator = \">=\" ; return self;\n                  case \">=\" : self.operator = \"<\"  ; return self;\n                  case \">\"  : self.operator = \"<=\" ; return self;\n                }\n            }\n            switch (op) {\n              case \"==\" : self.operator = \"!=\"; return self;\n              case \"!=\" : self.operator = \"==\"; return self;\n              case \"===\": self.operator = \"!==\"; return self;\n              case \"!==\": self.operator = \"===\"; return self;\n              case \"&&\":\n                self.operator = \"||\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n              case \"||\":\n                self.operator = \"&&\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n            }\n            return basic_negation(this);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"negate\", function(compressor, first_in_statement){\n            return func.call(this, compressor, first_in_statement);\n        });\n    });\n\n    AST_Call.DEFMETHOD(\"has_pure_annotation\", function(compressor) {\n        if (!compressor.option(\"side_effects\")) return false;\n        if (this.pure !== undefined) return this.pure;\n        var pure = false;\n        var comments, pure_comment;\n        if (this.start\n            && (comments = this.start.comments_before)\n            && comments.length\n            && (pure_comment = find_if(function (comment) {\n                return /[@#]__PURE__/.test(comment.value);\n            }, comments))) {\n            pure = pure_comment;\n        }\n        return this.pure = pure;\n    });\n\n    var global_pure_fns = makePredicate(\"Boolean decodeURI decodeURIComponent Date encodeURI encodeURIComponent Error escape EvalError isFinite isNaN Number Object parseFloat parseInt RangeError ReferenceError String SyntaxError TypeError unescape URIError\");\n    AST_Call.DEFMETHOD(\"is_expr_pure\", function(compressor) {\n        if (compressor.option(\"unsafe\")) {\n            var expr = this.expression;\n            if (is_undeclared_ref(expr) && global_pure_fns(expr.name)) return true;\n        }\n        return this.has_pure_annotation(compressor) || !compressor.pure_funcs(this);\n    });\n\n    // determine if expression has side effects\n    (function(def){\n        def(AST_Node, return_true);\n\n        def(AST_EmptyStatement, return_false);\n        def(AST_Constant, return_false);\n        def(AST_This, return_false);\n\n        def(AST_Call, function(compressor){\n            if (!this.is_expr_pure(compressor)) return true;\n            for (var i = this.args.length; --i >= 0;) {\n                if (this.args[i].has_side_effects(compressor))\n                    return true;\n            }\n            return false;\n        });\n\n        function any(list, compressor) {\n            for (var i = list.length; --i >= 0;)\n                if (list[i].has_side_effects(compressor))\n                    return true;\n            return false;\n        }\n\n        def(AST_Block, function(compressor){\n            return any(this.body, compressor);\n        });\n        def(AST_Switch, function(compressor){\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def(AST_Case, function(compressor){\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def(AST_Try, function(compressor){\n            return any(this.body, compressor)\n                || this.bcatch && this.bcatch.has_side_effects(compressor)\n                || this.bfinally && this.bfinally.has_side_effects(compressor);\n        });\n        def(AST_If, function(compressor){\n            return this.condition.has_side_effects(compressor)\n                || this.body && this.body.has_side_effects(compressor)\n                || this.alternative && this.alternative.has_side_effects(compressor);\n        });\n        def(AST_LabeledStatement, function(compressor){\n            return this.body.has_side_effects(compressor);\n        });\n        def(AST_SimpleStatement, function(compressor){\n            return this.body.has_side_effects(compressor);\n        });\n        def(AST_Defun, return_true);\n        def(AST_Function, return_false);\n        def(AST_Binary, function(compressor){\n            return this.left.has_side_effects(compressor)\n                || this.right.has_side_effects(compressor);\n        });\n        def(AST_Assign, return_true);\n        def(AST_Conditional, function(compressor){\n            return this.condition.has_side_effects(compressor)\n                || this.consequent.has_side_effects(compressor)\n                || this.alternative.has_side_effects(compressor);\n        });\n        def(AST_Unary, function(compressor){\n            return unary_side_effects(this.operator)\n                || this.expression.has_side_effects(compressor);\n        });\n        def(AST_SymbolRef, function(compressor){\n            return !this.is_declared(compressor);\n        });\n        def(AST_SymbolDeclaration, return_false);\n        def(AST_Object, function(compressor){\n            return any(this.properties, compressor);\n        });\n        def(AST_ObjectProperty, function(compressor){\n            return this.value.has_side_effects(compressor);\n        });\n        def(AST_Array, function(compressor){\n            return any(this.elements, compressor);\n        });\n        def(AST_Dot, function(compressor){\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor);\n        });\n        def(AST_Sub, function(compressor){\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor)\n                || this.property.has_side_effects(compressor);\n        });\n        def(AST_Sequence, function(compressor){\n            return this.expressions.some(function(expression, index) {\n                return expression.has_side_effects(compressor);\n            });\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"has_side_effects\", func);\n    });\n\n    // determine if expression is constant\n    (function(def){\n        function all(list) {\n            for (var i = list.length; --i >= 0;)\n                if (!list[i].is_constant_expression())\n                    return false;\n            return true;\n        }\n        def(AST_Node, return_false);\n        def(AST_Constant, return_true);\n        def(AST_Lambda, function(scope){\n            var self = this;\n            var result = true;\n            self.walk(new TreeWalker(function(node) {\n                if (!result) return true;\n                if (node instanceof AST_SymbolRef) {\n                    var def = node.definition();\n                    if (member(def, self.enclosed)\n                        && !self.variables.has(def.name)) {\n                        if (scope) {\n                            var scope_def = scope.find_variable(node);\n                            if (def.undeclared ? !scope_def : scope_def === def) {\n                                result = \"f\";\n                                return true;\n                            }\n                        }\n                        result = false;\n                    }\n                    return true;\n                }\n            }));\n            return result;\n        });\n        def(AST_Unary, function(){\n            return this.expression.is_constant_expression();\n        });\n        def(AST_Binary, function(){\n            return this.left.is_constant_expression() && this.right.is_constant_expression();\n        });\n        def(AST_Array, function(){\n            return all(this.elements);\n        });\n        def(AST_Object, function(){\n            return all(this.properties);\n        });\n        def(AST_ObjectProperty, function(){\n            return this.value.is_constant_expression();\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"is_constant_expression\", func);\n    });\n\n    // tell me if a statement aborts\n    function aborts(thing) {\n        return thing && thing.aborts();\n    };\n    (function(def){\n        def(AST_Statement, return_null);\n        def(AST_Jump, return_this);\n        function block_aborts(){\n            var n = this.body.length;\n            return n > 0 && aborts(this.body[n - 1]);\n        };\n        def(AST_BlockStatement, block_aborts);\n        def(AST_SwitchBranch, block_aborts);\n        def(AST_If, function(){\n            return this.alternative && aborts(this.body) && aborts(this.alternative) && this;\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"aborts\", func);\n    });\n\n    /* -----[ optimizers ]----- */\n\n    OPT(AST_Directive, function(self, compressor){\n        if (compressor.has_directive(self.value) !== self) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    OPT(AST_Debugger, function(self, compressor){\n        if (compressor.option(\"drop_debugger\"))\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    OPT(AST_LabeledStatement, function(self, compressor){\n        if (self.body instanceof AST_Break\n            && compressor.loopcontrol_target(self.body) === self.body) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self.label.references.length == 0 ? self.body : self;\n    });\n\n    OPT(AST_Block, function(self, compressor){\n        tighten_body(self.body, compressor);\n        return self;\n    });\n\n    OPT(AST_BlockStatement, function(self, compressor){\n        tighten_body(self.body, compressor);\n        switch (self.body.length) {\n          case 1: return self.body[0];\n          case 0: return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    AST_Scope.DEFMETHOD(\"drop_unused\", function(compressor){\n        if (!compressor.option(\"unused\")) return;\n        if (compressor.has_directive(\"use asm\")) return;\n        var self = this;\n        if (self.uses_eval || self.uses_with) return;\n        var drop_funcs = !(self instanceof AST_Toplevel) || compressor.toplevel.funcs;\n        var drop_vars = !(self instanceof AST_Toplevel) || compressor.toplevel.vars;\n        var assign_as_unused = /keep_assign/.test(compressor.option(\"unused\")) ? return_false : function(node) {\n            if (node instanceof AST_Assign && (node.write_only || node.operator == \"=\")) {\n                return node.left;\n            }\n            if (node instanceof AST_Unary && node.write_only) return node.expression;\n        };\n        var in_use = [];\n        var in_use_ids = Object.create(null); // avoid expensive linear scans of in_use\n        if (self instanceof AST_Toplevel && compressor.top_retain) {\n            self.variables.each(function(def) {\n                if (compressor.top_retain(def) && !(def.id in in_use_ids)) {\n                    in_use_ids[def.id] = true;\n                    in_use.push(def);\n                }\n            });\n        }\n        var var_defs_by_id = new Dictionary();\n        var initializations = new Dictionary();\n        // pass 1: find out which symbols are directly used in\n        // this scope (not in nested scopes).\n        var scope = this;\n        var tw = new TreeWalker(function(node, descend){\n            if (node === self) return;\n            if (node instanceof AST_Defun) {\n                if (!drop_funcs && scope === self) {\n                    var node_def = node.name.definition();\n                    if (!(node_def.id in in_use_ids)) {\n                        in_use_ids[node_def.id] = true;\n                        in_use.push(node_def);\n                    }\n                }\n                initializations.add(node.name.name, node);\n                return true; // don't go in nested scopes\n            }\n            if (node instanceof AST_SymbolFunarg && scope === self) {\n                var_defs_by_id.add(node.definition().id, node);\n            }\n            if (node instanceof AST_Definitions && scope === self) {\n                node.definitions.forEach(function(def){\n                    var node_def = def.name.definition();\n                    if (def.name instanceof AST_SymbolVar) {\n                        var_defs_by_id.add(node_def.id, def);\n                    }\n                    if (!drop_vars) {\n                        if (!(node_def.id in in_use_ids)) {\n                            in_use_ids[node_def.id] = true;\n                            in_use.push(node_def);\n                        }\n                    }\n                    if (def.value) {\n                        initializations.add(def.name.name, def.value);\n                        if (def.value.has_side_effects(compressor)) {\n                            def.value.walk(tw);\n                        }\n                    }\n                });\n                return true;\n            }\n            var sym;\n            if (scope === self\n                && (sym = assign_as_unused(node)) instanceof AST_SymbolRef\n                && self.variables.get(sym.name) === sym.definition()) {\n                if (node instanceof AST_Assign) node.right.walk(tw);\n                return true;\n            }\n            if (node instanceof AST_SymbolRef) {\n                var node_def = node.definition();\n                if (!(node_def.id in in_use_ids)) {\n                    in_use_ids[node_def.id] = true;\n                    in_use.push(node_def);\n                }\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                var save_scope = scope;\n                scope = node;\n                descend();\n                scope = save_scope;\n                return true;\n            }\n        });\n        self.walk(tw);\n        // pass 2: for every used symbol we need to walk its\n        // initialization code to figure out if it uses other\n        // symbols (that may not be in_use).\n        for (var i = 0; i < in_use.length; ++i) {\n            in_use[i].orig.forEach(function(decl){\n                // undeclared globals will be instanceof AST_SymbolRef\n                var init = initializations.get(decl.name);\n                if (init) init.forEach(function(init){\n                    var tw = new TreeWalker(function(node){\n                        if (node instanceof AST_SymbolRef) {\n                            var node_def = node.definition();\n                            if (!(node_def.id in in_use_ids)) {\n                                in_use_ids[node_def.id] = true;\n                                in_use.push(node_def);\n                            }\n                        }\n                    });\n                    init.walk(tw);\n                });\n            });\n        }\n        // pass 3: we should drop declarations not in_use\n        var tt = new TreeTransformer(\n            function before(node, descend, in_list) {\n                if (node instanceof AST_Function\n                    && node.name\n                    && !compressor.option(\"keep_fnames\")) {\n                    var def = node.name.definition();\n                    // any declarations with same name will overshadow\n                    // name of this anonymous function and can therefore\n                    // never be used anywhere\n                    if (!(def.id in in_use_ids) || def.orig.length > 1)\n                        node.name = null;\n                }\n                if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {\n                    var trim = !compressor.option(\"keep_fargs\");\n                    for (var a = node.argnames, i = a.length; --i >= 0;) {\n                        var sym = a[i];\n                        if (!(sym.definition().id in in_use_ids)) {\n                            sym.__unused = true;\n                            if (trim) {\n                                a.pop();\n                                compressor[sym.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function argument {name} [{file}:{line},{col}]\", template(sym));\n                            }\n                        }\n                        else {\n                            trim = false;\n                        }\n                    }\n                }\n                if (drop_funcs && node instanceof AST_Defun && node !== self) {\n                    var def = node.name.definition();\n                    if (!(def.id in in_use_ids)) {\n                        compressor[node.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function {name} [{file}:{line},{col}]\", template(node.name));\n                        drop_decl(def);\n                        return make_node(AST_EmptyStatement, node);\n                    }\n                    return node;\n                }\n                var parent = tt.parent();\n                if (node instanceof AST_Definitions && !(parent instanceof AST_ForIn && parent.init === node)) {\n                    // place uninitialized names at the start\n                    var body = [], head = [], tail = [];\n                    // for unused names whose initialization has\n                    // side effects, we can cascade the init. code\n                    // into the next one, or next statement.\n                    var side_effects = [];\n                    node.definitions.forEach(function(def) {\n                        if (def.value) def.value = def.value.transform(tt);\n                        var sym = def.name.definition();\n                        if (!drop_vars || sym.id in in_use_ids) {\n                            if (def.name instanceof AST_SymbolVar) {\n                                var var_defs = var_defs_by_id.get(sym.id);\n                                if (var_defs.length > 1 && !def.value) {\n                                    compressor.warn(\"Dropping duplicated definition of variable {name} [{file}:{line},{col}]\", template(def.name));\n                                    remove(var_defs, def);\n                                    drop_decl(sym);\n                                    return;\n                                }\n                            }\n                            if (def.value) {\n                                if (side_effects.length > 0) {\n                                    if (tail.length > 0) {\n                                        merge_sequence(side_effects, def.value);\n                                        def.value = make_sequence(def.value, side_effects);\n                                    } else {\n                                        body.push(make_node(AST_SimpleStatement, node, {\n                                            body: make_sequence(node, side_effects)\n                                        }));\n                                    }\n                                    side_effects = [];\n                                }\n                                tail.push(def);\n                            } else {\n                                head.push(def);\n                            }\n                        } else if (sym.orig[0] instanceof AST_SymbolCatch) {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) merge_sequence(side_effects, value);\n                            def.value = null;\n                            head.push(def);\n                        } else {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) {\n                                compressor.warn(\"Side effects in initialization of unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                                merge_sequence(side_effects, value);\n                            } else {\n                                compressor[def.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                            }\n                            drop_decl(sym);\n                        }\n                    });\n                    if (head.length == 0 && tail.length == 1 && tail[0].name instanceof AST_SymbolVar) {\n                        var var_defs = var_defs_by_id.get(tail[0].name.definition().id);\n                        if (var_defs.length > 1) {\n                            var def = tail.pop();\n                            compressor.warn(\"Converting duplicated definition of variable {name} to assignment [{file}:{line},{col}]\", template(def.name));\n                            remove(var_defs, def);\n                            side_effects.unshift(make_node(AST_Assign, def, {\n                                operator: \"=\",\n                                left: make_node(AST_SymbolRef, def.name, def.name),\n                                right: def.value\n                            }));\n                            def = def.name.definition();\n                            drop_decl(def);\n                            def.replaced--;\n                        }\n                    }\n                    if (head.length > 0 || tail.length > 0) {\n                        node.definitions = head.concat(tail);\n                        body.push(node);\n                    }\n                    if (side_effects.length > 0) {\n                        body.push(make_node(AST_SimpleStatement, node, {\n                            body: make_sequence(node, side_effects)\n                        }));\n                    }\n                    switch (body.length) {\n                      case 0:\n                        return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);\n                      case 1:\n                        return body[0];\n                      default:\n                        return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, {\n                            body: body\n                        });\n                    }\n                }\n                if (drop_vars) {\n                    var sym = assign_as_unused(node);\n                    if (sym instanceof AST_SymbolRef\n                        && !(sym.definition().id in in_use_ids)) {\n                        if (node instanceof AST_Assign) {\n                            return maintain_this_binding(parent, node, node.right.transform(tt));\n                        }\n                        return make_node(AST_Number, node, {\n                            value: 0\n                        });\n                    }\n                }\n                // certain combination of unused name + side effect leads to:\n                //    https://github.com/mishoo/UglifyJS2/issues/44\n                //    https://github.com/mishoo/UglifyJS2/issues/1830\n                //    https://github.com/mishoo/UglifyJS2/issues/1838\n                // that's an invalid AST.\n                // We fix it at this stage by moving the `var` outside the `for`.\n                if (node instanceof AST_For) {\n                    descend(node, this);\n                    var block;\n                    if (node.init instanceof AST_BlockStatement) {\n                        block = node.init;\n                        node.init = block.body.pop();\n                        block.body.push(node);\n                    }\n                    if (node.init instanceof AST_SimpleStatement) {\n                        node.init = node.init.body;\n                    } else if (is_empty(node.init)) {\n                        node.init = null;\n                    }\n                    return !block ? node : in_list ? MAP.splice(block.body) : block;\n                }\n                if (node instanceof AST_LabeledStatement && node.body instanceof AST_For) {\n                    descend(node, this);\n                    if (node.body instanceof AST_BlockStatement) {\n                        var block = node.body;\n                        node.body = block.body.pop();\n                        block.body.push(node);\n                        return in_list ? MAP.splice(block.body) : block;\n                    }\n                    return node;\n                }\n                if (node instanceof AST_Scope && node !== self)\n                    return node;\n\n                function template(sym) {\n                    return {\n                        name : sym.name,\n                        file : sym.start.file,\n                        line : sym.start.line,\n                        col  : sym.start.col\n                    };\n                }\n            }\n        );\n        self.transform(tt);\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_declarations\", function(compressor){\n        var self = this;\n        if (compressor.has_directive(\"use asm\")) return self;\n        var hoist_funs = compressor.option(\"hoist_funs\");\n        var hoist_vars = compressor.option(\"hoist_vars\");\n        if (hoist_funs || hoist_vars) {\n            var dirs = [];\n            var hoisted = [];\n            var vars = new Dictionary(), vars_found = 0, var_decl = 0;\n            // let's count var_decl first, we seem to waste a lot of\n            // space if we hoist `var` when there's only one.\n            self.walk(new TreeWalker(function(node){\n                if (node instanceof AST_Scope && node !== self)\n                    return true;\n                if (node instanceof AST_Var) {\n                    ++var_decl;\n                    return true;\n                }\n            }));\n            hoist_vars = hoist_vars && var_decl > 1;\n            var tt = new TreeTransformer(\n                function before(node) {\n                    if (node !== self) {\n                        if (node instanceof AST_Directive) {\n                            dirs.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_funs && node instanceof AST_Defun\n                            && (tt.parent() === self || !compressor.has_directive(\"use strict\"))) {\n                            hoisted.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_vars && node instanceof AST_Var) {\n                            node.definitions.forEach(function(def){\n                                vars.set(def.name.name, def);\n                                ++vars_found;\n                            });\n                            var seq = node.to_assignments(compressor);\n                            var p = tt.parent();\n                            if (p instanceof AST_ForIn && p.init === node) {\n                                if (seq == null) {\n                                    var def = node.definitions[0].name;\n                                    return make_node(AST_SymbolRef, def, def);\n                                }\n                                return seq;\n                            }\n                            if (p instanceof AST_For && p.init === node) {\n                                return seq;\n                            }\n                            if (!seq) return make_node(AST_EmptyStatement, node);\n                            return make_node(AST_SimpleStatement, node, {\n                                body: seq\n                            });\n                        }\n                        if (node instanceof AST_Scope)\n                            return node; // to avoid descending in nested scopes\n                    }\n                }\n            );\n            self = self.transform(tt);\n            if (vars_found > 0) {\n                // collect only vars which don't show up in self's arguments list\n                var defs = [];\n                vars.each(function(def, name){\n                    if (self instanceof AST_Lambda\n                        && find_if(function(x){ return x.name == def.name.name },\n                                   self.argnames)) {\n                        vars.del(name);\n                    } else {\n                        def = def.clone();\n                        def.value = null;\n                        defs.push(def);\n                        vars.set(name, def);\n                    }\n                });\n                if (defs.length > 0) {\n                    // try to merge in assignments\n                    for (var i = 0; i < self.body.length;) {\n                        if (self.body[i] instanceof AST_SimpleStatement) {\n                            var expr = self.body[i].body, sym, assign;\n                            if (expr instanceof AST_Assign\n                                && expr.operator == \"=\"\n                                && (sym = expr.left) instanceof AST_Symbol\n                                && vars.has(sym.name))\n                            {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = expr.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body.splice(i, 1);\n                                continue;\n                            }\n                            if (expr instanceof AST_Sequence\n                                && (assign = expr.expressions[0]) instanceof AST_Assign\n                                && assign.operator == \"=\"\n                                && (sym = assign.left) instanceof AST_Symbol\n                                && vars.has(sym.name))\n                            {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = assign.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body[i].body = make_sequence(expr, expr.expressions.slice(1));\n                                continue;\n                            }\n                        }\n                        if (self.body[i] instanceof AST_EmptyStatement) {\n                            self.body.splice(i, 1);\n                            continue;\n                        }\n                        if (self.body[i] instanceof AST_BlockStatement) {\n                            var tmp = [ i, 1 ].concat(self.body[i].body);\n                            self.body.splice.apply(self.body, tmp);\n                            continue;\n                        }\n                        break;\n                    }\n                    defs = make_node(AST_Var, self, {\n                        definitions: defs\n                    });\n                    hoisted.push(defs);\n                };\n            }\n            self.body = dirs.concat(hoisted, self.body);\n        }\n        return self;\n    });\n\n    AST_Scope.DEFMETHOD(\"make_var_name\", function(prefix) {\n        var var_names = this.var_names;\n        if (!var_names) {\n            this.var_names = var_names = Object.create(null);\n            this.enclosed.forEach(function(def) {\n                var_names[def.name] = true;\n            });\n            this.variables.each(function(def, name) {\n                var_names[name] = true;\n            });\n        }\n        prefix = prefix.replace(/[^a-z_$]+/ig, \"_\");\n        var name = prefix;\n        for (var i = 0; var_names[name]; i++) name = prefix + \"$\" + i;\n        var_names[name] = true;\n        return name;\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_properties\", function(compressor){\n        var self = this;\n        if (!compressor.option(\"hoist_props\") || compressor.has_directive(\"use asm\")) return self;\n        var top_retain = self instanceof AST_Toplevel && compressor.top_retain || return_false;\n        var defs_by_id = Object.create(null);\n        return self.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_VarDef) {\n                var sym = node.name, def, value;\n                if (sym.scope === self\n                    && !(def = sym.definition()).escaped\n                    && !def.single_use\n                    && !def.direct_access\n                    && !top_retain(def)\n                    && (value = sym.fixed_value()) === node.value\n                    && value instanceof AST_Object) {\n                    var defs = new Dictionary();\n                    var assignments = [];\n                    value.properties.forEach(function(prop) {\n                        assignments.push(make_node(AST_VarDef, node, {\n                            name: make_sym(prop.key),\n                            value: prop.value\n                        }));\n                    });\n                    defs_by_id[def.id] = defs;\n                    return MAP.splice(assignments);\n                }\n            }\n            if (node instanceof AST_PropAccess && node.expression instanceof AST_SymbolRef) {\n                var defs = defs_by_id[node.expression.definition().id];\n                if (defs) {\n                    var key = node.property;\n                    if (key instanceof AST_Node) key = key.getValue();\n                    var def = defs.get(key);\n                    var sym = make_node(AST_SymbolRef, node, {\n                        name: def.name,\n                        scope: node.expression.scope,\n                        thedef: def\n                    });\n                    sym.reference({});\n                    return sym;\n                }\n            }\n\n            function make_sym(key) {\n                var new_var = make_node(sym.CTOR, sym, {\n                    name: self.make_var_name(sym.name + \"_\" + key),\n                    scope: self\n                });\n                var def = self.def_variable(new_var);\n                defs.set(key, def);\n                self.enclosed.push(def);\n                return new_var;\n            }\n        }));\n    });\n\n    // drop_side_effect_free()\n    // remove side-effect-free parts which only affects return value\n    (function(def){\n        // Drop side-effect-free elements from an array of expressions.\n        // Returns an array of expressions with side-effects or null\n        // if all elements were dropped. Note: original array may be\n        // returned if nothing changed.\n        function trim(nodes, compressor, first_in_statement) {\n            var len = nodes.length;\n            if (!len) return null;\n            var ret = [], changed = false;\n            for (var i = 0; i < len; i++) {\n                var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);\n                changed |= node !== nodes[i];\n                if (node) {\n                    merge_sequence(ret, node);\n                    first_in_statement = false;\n                }\n            }\n            return changed ? ret.length ? ret : null : nodes;\n        }\n\n        def(AST_Node, return_this);\n        def(AST_Constant, return_null);\n        def(AST_This, return_null);\n        def(AST_Call, function(compressor, first_in_statement){\n            if (!this.is_expr_pure(compressor)) {\n                if (this.expression instanceof AST_Function\n                    && (!this.expression.name || !this.expression.name.definition().references.length)) {\n                    var node = this.clone();\n                    node.expression.process_expression(false, compressor);\n                    return node;\n                }\n                return this;\n            }\n            if (this.pure) {\n                compressor.warn(\"Dropping __PURE__ call [{file}:{line},{col}]\", this.start);\n                this.pure.value = this.pure.value.replace(/[@#]__PURE__/g, ' ');\n            }\n            var args = trim(this.args, compressor, first_in_statement);\n            return args && make_sequence(this, args);\n        });\n        def(AST_Accessor, return_null);\n        def(AST_Function, return_null);\n        def(AST_Binary, function(compressor, first_in_statement){\n            var right = this.right.drop_side_effect_free(compressor);\n            if (!right) return this.left.drop_side_effect_free(compressor, first_in_statement);\n            if (lazy_op(this.operator)) {\n                if (right === this.right) return this;\n                var node = this.clone();\n                node.right = right;\n                return node;\n            } else {\n                var left = this.left.drop_side_effect_free(compressor, first_in_statement);\n                if (!left) return this.right.drop_side_effect_free(compressor, first_in_statement);\n                return make_sequence(this, [ left, right ]);\n            }\n        });\n        def(AST_Assign, function(compressor){\n            this.write_only = !this.left.has_side_effects(compressor);\n            return this;\n        });\n        def(AST_Conditional, function(compressor){\n            var consequent = this.consequent.drop_side_effect_free(compressor);\n            var alternative = this.alternative.drop_side_effect_free(compressor);\n            if (consequent === this.consequent && alternative === this.alternative) return this;\n            if (!consequent) return alternative ? make_node(AST_Binary, this, {\n                operator: \"||\",\n                left: this.condition,\n                right: alternative\n            }) : this.condition.drop_side_effect_free(compressor);\n            if (!alternative) return make_node(AST_Binary, this, {\n                operator: \"&&\",\n                left: this.condition,\n                right: consequent\n            });\n            var node = this.clone();\n            node.consequent = consequent;\n            node.alternative = alternative;\n            return node;\n        });\n        def(AST_Unary, function(compressor, first_in_statement){\n            if (unary_side_effects(this.operator)) {\n                this.write_only = !this.expression.has_side_effects(compressor);\n                return this;\n            }\n            if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef) return null;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (first_in_statement\n                && this instanceof AST_UnaryPrefix\n                && is_iife_call(expression)) {\n                if (expression === this.expression && this.operator.length === 1) return this;\n                return make_node(AST_UnaryPrefix, this, {\n                    operator: this.operator.length === 1 ? this.operator : \"!\",\n                    expression: expression\n                });\n            }\n            return expression;\n        });\n        def(AST_SymbolRef, function(compressor) {\n            return this.is_declared(compressor) ? null : this;\n        });\n        def(AST_Object, function(compressor, first_in_statement){\n            var values = trim(this.properties, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def(AST_ObjectProperty, function(compressor, first_in_statement){\n            return this.value.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def(AST_Array, function(compressor, first_in_statement){\n            var values = trim(this.elements, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def(AST_Dot, function(compressor, first_in_statement){\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            return this.expression.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def(AST_Sub, function(compressor, first_in_statement){\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (!expression) return this.property.drop_side_effect_free(compressor, first_in_statement);\n            var property = this.property.drop_side_effect_free(compressor);\n            if (!property) return expression;\n            return make_sequence(this, [ expression, property ]);\n        });\n        def(AST_Sequence, function(compressor){\n            var last = this.expressions[this.expressions.length - 1];\n            var expr = last.drop_side_effect_free(compressor);\n            if (expr === last) return this;\n            var expressions = this.expressions.slice(0, -1);\n            if (expr) merge_sequence(expressions, expr);\n            return make_sequence(this, expressions);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"drop_side_effect_free\", func);\n    });\n\n    OPT(AST_SimpleStatement, function(self, compressor){\n        if (compressor.option(\"side_effects\")) {\n            var body = self.body;\n            var node = body.drop_side_effect_free(compressor, true);\n            if (!node) {\n                compressor.warn(\"Dropping side-effect-free statement [{file}:{line},{col}]\", self.start);\n                return make_node(AST_EmptyStatement, self);\n            }\n            if (node !== body) {\n                return make_node(AST_SimpleStatement, self, { body: node });\n            }\n        }\n        return self;\n    });\n\n    OPT(AST_DWLoop, function(self, compressor){\n        if (!compressor.option(\"loops\")) return self;\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                return make_node(AST_For, self, {\n                    body: self.body\n                });\n            }\n            if (compressor.option(\"dead_code\") && self instanceof AST_While) {\n                var a = [];\n                extract_declarations_from_unreachable_code(compressor, self.body, a);\n                return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n            }\n            if (self instanceof AST_Do) {\n                var has_loop_control = false;\n                var tw = new TreeWalker(function(node) {\n                    if (node instanceof AST_Scope || has_loop_control) return true;\n                    if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === self)\n                        return has_loop_control = true;\n                });\n                var parent = compressor.parent();\n                (parent instanceof AST_LabeledStatement ? parent : self).walk(tw);\n                if (!has_loop_control) return self.body;\n            }\n        }\n        if (self instanceof AST_While) {\n            return make_node(AST_For, self, self).optimize(compressor);\n        }\n        return self;\n    });\n\n    function if_break_in_loop(self, compressor) {\n        function drop_it(rest) {\n            rest = as_statement_array(rest);\n            if (self.body instanceof AST_BlockStatement) {\n                self.body = self.body.clone();\n                self.body.body = rest.concat(self.body.body.slice(1));\n                self.body = self.body.transform(compressor);\n            } else {\n                self.body = make_node(AST_BlockStatement, self.body, {\n                    body: rest\n                }).transform(compressor);\n            }\n            if_break_in_loop(self, compressor);\n        }\n        var first = self.body instanceof AST_BlockStatement ? self.body.body[0] : self.body;\n        if (first instanceof AST_If) {\n            if (first.body instanceof AST_Break\n                && compressor.loopcontrol_target(first.body) === compressor.self()) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition.negate(compressor),\n                    });\n                } else {\n                    self.condition = first.condition.negate(compressor);\n                }\n                drop_it(first.alternative);\n            }\n            else if (first.alternative instanceof AST_Break\n                     && compressor.loopcontrol_target(first.alternative) === compressor.self()) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition,\n                    });\n                } else {\n                    self.condition = first.condition;\n                }\n                drop_it(first.body);\n            }\n        }\n    };\n\n    OPT(AST_For, function(self, compressor){\n        if (!compressor.option(\"loops\")) return self;\n        if (self.condition) {\n            var cond = self.condition.evaluate(compressor);\n            if (compressor.option(\"dead_code\") && !cond) {\n                var a = [];\n                if (self.init instanceof AST_Statement) {\n                    a.push(self.init);\n                }\n                else if (self.init) {\n                    a.push(make_node(AST_SimpleStatement, self.init, {\n                        body: self.init\n                    }));\n                }\n                extract_declarations_from_unreachable_code(compressor, self.body, a);\n                return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n            }\n            if (cond !== self.condition) {\n                cond = make_node_from_constant(cond, self.condition).transform(compressor);\n                self.condition = best_of_expression(cond, self.condition);\n            }\n        }\n        if_break_in_loop(self, compressor);\n        return self;\n    });\n\n    OPT(AST_If, function(self, compressor){\n        if (is_empty(self.alternative)) self.alternative = null;\n\n        if (!compressor.option(\"conditionals\")) return self;\n        // if condition can be statically determined, warn and drop\n        // one of the blocks.  note, statically determined implies\n        // “has no side effects”; also it doesn't work for cases like\n        // `x && true`, though it probably should.\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.condition.start);\n                if (compressor.option(\"dead_code\")) {\n                    var a = [];\n                    if (self.alternative) {\n                        extract_declarations_from_unreachable_code(compressor, self.alternative, a);\n                    }\n                    a.push(self.body);\n                    return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n                }\n            } else {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.condition.start);\n                if (compressor.option(\"dead_code\")) {\n                    var a = [];\n                    extract_declarations_from_unreachable_code(compressor, self.body, a);\n                    if (self.alternative) a.push(self.alternative);\n                    return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n                }\n            }\n            cond = make_node_from_constant(cond, self.condition).transform(compressor);\n            self.condition = best_of_expression(cond, self.condition);\n        }\n        var negated = self.condition.negate(compressor);\n        var self_condition_length = self.condition.print_to_string().length;\n        var negated_length = negated.print_to_string().length;\n        var negated_is_best = negated_length < self_condition_length;\n        if (self.alternative && negated_is_best) {\n            negated_is_best = false; // because we already do the switch here.\n            // no need to swap values of self_condition_length and negated_length\n            // here because they are only used in an equality comparison later on.\n            self.condition = negated;\n            var tmp = self.body;\n            self.body = self.alternative || make_node(AST_EmptyStatement, self);\n            self.alternative = tmp;\n        }\n        if (is_empty(self.body) && is_empty(self.alternative)) {\n            return make_node(AST_SimpleStatement, self.condition, {\n                body: self.condition.clone()\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_SimpleStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.body,\n                    alternative : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (is_empty(self.alternative) && self.body instanceof AST_SimpleStatement) {\n            if (self_condition_length === negated_length && !negated_is_best\n                && self.condition instanceof AST_Binary && self.condition.operator == \"||\") {\n                // although the code length of self.condition and negated are the same,\n                // negated does not require additional surrounding parentheses.\n                // see https://github.com/mishoo/UglifyJS2/issues/979\n                negated_is_best = true;\n            }\n            if (negated_is_best) return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : negated,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"&&\",\n                    left     : self.condition,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_EmptyStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : self.condition,\n                    right    : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_Exit\n            && self.alternative instanceof AST_Exit\n            && self.body.TYPE == self.alternative.TYPE) {\n            return make_node(self.body.CTOR, self, {\n                value: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.value || make_node(AST_Undefined, self.body),\n                    alternative : self.alternative.value || make_node(AST_Undefined, self.alternative)\n                }).transform(compressor)\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_If\n            && !self.body.alternative\n            && !self.alternative) {\n            self = make_node(AST_If, self, {\n                condition: make_node(AST_Binary, self.condition, {\n                    operator: \"&&\",\n                    left: self.condition,\n                    right: self.body.condition\n                }),\n                body: self.body.body,\n                alternative: null\n            });\n        }\n        if (aborts(self.body)) {\n            if (self.alternative) {\n                var alt = self.alternative;\n                self.alternative = null;\n                return make_node(AST_BlockStatement, self, {\n                    body: [ self, alt ]\n                }).optimize(compressor);\n            }\n        }\n        if (aborts(self.alternative)) {\n            var body = self.body;\n            self.body = self.alternative;\n            self.condition = negated_is_best ? negated : self.condition.negate(compressor);\n            self.alternative = null;\n            return make_node(AST_BlockStatement, self, {\n                body: [ self, body ]\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    OPT(AST_Switch, function(self, compressor){\n        if (!compressor.option(\"switches\")) return self;\n        var branch;\n        var value = self.expression.evaluate(compressor);\n        if (value !== self.expression) {\n            var expression = make_node_from_constant(value, self.expression).transform(compressor);\n            self.expression = best_of_expression(expression, self.expression);\n        }\n        if (!compressor.option(\"dead_code\")) return self;\n        var decl = [];\n        var body = [];\n        var default_branch;\n        var exact_match;\n        for (var i = 0, len = self.body.length; i < len && !exact_match; i++) {\n            branch = self.body[i];\n            if (branch instanceof AST_Default) {\n                if (!default_branch) {\n                    default_branch = branch;\n                } else {\n                    eliminate_branch(branch, body[body.length - 1]);\n                }\n            } else if (value !== self.expression) {\n                var exp = branch.expression.evaluate(compressor);\n                if (exp === value) {\n                    exact_match = branch;\n                    if (default_branch) {\n                        var default_index = body.indexOf(default_branch);\n                        body.splice(default_index, 1);\n                        eliminate_branch(default_branch, body[default_index - 1]);\n                        default_branch = null;\n                    }\n                } else if (exp !== branch.expression) {\n                    eliminate_branch(branch, body[body.length - 1]);\n                    continue;\n                }\n            }\n            if (aborts(branch)) {\n                var prev = body[body.length - 1];\n                if (aborts(prev) && prev.body.length == branch.body.length\n                    && make_node(AST_BlockStatement, prev, prev).equivalent_to(make_node(AST_BlockStatement, branch, branch))) {\n                    prev.body = [];\n                }\n            }\n            body.push(branch);\n        }\n        while (i < len) eliminate_branch(self.body[i++], body[body.length - 1]);\n        if (body.length > 0) {\n            body[0].body = decl.concat(body[0].body);\n        }\n        self.body = body;\n        while (branch = body[body.length - 1]) {\n            var stat = branch.body[branch.body.length - 1];\n            if (stat instanceof AST_Break && compressor.loopcontrol_target(stat) === self)\n                branch.body.pop();\n            if (branch.body.length || branch instanceof AST_Case\n                && (default_branch || branch.expression.has_side_effects(compressor))) break;\n            if (body.pop() === default_branch) default_branch = null;\n        }\n        if (body.length == 0) {\n            return make_node(AST_BlockStatement, self, {\n                body: decl.concat(make_node(AST_SimpleStatement, self.expression, {\n                    body: self.expression\n                }))\n            }).optimize(compressor);\n        }\n        if (body.length == 1 && (body[0] === exact_match || body[0] === default_branch)) {\n            var has_break = false;\n            var tw = new TreeWalker(function(node) {\n                if (has_break\n                    || node instanceof AST_Lambda\n                    || node instanceof AST_SimpleStatement) return true;\n                if (node instanceof AST_Break && tw.loopcontrol_target(node) === self)\n                    has_break = true;\n            });\n            self.walk(tw);\n            if (!has_break) {\n                body = body[0].body.slice();\n                body.unshift(make_node(AST_SimpleStatement, self.expression, {\n                    body: self.expression\n                }));\n                return make_node(AST_BlockStatement, self, {\n                    body: body\n                }).optimize(compressor);\n            }\n        }\n        return self;\n\n        function eliminate_branch(branch, prev) {\n            if (prev && !aborts(prev)) {\n                prev.body = prev.body.concat(branch.body);\n            } else {\n                extract_declarations_from_unreachable_code(compressor, branch, decl);\n            }\n        }\n    });\n\n    OPT(AST_Try, function(self, compressor){\n        tighten_body(self.body, compressor);\n        if (self.bcatch && self.bfinally && all(self.bfinally.body, is_empty)) self.bfinally = null;\n        if (all(self.body, is_empty)) {\n            var body = [];\n            if (self.bcatch) extract_declarations_from_unreachable_code(compressor, self.bcatch, body);\n            if (self.bfinally) body = body.concat(self.bfinally.body);\n            return make_node(AST_BlockStatement, self, {\n                body: body\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    AST_Definitions.DEFMETHOD(\"remove_initializers\", function(){\n        this.definitions.forEach(function(def){ def.value = null });\n    });\n\n    AST_Definitions.DEFMETHOD(\"to_assignments\", function(compressor){\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var assignments = this.definitions.reduce(function(a, def){\n            if (def.value) {\n                var name = make_node(AST_SymbolRef, def.name, def.name);\n                a.push(make_node(AST_Assign, def, {\n                    operator : \"=\",\n                    left     : name,\n                    right    : def.value\n                }));\n                if (reduce_vars) name.definition().fixed = false;\n            }\n            drop_decl(def.name.definition());\n            return a;\n        }, []);\n        if (assignments.length == 0) return null;\n        return make_sequence(this, assignments);\n    });\n\n    OPT(AST_Definitions, function(self, compressor){\n        if (self.definitions.length == 0)\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    OPT(AST_Call, function(self, compressor){\n        var exp = self.expression;\n        var fn = exp;\n        if (compressor.option(\"unused\")\n            && (fn instanceof AST_Function\n                || compressor.option(\"reduce_vars\")\n                    && fn instanceof AST_SymbolRef\n                    && (fn = fn.fixed_value()) instanceof AST_Function)\n            && !fn.uses_arguments\n            && !fn.uses_eval) {\n            var pos = 0, last = 0;\n            for (var i = 0, len = self.args.length; i < len; i++) {\n                var trim = i >= fn.argnames.length;\n                if (trim || fn.argnames[i].__unused) {\n                    var node = self.args[i].drop_side_effect_free(compressor);\n                    if (node) {\n                        self.args[pos++] = node;\n                    } else if (!trim) {\n                        self.args[pos++] = make_node(AST_Number, self.args[i], {\n                            value: 0\n                        });\n                        continue;\n                    }\n                } else {\n                    self.args[pos++] = self.args[i];\n                }\n                last = pos;\n            }\n            self.args.length = last;\n        }\n        if (compressor.option(\"unsafe\")) {\n            if (is_undeclared_ref(exp)) switch (exp.name) {\n              case \"Array\":\n                if (self.args.length != 1) {\n                    return make_node(AST_Array, self, {\n                        elements: self.args\n                    }).optimize(compressor);\n                }\n                break;\n              case \"Object\":\n                if (self.args.length == 0) {\n                    return make_node(AST_Object, self, {\n                        properties: []\n                    });\n                }\n                break;\n              case \"String\":\n                if (self.args.length == 0) return make_node(AST_String, self, {\n                    value: \"\"\n                });\n                if (self.args.length <= 1) return make_node(AST_Binary, self, {\n                    left: self.args[0],\n                    operator: \"+\",\n                    right: make_node(AST_String, self, { value: \"\" })\n                }).optimize(compressor);\n                break;\n              case \"Number\":\n                if (self.args.length == 0) return make_node(AST_Number, self, {\n                    value: 0\n                });\n                if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                    expression: self.args[0],\n                    operator: \"+\"\n                }).optimize(compressor);\n              case \"Boolean\":\n                if (self.args.length == 0) return make_node(AST_False, self);\n                if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                    expression: make_node(AST_UnaryPrefix, self, {\n                        expression: self.args[0],\n                        operator: \"!\"\n                    }),\n                    operator: \"!\"\n                }).optimize(compressor);\n                break;\n            } else if (exp instanceof AST_Dot) switch(exp.property) {\n              case \"toString\":\n                if (self.args.length == 0) return make_node(AST_Binary, self, {\n                    left: make_node(AST_String, self, { value: \"\" }),\n                    operator: \"+\",\n                    right: exp.expression\n                }).optimize(compressor);\n                break;\n              case \"join\":\n                if (exp.expression instanceof AST_Array) EXIT: {\n                    var separator;\n                    if (self.args.length > 0) {\n                        separator = self.args[0].evaluate(compressor);\n                        if (separator === self.args[0]) break EXIT; // not a constant\n                    }\n                    var elements = [];\n                    var consts = [];\n                    exp.expression.elements.forEach(function(el) {\n                        var value = el.evaluate(compressor);\n                        if (value !== el) {\n                            consts.push(value);\n                        } else {\n                            if (consts.length > 0) {\n                                elements.push(make_node(AST_String, self, {\n                                    value: consts.join(separator)\n                                }));\n                                consts.length = 0;\n                            }\n                            elements.push(el);\n                        }\n                    });\n                    if (consts.length > 0) {\n                        elements.push(make_node(AST_String, self, {\n                            value: consts.join(separator)\n                        }));\n                    }\n                    if (elements.length == 0) return make_node(AST_String, self, { value: \"\" });\n                    if (elements.length == 1) {\n                        if (elements[0].is_string(compressor)) {\n                            return elements[0];\n                        }\n                        return make_node(AST_Binary, elements[0], {\n                            operator : \"+\",\n                            left     : make_node(AST_String, self, { value: \"\" }),\n                            right    : elements[0]\n                        });\n                    }\n                    if (separator == \"\") {\n                        var first;\n                        if (elements[0].is_string(compressor)\n                            || elements[1].is_string(compressor)) {\n                            first = elements.shift();\n                        } else {\n                            first = make_node(AST_String, self, { value: \"\" });\n                        }\n                        return elements.reduce(function(prev, el){\n                            return make_node(AST_Binary, el, {\n                                operator : \"+\",\n                                left     : prev,\n                                right    : el\n                            });\n                        }, first).optimize(compressor);\n                    }\n                    // need this awkward cloning to not affect original element\n                    // best_of will decide which one to get through.\n                    var node = self.clone();\n                    node.expression = node.expression.clone();\n                    node.expression.expression = node.expression.expression.clone();\n                    node.expression.expression.elements = elements;\n                    return best_of(compressor, self, node);\n                }\n                break;\n              case \"charAt\":\n                if (exp.expression.is_string(compressor)) {\n                    var arg = self.args[0];\n                    var index = arg ? arg.evaluate(compressor) : 0;\n                    if (index !== arg) {\n                        return make_node(AST_Sub, exp, {\n                            expression: exp.expression,\n                            property: make_node_from_constant(index | 0, arg || exp)\n                        }).optimize(compressor);\n                    }\n                }\n                break;\n            }\n        }\n        if (compressor.option(\"unsafe_Func\")\n            && is_undeclared_ref(exp)\n            && exp.name == \"Function\") {\n            // new Function() => function(){}\n            if (self.args.length == 0) return make_node(AST_Function, self, {\n                argnames: [],\n                body: []\n            });\n            if (all(self.args, function(x) {\n                return x instanceof AST_String;\n            })) {\n                // quite a corner-case, but we can handle it:\n                //   https://github.com/mishoo/UglifyJS2/issues/203\n                // if the code argument is a constant, then we can minify it.\n                try {\n                    var code = \"n(function(\" + self.args.slice(0, -1).map(function(arg) {\n                        return arg.value;\n                    }).join(\",\") + \"){\" + self.args[self.args.length - 1].value + \"})\";\n                    var ast = parse(code);\n                    var mangle = { ie8: compressor.option(\"ie8\") };\n                    ast.figure_out_scope(mangle);\n                    var comp = new Compressor(compressor.options);\n                    ast = ast.transform(comp);\n                    ast.figure_out_scope(mangle);\n                    base54.reset();\n                    ast.compute_char_frequency(mangle);\n                    ast.mangle_names(mangle);\n                    var fun;\n                    ast.walk(new TreeWalker(function(node) {\n                        if (fun) return true;\n                        if (node instanceof AST_Lambda) {\n                            fun = node;\n                            return true;\n                        }\n                    }));\n                    var code = OutputStream();\n                    AST_BlockStatement.prototype._codegen.call(fun, fun, code);\n                    self.args = [\n                        make_node(AST_String, self, {\n                            value: fun.argnames.map(function(arg) {\n                                return arg.print_to_string();\n                            }).join(\",\")\n                        }),\n                        make_node(AST_String, self.args[self.args.length - 1], {\n                            value: code.get().replace(/^\\{|\\}$/g, \"\")\n                        })\n                    ];\n                    return self;\n                } catch (ex) {\n                    if (ex instanceof JS_Parse_Error) {\n                        compressor.warn(\"Error parsing code passed to new Function [{file}:{line},{col}]\", self.args[self.args.length - 1].start);\n                        compressor.warn(ex.toString());\n                    } else {\n                        throw ex;\n                    }\n                }\n            }\n        }\n        var stat = fn instanceof AST_Function && fn.body[0];\n        if (compressor.option(\"inline\") && stat instanceof AST_Return) {\n            var value = stat.value;\n            if (!value || value.is_constant_expression()) {\n                var args = self.args.concat(value || make_node(AST_Undefined, self));\n                return make_sequence(self, args).optimize(compressor);\n            }\n        }\n        if (exp instanceof AST_Function) {\n            if (compressor.option(\"inline\")\n                && !exp.name\n                && !exp.uses_arguments\n                && !exp.uses_eval\n                && exp.body.length == 1\n                && !exp.contains_this()\n                && all(exp.argnames, function(arg) {\n                    return arg.__unused;\n                })\n                && !self.has_pure_annotation(compressor)) {\n                var value;\n                if (stat instanceof AST_Return) {\n                    value = stat.value;\n                } else if (stat instanceof AST_SimpleStatement) {\n                    value = make_node(AST_UnaryPrefix, stat, {\n                        operator: \"void\",\n                        expression: stat.body\n                    });\n                }\n                if (value) {\n                    var args = self.args.concat(value);\n                    return make_sequence(self, args).optimize(compressor);\n                }\n            }\n            if (compressor.option(\"side_effects\") && all(exp.body, is_empty)) {\n                var args = self.args.concat(make_node(AST_Undefined, self));\n                return make_sequence(self, args).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"drop_console\")) {\n            if (exp instanceof AST_PropAccess) {\n                var name = exp.expression;\n                while (name.expression) {\n                    name = name.expression;\n                }\n                if (is_undeclared_ref(name) && name.name == \"console\") {\n                    return make_node(AST_Undefined, self).optimize(compressor);\n                }\n            }\n        }\n        if (compressor.option(\"negate_iife\")\n            && compressor.parent() instanceof AST_SimpleStatement\n            && is_iife_call(self)) {\n            return self.negate(compressor, true);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    OPT(AST_New, function(self, compressor){\n        if (compressor.option(\"unsafe\")) {\n            var exp = self.expression;\n            if (is_undeclared_ref(exp)) {\n                switch (exp.name) {\n                  case \"Object\":\n                  case \"RegExp\":\n                  case \"Function\":\n                  case \"Error\":\n                  case \"Array\":\n                    return make_node(AST_Call, self, self).transform(compressor);\n                }\n            }\n        }\n        return self;\n    });\n\n    OPT(AST_Sequence, function(self, compressor){\n        if (!compressor.option(\"side_effects\")) return self;\n        var expressions = [];\n        filter_for_side_effects();\n        var end = expressions.length - 1;\n        trim_right_for_undefined();\n        if (end > 0 && compressor.option(\"cascade\")) trim_left_for_assignment();\n        if (end == 0) {\n            self = maintain_this_binding(compressor.parent(), self, expressions[0]);\n            if (!(self instanceof AST_Sequence)) self = self.optimize(compressor);\n            return self;\n        }\n        self.expressions = expressions;\n        return self;\n\n        function filter_for_side_effects() {\n            var first = first_in_statement(compressor);\n            var last = self.expressions.length - 1;\n            self.expressions.forEach(function(expr, index) {\n                if (index < last) expr = expr.drop_side_effect_free(compressor, first);\n                if (expr) {\n                    merge_sequence(expressions, expr);\n                    first = false;\n                }\n            });\n        }\n\n        function trim_right_for_undefined() {\n            while (end > 0 && is_undefined(expressions[end], compressor)) end--;\n            if (end < expressions.length - 1) {\n                expressions[end] = make_node(AST_UnaryPrefix, self, {\n                    operator   : \"void\",\n                    expression : expressions[end]\n                });\n                expressions.length = end + 1;\n            }\n        }\n\n        function trim_left_for_assignment() {\n            for (var i = 0, j = 1; j <= end; j++) {\n                var left = expressions[i];\n                var cdr = expressions[j];\n                if (left instanceof AST_Assign\n                    && !left.left.has_side_effects(compressor)) {\n                    left = left.left;\n                } else if (left instanceof AST_Unary\n                    && (left.operator == \"++\" || left.operator == \"--\")) {\n                    left = left.expression;\n                } else left = null;\n                if (!left || is_lhs_read_only(left) || left.has_side_effects(compressor)) {\n                    expressions[++i] = cdr;\n                    continue;\n                }\n                var parent = null, field;\n                expressions[j] = cdr = cdr.clone();\n                while (true) {\n                    if (cdr.equivalent_to(left)) {\n                        var car = expressions[i];\n                        if (car instanceof AST_UnaryPostfix) {\n                            car = make_node(AST_UnaryPrefix, car, {\n                                operator: car.operator,\n                                expression: left\n                            });\n                        } else {\n                            car.write_only = false;\n                        }\n                        if (parent) {\n                            parent[field] = car;\n                            expressions[i] = expressions[j];\n                        } else {\n                            expressions[i] = car;\n                        }\n                        break;\n                    }\n                    if (cdr instanceof AST_Binary && !(cdr instanceof AST_Assign)) {\n                        if (cdr.left.is_constant()) {\n                            if (lazy_op(cdr.operator)) {\n                                expressions[++i] = expressions[j];\n                                break;\n                            }\n                            field = \"right\";\n                        } else {\n                            field = \"left\";\n                        }\n                    } else if (cdr instanceof AST_Call\n                            && !(left instanceof AST_PropAccess && cdr.expression.equivalent_to(left))\n                        || cdr instanceof AST_PropAccess\n                        || cdr instanceof AST_Unary && !unary_side_effects(cdr.operator)) {\n                        field = \"expression\";\n                    } else if (cdr instanceof AST_Conditional) {\n                        field = \"condition\";\n                    } else {\n                        expressions[++i] = expressions[j];\n                        break;\n                    }\n                    parent = cdr;\n                    cdr = cdr[field] = cdr[field].clone();\n                }\n            }\n            end = i;\n            expressions.length = end + 1;\n        }\n    });\n\n    AST_Unary.DEFMETHOD(\"lift_sequences\", function(compressor){\n        if (compressor.option(\"sequences\")) {\n            if (this.expression instanceof AST_Sequence) {\n                var x = this.expression.expressions.slice();\n                var e = this.clone();\n                e.expression = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n        }\n        return this;\n    });\n\n    OPT(AST_UnaryPostfix, function(self, compressor){\n        return self.lift_sequences(compressor);\n    });\n\n    OPT(AST_UnaryPrefix, function(self, compressor){\n        var e = self.expression;\n        if (self.operator == \"delete\"\n            && !(e instanceof AST_SymbolRef\n                || e instanceof AST_PropAccess\n                || is_identifier_atom(e))) {\n            if (e instanceof AST_Sequence) {\n                e = e.expressions.slice();\n                e.push(make_node(AST_True, self));\n                return make_sequence(self, e).optimize(compressor);\n            }\n            return make_sequence(self, [ e, make_node(AST_True, self) ]).optimize(compressor);\n        }\n        var seq = self.lift_sequences(compressor);\n        if (seq !== self) {\n            return seq;\n        }\n        if (compressor.option(\"side_effects\") && self.operator == \"void\") {\n            e = e.drop_side_effect_free(compressor);\n            if (e) {\n                self.expression = e;\n                return self;\n            } else {\n                return make_node(AST_Undefined, self).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n            switch (self.operator) {\n              case \"!\":\n                if (e instanceof AST_UnaryPrefix && e.operator == \"!\") {\n                    // !!foo ==> foo, if we're in boolean context\n                    return e.expression;\n                }\n                if (e instanceof AST_Binary) {\n                    self = best_of(compressor, self, e.negate(compressor, first_in_statement(compressor)));\n                }\n                break;\n              case \"typeof\":\n                // typeof always returns a non-empty string, thus it's\n                // always true in booleans\n                compressor.warn(\"Boolean expression always true [{file}:{line},{col}]\", self.start);\n                return (e instanceof AST_SymbolRef ? make_node(AST_True, self) : make_sequence(self, [\n                    e,\n                    make_node(AST_True, self)\n                ])).optimize(compressor);\n            }\n        }\n        if (self.operator == \"-\" && e instanceof AST_Infinity) {\n            e = e.transform(compressor);\n        }\n        if (e instanceof AST_Binary\n            && (self.operator == \"+\" || self.operator == \"-\")\n            && (e.operator == \"*\" || e.operator == \"/\" || e.operator == \"%\")) {\n            return make_node(AST_Binary, self, {\n                operator: e.operator,\n                left: make_node(AST_UnaryPrefix, e.left, {\n                    operator: self.operator,\n                    expression: e.left\n                }),\n                right: e.right\n            });\n        }\n        // avoids infinite recursion of numerals\n        if (self.operator != \"-\"\n            || !(e instanceof AST_Number || e instanceof AST_Infinity)) {\n            var ev = self.evaluate(compressor);\n            if (ev !== self) {\n                ev = make_node_from_constant(ev, self).optimize(compressor);\n                return best_of(compressor, ev, self);\n            }\n        }\n        return self;\n    });\n\n    AST_Binary.DEFMETHOD(\"lift_sequences\", function(compressor){\n        if (compressor.option(\"sequences\")) {\n            if (this.left instanceof AST_Sequence) {\n                var x = this.left.expressions.slice();\n                var e = this.clone();\n                e.left = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n            if (this.right instanceof AST_Sequence && !this.left.has_side_effects(compressor)) {\n                var assign = this.operator == \"=\" && this.left instanceof AST_SymbolRef;\n                var x = this.right.expressions;\n                var last = x.length - 1;\n                for (var i = 0; i < last; i++) {\n                    if (!assign && x[i].has_side_effects(compressor)) break;\n                }\n                if (i == last) {\n                    x = x.slice();\n                    var e = this.clone();\n                    e.right = x.pop();\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                } else if (i > 0) {\n                    var e = this.clone();\n                    e.right = make_sequence(this.right, x.slice(i));\n                    x = x.slice(0, i);\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                }\n            }\n        }\n        return this;\n    });\n\n    var commutativeOperators = makePredicate(\"== === != !== * & | ^\");\n    function is_object(node) {\n        return node instanceof AST_Array\n            || node instanceof AST_Lambda\n            || node instanceof AST_Object;\n    }\n\n    OPT(AST_Binary, function(self, compressor){\n        function reversible() {\n            return self.left.is_constant()\n                || self.right.is_constant()\n                || !self.left.has_side_effects(compressor)\n                    && !self.right.has_side_effects(compressor);\n        }\n        function reverse(op) {\n            if (reversible()) {\n                if (op) self.operator = op;\n                var tmp = self.left;\n                self.left = self.right;\n                self.right = tmp;\n            }\n        }\n        if (commutativeOperators(self.operator)) {\n            if (self.right.is_constant()\n                && !self.left.is_constant()) {\n                // if right is a constant, whatever side effects the\n                // left side might have could not influence the\n                // result.  hence, force switch.\n\n                if (!(self.left instanceof AST_Binary\n                      && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    reverse();\n                }\n            }\n        }\n        self = self.lift_sequences(compressor);\n        if (compressor.option(\"comparisons\")) switch (self.operator) {\n          case \"===\":\n          case \"!==\":\n            if ((self.left.is_string(compressor) && self.right.is_string(compressor)) ||\n                (self.left.is_number(compressor) && self.right.is_number(compressor)) ||\n                (self.left.is_boolean() && self.right.is_boolean()) ||\n                self.left.equivalent_to(self.right)) {\n                self.operator = self.operator.substr(0, 2);\n            }\n            // XXX: intentionally falling down to the next case\n          case \"==\":\n          case \"!=\":\n            // \"undefined\" == typeof x => undefined === x\n            if (compressor.option(\"typeofs\")\n                && self.left instanceof AST_String\n                && self.left.value == \"undefined\"\n                && self.right instanceof AST_UnaryPrefix\n                && self.right.operator == \"typeof\") {\n                var expr = self.right.expression;\n                if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor)\n                    : !(expr instanceof AST_PropAccess && compressor.option(\"ie8\"))) {\n                    self.right = expr;\n                    self.left = make_node(AST_Undefined, self.left).optimize(compressor);\n                    if (self.operator.length == 2) self.operator += \"=\";\n                }\n            }\n            // obj !== obj => false\n            else if (self.left instanceof AST_SymbolRef\n                && self.right instanceof AST_SymbolRef\n                && self.left.definition() === self.right.definition()\n                && is_object(self.left.fixed_value())) {\n                return make_node(self.operator[0] == \"=\" ? AST_True : AST_False, self);\n            }\n            break;\n        }\n        if (compressor.option(\"booleans\") && self.operator == \"+\" && compressor.in_boolean_context()) {\n            var ll = self.left.evaluate(compressor);\n            var rr = self.right.evaluate(compressor);\n            if (ll && typeof ll == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.right,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n            if (rr && typeof rr == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.left,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"comparisons\") && self.is_boolean()) {\n            if (!(compressor.parent() instanceof AST_Binary)\n                || compressor.parent() instanceof AST_Assign) {\n                var negated = make_node(AST_UnaryPrefix, self, {\n                    operator: \"!\",\n                    expression: self.negate(compressor, first_in_statement(compressor))\n                });\n                self = best_of(compressor, self, negated);\n            }\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (self.operator) {\n                  case \"<\": reverse(\">\"); break;\n                  case \"<=\": reverse(\">=\"); break;\n                }\n            }\n        }\n        if (self.operator == \"+\") {\n            if (self.right instanceof AST_String\n                && self.right.getValue() == \"\"\n                && self.left.is_string(compressor)) {\n                return self.left;\n            }\n            if (self.left instanceof AST_String\n                && self.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                return self.right;\n            }\n            if (self.left instanceof AST_Binary\n                && self.left.operator == \"+\"\n                && self.left.left instanceof AST_String\n                && self.left.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                self.left = self.left.right;\n                return self.transform(compressor);\n            }\n        }\n        if (compressor.option(\"evaluate\")) {\n            switch (self.operator) {\n              case \"&&\":\n                var ll = self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of && always false [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.left).optimize(compressor);\n                } else if (ll !== self.left) {\n                    compressor.warn(\"Condition left of && always true [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.right).optimize(compressor);\n                }\n                if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n                    var rr = self.right.evaluate(compressor);\n                    if (!rr) {\n                        compressor.warn(\"Boolean && always false [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_False, self)\n                        ]).optimize(compressor);\n                    } else if (rr !== self.right) {\n                        compressor.warn(\"Dropping side-effect-free && in boolean context [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    }\n                }\n                break;\n              case \"||\":\n                var ll = self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of || always false [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.right).optimize(compressor);\n                } else if (ll !== self.left) {\n                    compressor.warn(\"Condition left of || always true [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.left).optimize(compressor);\n                }\n                if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n                    var rr = self.right.evaluate(compressor);\n                    if (!rr) {\n                        compressor.warn(\"Dropping side-effect-free || in boolean context [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    } else if (rr !== self.right) {\n                        compressor.warn(\"Boolean || always true [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_True, self)\n                        ]).optimize(compressor);\n                    }\n                }\n                break;\n            }\n            var associative = true;\n            switch (self.operator) {\n              case \"+\":\n                // \"foo\" + (\"bar\" + x) => \"foobar\" + x\n                if (self.left instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_String, self.left, {\n                            value: \"\" + self.left.getValue() + self.right.left.getValue(),\n                            start: self.left.start,\n                            end: self.right.left.end\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // (x + \"foo\") + \"bar\" => x + \"foobar\"\n                if (self.right instanceof AST_Constant\n                    && self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.right instanceof AST_Constant\n                    && self.left.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: self.left.left,\n                        right: make_node(AST_String, self.right, {\n                            value: \"\" + self.left.right.getValue() + self.right.getValue(),\n                            start: self.left.right.start,\n                            end: self.right.end\n                        })\n                    });\n                }\n                // (x + \"foo\") + (\"bar\" + y) => (x + \"foobar\") + y\n                if (self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.is_string(compressor)\n                    && self.left.right instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_Binary, self.left, {\n                            operator: \"+\",\n                            left: self.left.left,\n                            right: make_node(AST_String, self.left.right, {\n                                value: \"\" + self.left.right.getValue() + self.right.left.getValue(),\n                                start: self.left.right.start,\n                                end: self.right.left.end\n                            })\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // a + -b => a - b\n                if (self.right instanceof AST_UnaryPrefix\n                    && self.right.operator == \"-\"\n                    && self.left.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.left,\n                        right: self.right.expression\n                    });\n                    break;\n                }\n                // -a + b => b - a\n                if (self.left instanceof AST_UnaryPrefix\n                    && self.left.operator == \"-\"\n                    && reversible()\n                    && self.right.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.right,\n                        right: self.left.expression\n                    });\n                    break;\n                }\n              case \"*\":\n                associative = compressor.option(\"unsafe_math\");\n              case \"&\":\n              case \"|\":\n              case \"^\":\n                // a + +b => +b + a\n                if (self.left.is_number(compressor)\n                    && self.right.is_number(compressor)\n                    && reversible()\n                    && !(self.left instanceof AST_Binary\n                        && self.left.operator != self.operator\n                        && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    var reversed = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: self.right,\n                        right: self.left\n                    });\n                    if (self.right instanceof AST_Constant\n                        && !(self.left instanceof AST_Constant)) {\n                        self = best_of(compressor, reversed, self);\n                    } else {\n                        self = best_of(compressor, self, reversed);\n                    }\n                }\n                if (associative && self.is_number(compressor)) {\n                    // a + (b + c) => (a + b) + c\n                    if (self.right instanceof AST_Binary\n                        && self.right.operator == self.operator) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: self.left,\n                                right: self.right.left,\n                                start: self.left.start,\n                                end: self.right.left.end\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                    // (n + 2) + 3 => 5 + n\n                    // (2 * n) * 3 => 6 + n\n                    if (self.right instanceof AST_Constant\n                        && self.left instanceof AST_Binary\n                        && self.left.operator == self.operator) {\n                        if (self.left.left instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.left,\n                                    right: self.right,\n                                    start: self.left.left.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.right\n                            });\n                        } else if (self.left.right instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right,\n                                    start: self.left.right.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.left\n                            });\n                        }\n                    }\n                    // (a | 1) | (2 | d) => (3 | a) | b\n                    if (self.left instanceof AST_Binary\n                        && self.left.operator == self.operator\n                        && self.left.right instanceof AST_Constant\n                        && self.right instanceof AST_Binary\n                        && self.right.operator == self.operator\n                        && self.right.left instanceof AST_Constant) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right.left,\n                                    start: self.left.right.start,\n                                    end: self.right.left.end\n                                }),\n                                right: self.left.left\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                }\n            }\n        }\n        // x && (y && z)  ==>  x && y && z\n        // x || (y || z)  ==>  x || y || z\n        // x + (\"y\" + z)  ==>  x + \"y\" + z\n        // \"x\" + (y + \"z\")==>  \"x\" + y + \"z\"\n        if (self.right instanceof AST_Binary\n            && self.right.operator == self.operator\n            && (lazy_op(self.operator)\n                || (self.operator == \"+\"\n                    && (self.right.left.is_string(compressor)\n                        || (self.left.is_string(compressor)\n                            && self.right.right.is_string(compressor))))))\n        {\n            self.left = make_node(AST_Binary, self.left, {\n                operator : self.operator,\n                left     : self.left,\n                right    : self.right.left\n            });\n            self.right = self.right.right;\n            return self.transform(compressor);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    function recursive_ref(compressor, def) {\n        var node;\n        for (var i = 0; node = compressor.parent(i); i++) {\n            if (node instanceof AST_Lambda) {\n                var name = node.name;\n                if (name && name.definition() === def) break;\n            }\n        }\n        return node;\n    }\n\n    OPT(AST_SymbolRef, function(self, compressor){\n        var def = self.resolve_defines(compressor);\n        if (def) {\n            return def.optimize(compressor);\n        }\n        // testing against !self.scope.uses_with first is an optimization\n        if (!compressor.option(\"ie8\")\n            && is_undeclared_ref(self)\n            && (!self.scope.uses_with || !compressor.find_parent(AST_With))) {\n            switch (self.name) {\n              case \"undefined\":\n                return make_node(AST_Undefined, self).optimize(compressor);\n              case \"NaN\":\n                return make_node(AST_NaN, self).optimize(compressor);\n              case \"Infinity\":\n                return make_node(AST_Infinity, self).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"reduce_vars\")\n            && is_lhs(self, compressor.parent()) !== self) {\n            var d = self.definition();\n            var fixed = self.fixed_value();\n            if (fixed instanceof AST_Defun) {\n                d.fixed = fixed = make_node(AST_Function, fixed, fixed);\n            }\n            if (d.single_use && fixed instanceof AST_Function) {\n                if (d.scope !== self.scope\n                    && (!compressor.option(\"reduce_funcs\")\n                        || d.escaped\n                        || fixed.inlined)) {\n                    d.single_use = false;\n                } else if (recursive_ref(compressor, d)) {\n                    d.single_use = false;\n                } else if (d.scope !== self.scope || d.orig[0] instanceof AST_SymbolFunarg) {\n                    d.single_use = fixed.is_constant_expression(self.scope);\n                    if (d.single_use == \"f\") {\n                        var scope = self.scope;\n                        do {\n                            if (scope instanceof AST_Defun || scope instanceof AST_Function) {\n                                scope.inlined = true;\n                            }\n                        } while (scope = scope.parent_scope);\n                    }\n                }\n            }\n            if (d.single_use && fixed) {\n                var value = fixed.optimize(compressor);\n                return value === fixed ? fixed.clone(true) : value;\n            }\n            if (fixed && d.should_replace === undefined) {\n                var init;\n                if (fixed instanceof AST_This) {\n                    if (!(d.orig[0] instanceof AST_SymbolFunarg)\n                        && all(d.references, function(ref) {\n                            return d.scope === ref.scope;\n                        })) {\n                        init = fixed;\n                    }\n                } else {\n                    var ev = fixed.evaluate(compressor);\n                    if (ev !== fixed && (compressor.option(\"unsafe_regexp\") || !(ev instanceof RegExp))) {\n                        init = make_node_from_constant(ev, fixed);\n                    }\n                }\n                if (init) {\n                    var value_length = init.optimize(compressor).print_to_string().length;\n                    var fn;\n                    if (has_symbol_ref(fixed)) {\n                        fn = function() {\n                            var result = init.optimize(compressor);\n                            return result === init ? result.clone(true) : result;\n                        };\n                    } else {\n                        value_length = Math.min(value_length, fixed.print_to_string().length);\n                        fn = function() {\n                            var result = best_of_expression(init.optimize(compressor), fixed);\n                            return result === init || result === fixed ? result.clone(true) : result;\n                        };\n                    }\n                    var name_length = d.name.length;\n                    var overhead = 0;\n                    if (compressor.option(\"unused\") && !compressor.exposed(d)) {\n                        overhead = (name_length + 2 + value_length) / d.references.length;\n                    }\n                    d.should_replace = value_length <= name_length + overhead ? fn : false;\n                } else {\n                    d.should_replace = false;\n                }\n            }\n            if (d.should_replace) {\n                return d.should_replace();\n            }\n        }\n        return self;\n\n        function has_symbol_ref(value) {\n            var found;\n            value.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_SymbolRef) found = true;\n                if (found) return true;\n            }));\n            return found;\n        }\n    });\n\n    function is_atomic(lhs, self) {\n        return lhs instanceof AST_SymbolRef || lhs.TYPE === self.TYPE;\n    }\n\n    OPT(AST_Undefined, function(self, compressor){\n        if (compressor.option(\"unsafe\")) {\n            var undef = find_variable(compressor, \"undefined\");\n            if (undef) {\n                var ref = make_node(AST_SymbolRef, self, {\n                    name   : \"undefined\",\n                    scope  : undef.scope,\n                    thedef : undef\n                });\n                ref.is_undefined = true;\n                return ref;\n            }\n        }\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        return make_node(AST_UnaryPrefix, self, {\n            operator: \"void\",\n            expression: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    OPT(AST_Infinity, function(self, compressor){\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        if (compressor.option(\"keep_infinity\")\n            && !(lhs && !is_atomic(lhs, self))\n            && !find_variable(compressor, \"Infinity\"))\n            return self;\n        return make_node(AST_Binary, self, {\n            operator: \"/\",\n            left: make_node(AST_Number, self, {\n                value: 1\n            }),\n            right: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    OPT(AST_NaN, function(self, compressor){\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && !is_atomic(lhs, self)\n            || find_variable(compressor, \"NaN\")) {\n            return make_node(AST_Binary, self, {\n                operator: \"/\",\n                left: make_node(AST_Number, self, {\n                    value: 0\n                }),\n                right: make_node(AST_Number, self, {\n                    value: 0\n                })\n            });\n        }\n        return self;\n    });\n\n    var ASSIGN_OPS = [ '+', '-', '/', '*', '%', '>>', '<<', '>>>', '|', '^', '&' ];\n    var ASSIGN_OPS_COMMUTATIVE = [ '*', '|', '^', '&' ];\n    OPT(AST_Assign, function(self, compressor){\n        self = self.lift_sequences(compressor);\n        if (self.operator == \"=\" && self.left instanceof AST_SymbolRef && self.right instanceof AST_Binary) {\n            // x = expr1 OP expr2\n            if (self.right.left instanceof AST_SymbolRef\n                && self.right.left.name == self.left.name\n                && member(self.right.operator, ASSIGN_OPS)) {\n                // x = x - 2  --->  x -= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.right;\n            }\n            else if (self.right.right instanceof AST_SymbolRef\n                && self.right.right.name == self.left.name\n                && member(self.right.operator, ASSIGN_OPS_COMMUTATIVE)\n                && !self.right.left.has_side_effects(compressor)) {\n                // x = 2 & x  --->  x &= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.left;\n            }\n        }\n        return self;\n    });\n\n    OPT(AST_Conditional, function(self, compressor){\n        if (!compressor.option(\"conditionals\")) return self;\n        // This looks like lift_sequences(), should probably be under \"sequences\"\n        if (self.condition instanceof AST_Sequence) {\n            var expressions = self.condition.expressions.slice();\n            self.condition = expressions.pop();\n            expressions.push(self);\n            return make_sequence(self, expressions);\n        }\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), self, self.consequent);\n            } else {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), self, self.alternative);\n            }\n        }\n        var negated = cond.negate(compressor, first_in_statement(compressor));\n        if (best_of(compressor, cond, negated) === negated) {\n            self = make_node(AST_Conditional, self, {\n                condition: negated,\n                consequent: self.alternative,\n                alternative: self.consequent\n            });\n        }\n        var condition = self.condition;\n        var consequent = self.consequent;\n        var alternative = self.alternative;\n        // x?x:y --> x||y\n        if (condition instanceof AST_SymbolRef\n            && consequent instanceof AST_SymbolRef\n            && condition.definition() === consequent.definition()) {\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: condition,\n                right: alternative\n            });\n        }\n        // if (foo) exp = something; else exp = something_else;\n        //                   |\n        //                   v\n        // exp = foo ? something : something_else;\n        if (consequent instanceof AST_Assign\n            && alternative instanceof AST_Assign\n            && consequent.operator == alternative.operator\n            && consequent.left.equivalent_to(alternative.left)\n            && (!self.condition.has_side_effects(compressor)\n                || consequent.operator == \"=\"\n                    && !consequent.left.has_side_effects(compressor))) {\n            return make_node(AST_Assign, self, {\n                operator: consequent.operator,\n                left: consequent.left,\n                right: make_node(AST_Conditional, self, {\n                    condition: self.condition,\n                    consequent: consequent.right,\n                    alternative: alternative.right\n                })\n            });\n        }\n        // x ? y(a) : y(b) --> y(x ? a : b)\n        if (consequent instanceof AST_Call\n            && alternative.TYPE === consequent.TYPE\n            && consequent.args.length == 1\n            && alternative.args.length == 1\n            && consequent.expression.equivalent_to(alternative.expression)\n            && !consequent.expression.has_side_effects(compressor)) {\n            consequent.args[0] = make_node(AST_Conditional, self, {\n                condition: self.condition,\n                consequent: consequent.args[0],\n                alternative: alternative.args[0]\n            });\n            return consequent;\n        }\n        // x?y?z:a:a --> x&&y?z:a\n        if (consequent instanceof AST_Conditional\n            && consequent.alternative.equivalent_to(alternative)) {\n            return make_node(AST_Conditional, self, {\n                condition: make_node(AST_Binary, self, {\n                    left: self.condition,\n                    operator: \"&&\",\n                    right: consequent.condition\n                }),\n                consequent: consequent.consequent,\n                alternative: alternative\n            });\n        }\n        // x ? y : y --> x, y\n        if (consequent.equivalent_to(alternative)) {\n            return make_sequence(self, [\n                self.condition,\n                consequent\n            ]).optimize(compressor);\n        }\n\n        if (is_true(self.consequent)) {\n            if (is_false(self.alternative)) {\n                // c ? true : false ---> !!c\n                return booleanize(self.condition);\n            }\n            // c ? true : x ---> !!c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition),\n                right: self.alternative\n            });\n        }\n        if (is_false(self.consequent)) {\n            if (is_true(self.alternative)) {\n                // c ? false : true ---> !c\n                return booleanize(self.condition.negate(compressor));\n            }\n            // c ? false : x ---> !c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.alternative\n            });\n        }\n        if (is_true(self.alternative)) {\n            // c ? x : true ---> !c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.consequent\n            });\n        }\n        if (is_false(self.alternative)) {\n            // c ? x : false ---> !!c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition),\n                right: self.consequent\n            });\n        }\n\n        return self;\n\n        function booleanize(node) {\n            if (node.is_boolean()) return node;\n            // !!expression\n            return make_node(AST_UnaryPrefix, node, {\n                operator: \"!\",\n                expression: node.negate(compressor)\n            });\n        }\n\n        // AST_True or !0\n        function is_true(node) {\n            return node instanceof AST_True\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && !node.expression.value);\n        }\n        // AST_False or !1\n        function is_false(node) {\n            return node instanceof AST_False\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && !!node.expression.value);\n        }\n    });\n\n    OPT(AST_Boolean, function(self, compressor){\n        if (compressor.option(\"booleans\")) {\n            var p = compressor.parent();\n            if (p instanceof AST_Binary && (p.operator == \"==\"\n                                            || p.operator == \"!=\")) {\n                compressor.warn(\"Non-strict equality against boolean: {operator} {value} [{file}:{line},{col}]\", {\n                    operator : p.operator,\n                    value    : self.value,\n                    file     : p.start.file,\n                    line     : p.start.line,\n                    col      : p.start.col,\n                });\n                return make_node(AST_Number, self, {\n                    value: +self.value\n                });\n            }\n            return make_node(AST_UnaryPrefix, self, {\n                operator: \"!\",\n                expression: make_node(AST_Number, self, {\n                    value: 1 - self.value\n                })\n            });\n        }\n        return self;\n    });\n\n    OPT(AST_Sub, function(self, compressor){\n        var expr = self.expression;\n        var prop = self.property;\n        if (compressor.option(\"properties\")) {\n            var key = prop.evaluate(compressor);\n            if (key !== prop) {\n                if (typeof key == \"string\") {\n                    if (key == \"undefined\") {\n                        key = undefined;\n                    } else {\n                        var value = parseFloat(key);\n                        if (value.toString() == key) {\n                            key = value;\n                        }\n                    }\n                }\n                prop = self.property = best_of_expression(prop, make_node_from_constant(key, prop).transform(compressor));\n                var property = \"\" + key;\n                if (is_identifier_string(property)\n                    && property.length <= prop.print_to_string().length + 1) {\n                    return make_node(AST_Dot, self, {\n                        expression: expr,\n                        property: property\n                    }).optimize(compressor);\n                }\n            }\n        }\n        if (is_lhs(self, compressor.parent())) return self;\n        if (key !== prop) {\n            var sub = self.flatten_object(property, compressor);\n            if (sub) {\n                expr = self.expression = sub.expression;\n                prop = self.property = sub.property;\n            }\n        }\n        if (compressor.option(\"properties\") && compressor.option(\"side_effects\")\n            && prop instanceof AST_Number && expr instanceof AST_Array) {\n            var index = prop.getValue();\n            var elements = expr.elements;\n            if (index in elements) {\n                var flatten = true;\n                var values = [];\n                for (var i = elements.length; --i > index;) {\n                    var value = elements[i].drop_side_effect_free(compressor);\n                    if (value) {\n                        values.unshift(value);\n                        if (flatten && value.has_side_effects(compressor)) flatten = false;\n                    }\n                }\n                var retValue = elements[index];\n                retValue = retValue instanceof AST_Hole ? make_node(AST_Undefined, retValue) : retValue;\n                if (!flatten) values.unshift(retValue);\n                while (--i >= 0) {\n                    var value = elements[i].drop_side_effect_free(compressor);\n                    if (value) values.unshift(value);\n                    else index--;\n                }\n                if (flatten) {\n                    values.push(retValue);\n                    return make_sequence(self, values).optimize(compressor);\n                } else return make_node(AST_Sub, self, {\n                    expression: make_node(AST_Array, expr, {\n                        elements: values\n                    }),\n                    property: make_node(AST_Number, prop, {\n                        value: index\n                    })\n                });\n            }\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    AST_Lambda.DEFMETHOD(\"contains_this\", function() {\n        var result;\n        var self = this;\n        self.walk(new TreeWalker(function(node) {\n            if (result) return true;\n            if (node instanceof AST_This) return result = true;\n            if (node !== self && node instanceof AST_Scope) return true;\n        }));\n        return result;\n    });\n\n    AST_PropAccess.DEFMETHOD(\"flatten_object\", function(key, compressor) {\n        if (!compressor.option(\"properties\")) return;\n        var expr = this.expression;\n        if (expr instanceof AST_Object) {\n            var props = expr.properties;\n            for (var i = props.length; --i >= 0;) {\n                var prop = props[i];\n                if (\"\" + prop.key == key) {\n                    if (!all(props, function(prop) {\n                        return prop instanceof AST_ObjectKeyVal;\n                    })) break;\n                    var value = prop.value;\n                    if (value instanceof AST_Function\n                        && !(compressor.parent() instanceof AST_New)\n                        && value.contains_this()) break;\n                    return make_node(AST_Sub, this, {\n                        expression: make_node(AST_Array, expr, {\n                            elements: props.map(function(prop) {\n                                return prop.value;\n                            })\n                        }),\n                        property: make_node(AST_Number, this, {\n                            value: i\n                        })\n                    });\n                }\n            }\n        }\n    });\n\n    OPT(AST_Dot, function(self, compressor){\n        var def = self.resolve_defines(compressor);\n        if (def) {\n            return def.optimize(compressor);\n        }\n        if (compressor.option(\"unsafe_proto\")\n            && self.expression instanceof AST_Dot\n            && self.expression.property == \"prototype\") {\n            var exp = self.expression.expression;\n            if (is_undeclared_ref(exp)) switch (exp.name) {\n              case \"Array\":\n                self.expression = make_node(AST_Array, self.expression, {\n                    elements: []\n                });\n                break;\n              case \"Object\":\n                self.expression = make_node(AST_Object, self.expression, {\n                    properties: []\n                });\n                break;\n              case \"String\":\n                self.expression = make_node(AST_String, self.expression, {\n                    value: \"\"\n                });\n                break;\n            }\n        }\n        if (is_lhs(self, compressor.parent())) return self;\n        var sub = self.flatten_object(self.property, compressor);\n        if (sub) return sub.optimize(compressor);\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    function literals_in_boolean_context(self, compressor) {\n        if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n            return best_of(compressor, self, make_sequence(self, [\n                self,\n                make_node(AST_True, self)\n            ]).optimize(compressor));\n        }\n        return self;\n    };\n    OPT(AST_Array, literals_in_boolean_context);\n    OPT(AST_Object, literals_in_boolean_context);\n    OPT(AST_RegExp, literals_in_boolean_context);\n\n    OPT(AST_Return, function(self, compressor){\n        if (self.value && is_undefined(self.value, compressor)) {\n            self.value = null;\n        }\n        return self;\n    });\n\n    OPT(AST_VarDef, function(self, compressor){\n        var defines = compressor.option(\"global_defs\");\n        if (defines && HOP(defines, self.name.name)) {\n            compressor.warn('global_defs ' + self.name.name + ' redefined [{file}:{line},{col}]', self.start);\n        }\n        return self;\n    });\n\n})();\n"]}