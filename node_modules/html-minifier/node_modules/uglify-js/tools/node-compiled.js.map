{"version":3,"sources":["node.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,QAAQ,IAAR,CAAT;;AAEA,IAAI,WAAW,OAAf;AACA,IAAI,QAAQ,SAAS,KAAT,GAAiB,CACzB,iBADyB,EAEzB,eAFyB,EAGzB,iBAHyB,EAIzB,qBAJyB,EAKzB,iBALyB,EAMzB,kBANyB,EAOzB,oBAPyB,EAQzB,qBARyB,EASzB,uBATyB,EAUzB,sBAVyB,EAWzB,kBAXyB,EAYzB,cAZyB,EAa3B,GAb2B,CAavB,UAAS,IAAT,EAAc;AAChB,WAAO,QAAQ,OAAR,CAAgB,IAAhB,CAAP;AACH,CAf4B,CAA7B;;AAiBA,IAAI,QAAJ,CAAa,eAAb,EAA8B,SAA9B,EAAyC,YAAW;AAChD,QAAI,OAAO,MAAM,GAAN,CAAU,UAAS,IAAT,EAAe;AAChC,eAAO,GAAG,YAAH,CAAgB,IAAhB,EAAsB,MAAtB,CAAP;AACH,KAFU,CAAX;AAGA,SAAK,IAAL,CAAU,4BAA4B,aAAa,QAAb,EAAtC;AACA,WAAO,KAAK,IAAL,CAAU,MAAV,CAAP;AACH,CANwC,EAAzC,EAOI,QAAQ,YAAR,CAPJ,EAQI,QARJ;;AAWA,SAAS,YAAT,GAAwB;AACpB,QAAI,MAAM,aAAa,EAAE,UAAU,IAAZ,EAAb,CAAV;AACA,aAAS,MAAT,CAAgB,IAAhB,EAAsB;AAClB,YAAI,KAAJ,CAAU,SAAS,KAAK,IAAxB;AACA,YAAI,QAAQ,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAS,IAAT,EAAc;AAC7C,mBAAO,CAAC,MAAM,IAAN,CAAW,IAAX,CAAR;AACH,SAFW,CAAZ;AAGA,YAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AAClB,gBAAI,KAAJ;AACA,gBAAI,WAAJ,CAAgB,YAAU;AACtB,sBAAM,OAAN,CAAc,UAAS,IAAT,EAAe,CAAf,EAAiB;AAC3B,wBAAI,CAAJ,EAAO,IAAI,KAAJ;AACP,wBAAI,KAAJ,CAAU,IAAV;AACH,iBAHD;AAIH,aALD;AAMH;AACD,YAAI,KAAK,aAAT,EAAwB;AACpB,gBAAI,KAAJ;AACA,gBAAI,YAAJ,CAAiB,KAAK,aAAtB;AACH;AACD,YAAI,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,gBAAI,KAAJ;AACA,gBAAI,UAAJ,CAAe,YAAU;AACrB,qBAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAS,IAAT,EAAe,CAAf,EAAiB;AACrC,wBAAI,MAAJ;AACA,2BAAO,IAAP;AACA,wBAAI,OAAJ;AACH,iBAJD;AAKH,aAND;AAOH;AACJ;AACD,WAAO,QAAP;AACA,WAAO,MAAM,IAAb;AACH;;AAED,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC5B,QAAI,SAAS,SAAS,MAAT,CAAgB,EAAhB,EAAoB,OAApB,CAAb;AACA,WAAO,OAAO,KAAP,IAAgB,OAAO,KAAP,CAAa,IAApC;AACH;;AAED,SAAS,eAAT,GAA2B,YAAW;AAClC,QAAI,OAAO,EAAX;AACA,WAAO,IAAP,CAAY,cAAc,EAAE,GAAG,CAAL,EAAd,CAAZ,EAAqC,OAArC,CAA6C,UAAS,SAAT,EAAoB;AAC7D,YAAI,UAAU,EAAd;AACA,gBAAQ,SAAR,IAAqB,EAAE,GAAG,CAAL,EAArB;AACA,YAAI,UAAU,cAAc,OAAd,CAAd,EAAsC;AAClC,iBAAK,SAAL,IAAkB,OAAlB;AACH;AACJ,KAND;AAOA,WAAO,IAAP;AACH,CAVD","file":"node-compiled.js","sourcesContent":["var fs = require(\"fs\");\n\nvar UglifyJS = exports;\nvar FILES = UglifyJS.FILES = [\n    \"../lib/utils.js\",\n    \"../lib/ast.js\",\n    \"../lib/parse.js\",\n    \"../lib/transform.js\",\n    \"../lib/scope.js\",\n    \"../lib/output.js\",\n    \"../lib/compress.js\",\n    \"../lib/sourcemap.js\",\n    \"../lib/mozilla-ast.js\",\n    \"../lib/propmangle.js\",\n    \"../lib/minify.js\",\n    \"./exports.js\",\n].map(function(file){\n    return require.resolve(file);\n});\n\nnew Function(\"MOZ_SourceMap\", \"exports\", function() {\n    var code = FILES.map(function(file) {\n        return fs.readFileSync(file, \"utf8\");\n    });\n    code.push(\"exports.describe_ast = \" + describe_ast.toString());\n    return code.join(\"\\n\\n\");\n}())(\n    require(\"source-map\"),\n    UglifyJS\n);\n\nfunction describe_ast() {\n    var out = OutputStream({ beautify: true });\n    function doitem(ctor) {\n        out.print(\"AST_\" + ctor.TYPE);\n        var props = ctor.SELF_PROPS.filter(function(prop){\n            return !/^\\$/.test(prop);\n        });\n        if (props.length > 0) {\n            out.space();\n            out.with_parens(function(){\n                props.forEach(function(prop, i){\n                    if (i) out.space();\n                    out.print(prop);\n                });\n            });\n        }\n        if (ctor.documentation) {\n            out.space();\n            out.print_string(ctor.documentation);\n        }\n        if (ctor.SUBCLASSES.length > 0) {\n            out.space();\n            out.with_block(function(){\n                ctor.SUBCLASSES.forEach(function(ctor, i){\n                    out.indent();\n                    doitem(ctor);\n                    out.newline();\n                });\n            });\n        }\n    };\n    doitem(AST_Node);\n    return out + \"\\n\";\n}\n\nfunction infer_options(options) {\n    var result = UglifyJS.minify(\"\", options);\n    return result.error && result.error.defs;\n}\n\nUglifyJS.default_options = function() {\n    var defs = {};\n    Object.keys(infer_options({ 0: 0 })).forEach(function(component) {\n        var options = {};\n        options[component] = { 0: 0 };\n        if (options = infer_options(options)) {\n            defs[component] = options;\n        }\n    });\n    return defs;\n};\n"]}