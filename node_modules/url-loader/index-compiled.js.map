{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,cAAc,QAAQ,cAAR,CAAlB;AACA,IAAI,kBAAkB,QAAQ,cAAR,CAAtB;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,OAAO,OAAP,GAAiB,UAAS,OAAT,EAAkB;AACjC,OAAK,SAAL,IAAkB,KAAK,SAAL,EAAlB;;AAEA,MAAI,UAAW,YAAY,UAAZ,CAAuB,IAAvB,KAAgC,EAA/C;;AAEA,kBAAgB,QAAQ,WAAR,CAAhB,EAAsC,OAAtC,EAA+C,YAA/C;AACA;AACA,MAAI,QAAQ,QAAQ,KAAR,IAAkB,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,GAA7B,IAAoC,KAAK,OAAL,CAAa,GAAb,CAAiB,YAAnF;;AAEA,MAAG,KAAH,EAAU;AACR,YAAQ,SAAS,KAAT,EAAgB,EAAhB,CAAR;AACD;;AAED,MAAI,WAAW,QAAQ,QAAR,IAAoB,QAAQ,QAA5B,IAAwC,KAAK,MAAL,CAAY,KAAK,YAAjB,CAAvD;;AAEA;AACA,MAAG,CAAC,KAAD,IAAU,QAAQ,MAAR,GAAiB,KAA9B,EAAqC;AACnC,QAAG,OAAO,OAAP,KAAmB,QAAtB,EAAgC;AAC9B,gBAAU,IAAI,MAAJ,CAAW,OAAX,CAAV;AACD;;AAED,WAAO,sBAAsB,KAAK,SAAL,CAAe,WAAW,WAAW,WAAW,GAAtB,GAA4B,EAAvC,IAA6C,SAA7C,GAAyD,QAAQ,QAAR,CAAiB,QAAjB,CAAxE,CAA7B;AACD;;AAED,MAAI,WAAW,QAAQ,QAAR,IAAoB,aAAnC;AACA,MAAI,iBAAiB,QAAQ,QAAR,CAArB;;AAEA,SAAO,eAAe,IAAf,CAAoB,IAApB,EAA0B,OAA1B,CAAP;AACD,CA5BD;;AA8BA,OAAO,OAAP,CAAe,GAAf,GAAqB,IAArB","file":"index-compiled.js","sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\nvar loaderUtils = require(\"loader-utils\");\nvar validateOptions = require(\"schema-utils\");\n\nvar mime = require(\"mime\");\n\nmodule.exports = function(content) {\n  this.cacheable && this.cacheable();\n\n  var options =  loaderUtils.getOptions(this) || {};\n\n  validateOptions(require(\"./options\"), options, \"URL Loader\")\n  // Options `dataUrlLimit` is backward compatibility with first loader versions\n  var limit = options.limit || (this.options && this.options.url && this.options.url.dataUrlLimit);\n\n  if(limit) {\n    limit = parseInt(limit, 10);\n  }\n\n  var mimetype = options.mimetype || options.minetype || mime.lookup(this.resourcePath);\n\n  // No limits or limit more than content length\n  if(!limit || content.length < limit) {\n    if(typeof content === \"string\") {\n      content = new Buffer(content);\n    }\n\n    return \"module.exports = \" + JSON.stringify(\"data:\" + (mimetype ? mimetype + \";\" : \"\") + \"base64,\" + content.toString(\"base64\"));\n  }\n\n  var fallback = options.fallback || \"file-loader\";\n  var fallbackLoader = require(fallback);\n\n  return fallbackLoader.call(this, content);\n}\n\nmodule.exports.raw = true;\n"]}