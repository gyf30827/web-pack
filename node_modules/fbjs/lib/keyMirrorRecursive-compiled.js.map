{"version":3,"sources":["keyMirrorRecursive.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAI,YAAY,QAAQ,aAAR,CAAhB;;AAEA;;;;;;;;;;;;;;;;AAgBA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC,MAAjC,EAAyC;AACvC,SAAO,2BAA2B,GAA3B,EAAgC,MAAhC,CAAP;AACD;;AAED,SAAS,0BAAT;AACA,UAAU,GADV;AAEA,WAAW,MAFX,EAEmB,UAAU;AAC3B,MAAI,MAAM,EAAV;AACA,MAAI,GAAJ;;AAEA,GAAC,SAAS,GAAT,CAAD,GAAiB,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,sDAAjB,CAAxC,GAAmH,UAAU,KAAV,CAApI,GAAuJ,KAAK,CAA5J;;AAEA,OAAK,GAAL,IAAY,GAAZ,EAAiB;AACf,QAAI,CAAC,IAAI,cAAJ,CAAmB,GAAnB,CAAL,EAA8B;AAC5B;AACD;;AAED,QAAI,MAAM,IAAI,GAAJ,CAAV;;AAEA,QAAI,YAAY,SAAS,SAAS,GAAT,GAAe,GAAxB,GAA8B,GAA9C;;AAEA,QAAI,SAAS,GAAT,CAAJ,EAAmB;AACjB,YAAM,2BAA2B,GAA3B,EAAgC,SAAhC,CAAN;AACD,KAFD,MAEO;AACL,YAAM,SAAN;AACD;;AAED,QAAI,GAAJ,IAAW,GAAX;AACD;AACD,SAAO,GAAP;AACD;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAAuB,WAAW;AAChC,SAAO,eAAe,MAAf,IAAyB,CAAC,MAAM,OAAN,CAAc,GAAd,CAAjC;AACD;;AAED,OAAO,OAAP,GAAiB,kBAAjB","file":"keyMirrorRecursive-compiled.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  weak\n * @typechecks\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * Constructs an enumeration with keys equal to their value. If the value is an\n * object, the method is run recursively, including the parent key as a suffix.\n * An optional prefix can be provided that will be prepended to each value.\n *\n * For example:\n *\n *   var ACTIONS = keyMirror({FOO: null, BAR: { BAZ: null, BOZ: null }}});\n *   ACTIONS.BAR.BAZ = 'BAR.BAZ';\n *\n *   Input:  {key1: null, key2: { nested1: null, nested2: null }}}\n *   Output: {key1: key1, key2: { nested1: nested1, nested2: nested2 }}}\n *\n *   var CONSTANTS = keyMirror({FOO: {BAR: null}}, 'NameSpace');\n *   console.log(CONSTANTS.FOO.BAR); // NameSpace.FOO.BAR\n */\nfunction keyMirrorRecursive(obj, prefix) {\n  return keyMirrorRecursiveInternal(obj, prefix);\n}\n\nfunction keyMirrorRecursiveInternal(\n/*object*/obj,\n/*?string*/prefix) /*object*/{\n  var ret = {};\n  var key;\n\n  !isObject(obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirrorRecursive(...): Argument must be an object.') : invariant(false) : void 0;\n\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n\n    var val = obj[key];\n\n    var newPrefix = prefix ? prefix + '.' + key : key;\n\n    if (isObject(val)) {\n      val = keyMirrorRecursiveInternal(val, newPrefix);\n    } else {\n      val = newPrefix;\n    }\n\n    ret[key] = val;\n  }\n  return ret;\n}\n\nfunction isObject(obj) /*boolean*/{\n  return obj instanceof Object && !Array.isArray(obj);\n}\n\nmodule.exports = keyMirrorRecursive;"]}