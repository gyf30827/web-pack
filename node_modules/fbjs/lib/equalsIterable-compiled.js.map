{"version":3,"sources":["equalsIterable.js"],"names":[],"mappings":"AAAA;;;;;;;;;AASA;;AAEA,IAAI,YAAY,QAAQ,aAAR,CAAhB;;AAEA;;;;AAIA,SAAS,cAAT,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC,QAAlC,EAA4C;AAC1C,MAAI,QAAQ,GAAZ,EAAiB;AACf,WAAO,IAAP;AACD;;AAED;AACA,MAAI,UAAU,aAAa,GAAb,CAAd;AACA,MAAI,UAAU,aAAa,GAAb,CAAd;AACA,MAAI,WAAW,IAAX,IAAmB,WAAW,IAA9B,IAAsC,YAAY,OAAtD,EAA+D;AAC7D,WAAO,KAAP;AACD;;AAED;AACA;AACA,MAAI,cAAc,UAAU,GAAV,CAAlB;AACA,MAAI,UAAU,YAAY,IAAZ,EAAd;AACA,MAAI,cAAc,UAAU,GAAV,CAAlB;AACA,MAAI,UAAU,YAAY,IAAZ,EAAd;AACA,MAAI,eAAe,YAAY,iBAA/B;AACA,SAAO,EAAE,QAAQ,IAAR,IAAgB,QAAQ,IAA1B,CAAP,EAAwC;AACtC,QAAI,CAAC,aAAa,QAAQ,KAArB,EAA4B,QAAQ,KAApC,CAAL,EAAiD;AAC/C,aAAO,KAAP;AACD;AACD,cAAU,YAAY,IAAZ,EAAV;AACA,cAAU,YAAY,IAAZ,EAAV;AACD;AACD,SAAO,QAAQ,IAAR,KAAiB,QAAQ,IAAhC;AACD;;AAED,SAAS,YAAT,CAAsB,CAAtB,EAAyB;AACvB,MAAI,KAAK,IAAT,EAAe;AACb,WAAO,IAAP;AACD;AACD,MAAI,OAAO,EAAE,IAAT,KAAkB,QAAtB,EAAgC;AAC9B,WAAO,EAAE,IAAT;AACD;AACD,MAAI,OAAO,EAAE,MAAT,KAAoB,QAAxB,EAAkC;AAChC,WAAO,EAAE,MAAT;AACD;AACD,SAAO,IAAP;AACD;;AAED,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,GAAhC,EAAqC;AACnC,SAAO,QAAQ,GAAf;AACD;;AAED,OAAO,OAAP,GAAiB,cAAjB","file":"equalsIterable-compiled.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar enumerate = require('./enumerate');\n\n/**\n * Checks if two iterables are equal. A custom areEqual function may be provided\n * as an optional third argument.\n */\nfunction equalsIterable(one, two, areEqual) {\n  if (one === two) {\n    return true;\n  }\n\n  // We might be able to short circuit by using the size or length fields.\n  var oneSize = maybeGetSize(one);\n  var twoSize = maybeGetSize(two);\n  if (oneSize != null && twoSize != null && oneSize !== twoSize) {\n    return false;\n  }\n\n  // Otherwise use the iterators to check equality. Here we cannot use for-of\n  // because we need to advance the iterators at the same time.\n  var oneIterator = enumerate(one);\n  var oneItem = oneIterator.next();\n  var twoIterator = enumerate(two);\n  var twoItem = twoIterator.next();\n  var safeAreEqual = areEqual || referenceEquality;\n  while (!(oneItem.done || twoItem.done)) {\n    if (!safeAreEqual(oneItem.value, twoItem.value)) {\n      return false;\n    }\n    oneItem = oneIterator.next();\n    twoItem = twoIterator.next();\n  }\n  return oneItem.done === twoItem.done;\n}\n\nfunction maybeGetSize(o) {\n  if (o == null) {\n    return null;\n  }\n  if (typeof o.size === 'number') {\n    return o.size;\n  }\n  if (typeof o.length === 'number') {\n    return o.length;\n  }\n  return null;\n}\n\nfunction referenceEquality(one, two) {\n  return one === two;\n}\n\nmodule.exports = equalsIterable;"]}