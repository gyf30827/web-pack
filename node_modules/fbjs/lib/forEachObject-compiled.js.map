{"version":3,"sources":["forEachObject.js"],"names":[],"mappings":"AAAA;;;;;;;;;AASA;;AAEA,IAAI,iBAAiB,OAAO,SAAP,CAAiB,cAAtC;;AAEA;;;;;;;;;;;;;;;;;;AAkBA,SAAS,aAAT,CAAuB,MAAvB,EAA+B,QAA/B,EAAyC,OAAzC,EAAkD;AAChD,OAAK,IAAI,IAAT,IAAiB,MAAjB,EAAyB;AACvB,QAAI,eAAe,IAAf,CAAoB,MAApB,EAA4B,IAA5B,CAAJ,EAAuC;AACrC,eAAS,IAAT,CAAc,OAAd,EAAuB,OAAO,IAAP,CAAvB,EAAqC,IAArC,EAA2C,MAA3C;AACD;AACF;AACF;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"forEachObject-compiled.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Executes the provided `callback` once for each enumerable own property in the\n * object. The `callback` is invoked with three arguments:\n *\n *  - the property value\n *  - the property name\n *  - the object being traversed\n *\n * Properties that are added after the call to `forEachObject` will not be\n * visited by `callback`. If the values of existing properties are changed, the\n * value passed to `callback` will be the value at the time `forEachObject`\n * visits them. Properties that are deleted before being visited are not\n * visited.\n *\n * @param {?object} object\n * @param {function} callback\n * @param {*} context\n */\nfunction forEachObject(object, callback, context) {\n  for (var name in object) {\n    if (hasOwnProperty.call(object, name)) {\n      callback.call(context, object[name], name, object);\n    }\n  }\n}\n\nmodule.exports = forEachObject;"]}