{"version":3,"sources":["partitionArray.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;;AAUA;;;;;;AAKA,SAAS,cAAT,CAAwB,KAAxB,EAA+B,SAA/B,EAA0C,OAA1C,EAAmD;AACjD,MAAI,QAAQ,EAAZ;AACA,MAAI,SAAS,EAAb;AACA,QAAM,OAAN,CAAc,UAAU,OAAV,EAAmB,KAAnB,EAA0B;AACtC,QAAI,UAAU,IAAV,CAAe,OAAf,EAAwB,OAAxB,EAAiC,KAAjC,EAAwC,KAAxC,CAAJ,EAAoD;AAClD,YAAM,IAAN,CAAW,OAAX;AACD,KAFD,MAEO;AACL,aAAO,IAAP,CAAY,OAAZ;AACD;AACF,GAND;AAOA,SAAO,CAAC,KAAD,EAAQ,MAAR,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,cAAjB","file":"partitionArray-compiled.js","sourcesContent":["\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/**\n * Partitions an array given a predicate. All elements satisfying the predicate\n * are part of the first returned array, and all elements that don't are in the\n * second.\n */\nfunction partitionArray(array, predicate, context) {\n  var first = [];\n  var second = [];\n  array.forEach(function (element, index) {\n    if (predicate.call(context, element, index, array)) {\n      first.push(element);\n    } else {\n      second.push(element);\n    }\n  });\n  return [first, second];\n}\n\nmodule.exports = partitionArray;"]}