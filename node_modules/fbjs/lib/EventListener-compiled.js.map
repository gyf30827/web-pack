{"version":3,"sources":["EventListener.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;AASA,IAAI,gBAAgB,QAAQ,iBAAR,CAApB;;AAEA;;;;AAIA,IAAI,gBAAgB;AAClB;;;;;;;;AAQA,UAAQ,SAAS,MAAT,CAAgB,MAAhB,EAAwB,SAAxB,EAAmC,QAAnC,EAA6C;AACnD,QAAI,OAAO,gBAAX,EAA6B;AAC3B,aAAO,gBAAP,CAAwB,SAAxB,EAAmC,QAAnC,EAA6C,KAA7C;AACA,aAAO;AACL,gBAAQ,SAAS,MAAT,GAAkB;AACxB,iBAAO,mBAAP,CAA2B,SAA3B,EAAsC,QAAtC,EAAgD,KAAhD;AACD;AAHI,OAAP;AAKD,KAPD,MAOO,IAAI,OAAO,WAAX,EAAwB;AAC7B,aAAO,WAAP,CAAmB,OAAO,SAA1B,EAAqC,QAArC;AACA,aAAO;AACL,gBAAQ,SAAS,MAAT,GAAkB;AACxB,iBAAO,WAAP,CAAmB,OAAO,SAA1B,EAAqC,QAArC;AACD;AAHI,OAAP;AAKD;AACF,GAzBiB;;AA2BlB;;;;;;;;AAQA,WAAS,SAAS,OAAT,CAAiB,MAAjB,EAAyB,SAAzB,EAAoC,QAApC,EAA8C;AACrD,QAAI,OAAO,gBAAX,EAA6B;AAC3B,aAAO,gBAAP,CAAwB,SAAxB,EAAmC,QAAnC,EAA6C,IAA7C;AACA,aAAO;AACL,gBAAQ,SAAS,MAAT,GAAkB;AACxB,iBAAO,mBAAP,CAA2B,SAA3B,EAAsC,QAAtC,EAAgD,IAAhD;AACD;AAHI,OAAP;AAKD,KAPD,MAOO;AACL,UAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,gBAAQ,KAAR,CAAc,iEAAiE,oEAAjE,GAAwI,+BAAtJ;AACD;AACD,aAAO;AACL,gBAAQ;AADH,OAAP;AAGD;AACF,GAnDiB;;AAqDlB,mBAAiB,SAAS,eAAT,GAA2B,CAAE;AArD5B,CAApB;;AAwDA,OAAO,OAAP,GAAiB,aAAjB","file":"EventListener-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function listen(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function remove() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function capture(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function registerDefault() {}\n};\n\nmodule.exports = EventListener;"]}