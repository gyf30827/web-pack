{"version":3,"sources":["createArrayFromMixed.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;AASA,IAAI,YAAY,QAAQ,aAAR,CAAhB;;AAEA;;;;;;;;;AASA,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AACpB,MAAI,SAAS,IAAI,MAAjB;;AAEA;AACA;AACA,IAAE,CAAC,MAAM,OAAN,CAAc,GAAd,CAAD,KAAwB,OAAO,GAAP,KAAe,QAAf,IAA2B,OAAO,GAAP,KAAe,UAAlE,CAAF,IAAmF,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,qCAAjB,CAAxC,GAAkG,UAAU,KAAV,CAArL,GAAwM,KAAK,CAA7M;;AAEA,IAAE,OAAO,MAAP,KAAkB,QAApB,IAAgC,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,yCAAjB,CAAxC,GAAsG,UAAU,KAAV,CAAtI,GAAyJ,KAAK,CAA9J;;AAEA,IAAE,WAAW,CAAX,IAAgB,SAAS,CAAT,IAAc,GAAhC,IAAuC,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,8CAAjB,CAAxC,GAA2G,UAAU,KAAV,CAAlJ,GAAqK,KAAK,CAA1K;;AAEA,IAAE,OAAO,IAAI,MAAX,KAAsB,UAAxB,IAAsC,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,UAAU,KAAV,EAAiB,4DAA4D,iDAA7E,CAAxC,GAA0K,UAAU,KAAV,CAAhN,GAAmO,KAAK,CAAxO;;AAEA;AACA;AACA;AACA,MAAI,IAAI,cAAR,EAAwB;AACtB,QAAI;AACF,aAAO,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,GAA3B,CAAP;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACD;AACF;;AAED;AACA;AACA,MAAI,MAAM,MAAM,MAAN,CAAV;AACA,OAAK,IAAI,KAAK,CAAd,EAAiB,KAAK,MAAtB,EAA8B,IAA9B,EAAoC;AAClC,QAAI,EAAJ,IAAU,IAAI,EAAJ,CAAV;AACD;AACD,SAAO,GAAP;AACD;;AAED;;;;;;;;;;;;;;;AAeA,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAC3B;AACE;AACA,KAAC,CAAC,GAAF;AACA;AACA,WAAO,GAAP,IAAc,QAAd,IAA0B,OAAO,GAAP,IAAc,UAFxC;AAGA;AACA,gBAAY,GAJZ;AAKA;AACA,MAAE,iBAAiB,GAAnB,CANA;AAOA;AACA;AACA,WAAO,IAAI,QAAX,IAAuB,QATvB;AAUA;AACA,UAAM,OAAN,CAAc,GAAd;AACA;AACA,gBAAY,GAFZ;AAGA;AACA,cAAU,GAfV;AAFF;AAmBD;;AAED;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAS,oBAAT,CAA8B,GAA9B,EAAmC;AACjC,MAAI,CAAC,eAAe,GAAf,CAAL,EAA0B;AACxB,WAAO,CAAC,GAAD,CAAP;AACD,GAFD,MAEO,IAAI,MAAM,OAAN,CAAc,GAAd,CAAJ,EAAwB;AAC7B,WAAO,IAAI,KAAJ,EAAP;AACD,GAFM,MAEA;AACL,WAAO,QAAQ,GAAR,CAAP;AACD;AACF;;AAED,OAAO,OAAP,GAAiB,oBAAjB","file":"createArrayFromMixed-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar invariant = require('./invariant');\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFromMixed.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\n  // in old versions of Safari).\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\n\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\n\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\n\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;"]}