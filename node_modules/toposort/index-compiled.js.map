{"version":3,"sources":["index.js"],"names":[],"mappings":";AACA;;;;;;;AAOA,OAAO,OAAP,GAAiB,UAAS,KAAT,EAAe;AAC9B,SAAO,SAAS,YAAY,KAAZ,CAAT,EAA6B,KAA7B,CAAP;AACD,CAFD;;AAIA,OAAO,OAAP,CAAe,KAAf,GAAuB,QAAvB;;AAEA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,KAAzB,EAAgC;AAC9B,MAAI,SAAS,MAAM,MAAnB;AAAA,MACI,SAAS,IAAI,KAAJ,CAAU,MAAV,CADb;AAAA,MAEI,UAAU,EAFd;AAAA,MAGI,IAAI,MAHR;;AAKA,SAAO,GAAP,EAAY;AACV,QAAI,CAAC,QAAQ,CAAR,CAAL,EAAiB,MAAM,MAAM,CAAN,CAAN,EAAgB,CAAhB,EAAmB,EAAnB;AAClB;;AAED,SAAO,MAAP;;AAEA,WAAS,KAAT,CAAe,IAAf,EAAqB,CAArB,EAAwB,YAAxB,EAAsC;AACpC,QAAG,aAAa,OAAb,CAAqB,IAArB,KAA8B,CAAjC,EAAoC;AAClC,YAAM,IAAI,KAAJ,CAAU,wBAAsB,KAAK,SAAL,CAAe,IAAf,CAAhC,CAAN;AACD;;AAED,QAAI,CAAC,CAAC,MAAM,OAAN,CAAc,IAAd,CAAN,EAA2B;AACzB,YAAM,IAAI,KAAJ,CAAU,iFAA+E,KAAK,SAAL,CAAe,IAAf,CAAzF,CAAN;AACD;;AAED,QAAI,QAAQ,CAAR,CAAJ,EAAgB;AAChB,YAAQ,CAAR,IAAa,IAAb;;AAEA;AACA,QAAI,WAAW,MAAM,MAAN,CAAa,UAAS,IAAT,EAAc;AACxC,aAAO,KAAK,CAAL,MAAY,IAAnB;AACD,KAFc,CAAf;AAGA,QAAI,IAAI,SAAS,MAAjB,EAAyB;AACvB,UAAI,QAAQ,aAAa,MAAb,CAAoB,IAApB,CAAZ;AACA,SAAG;AACD,YAAI,QAAQ,SAAS,EAAE,CAAX,EAAc,CAAd,CAAZ;AACA,cAAM,KAAN,EAAa,MAAM,OAAN,CAAc,KAAd,CAAb,EAAmC,KAAnC;AACD,OAHD,QAGS,CAHT;AAID;;AAED,WAAO,EAAE,MAAT,IAAmB,IAAnB;AACD;AACF;;AAED,SAAS,WAAT,CAAqB,GAArB,EAAyB;AACvB,MAAI,MAAM,EAAV;AACA,OAAK,IAAI,IAAI,CAAR,EAAW,MAAM,IAAI,MAA1B,EAAkC,IAAI,GAAtC,EAA2C,GAA3C,EAAgD;AAC9C,QAAI,OAAO,IAAI,CAAJ,CAAX;AACA,QAAI,IAAI,OAAJ,CAAY,KAAK,CAAL,CAAZ,IAAuB,CAA3B,EAA8B,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT;AAC9B,QAAI,IAAI,OAAJ,CAAY,KAAK,CAAL,CAAZ,IAAuB,CAA3B,EAA8B,IAAI,IAAJ,CAAS,KAAK,CAAL,CAAT;AAC/B;AACD,SAAO,GAAP;AACD","file":"index-compiled.js","sourcesContent":["\n/**\n * Topological sorting function\n *\n * @param {Array} edges\n * @returns {Array}\n */\n\nmodule.exports = function(edges){\n  return toposort(uniqueNodes(edges), edges)\n}\n\nmodule.exports.array = toposort\n\nfunction toposort(nodes, edges) {\n  var cursor = nodes.length\n    , sorted = new Array(cursor)\n    , visited = {}\n    , i = cursor\n\n  while (i--) {\n    if (!visited[i]) visit(nodes[i], i, [])\n  }\n\n  return sorted\n\n  function visit(node, i, predecessors) {\n    if(predecessors.indexOf(node) >= 0) {\n      throw new Error('Cyclic dependency: '+JSON.stringify(node))\n    }\n\n    if (!~nodes.indexOf(node)) {\n      throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: '+JSON.stringify(node))\n    }\n\n    if (visited[i]) return;\n    visited[i] = true\n\n    // outgoing edges\n    var outgoing = edges.filter(function(edge){\n      return edge[0] === node\n    })\n    if (i = outgoing.length) {\n      var preds = predecessors.concat(node)\n      do {\n        var child = outgoing[--i][1]\n        visit(child, nodes.indexOf(child), preds)\n      } while (i)\n    }\n\n    sorted[--cursor] = node\n  }\n}\n\nfunction uniqueNodes(arr){\n  var res = []\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var edge = arr[i]\n    if (res.indexOf(edge[0]) < 0) res.push(edge[0])\n    if (res.indexOf(edge[1]) < 0) res.push(edge[1])\n  }\n  return res\n}\n"]}