{"version":3,"sources":["build.js"],"names":[],"mappings":";;AAEA;;AAEA,MAAM,KAAK,QAAQ,IAAR,CAAX;AACA,MAAM,OAAO,QAAQ,MAAR,CAAb;AACA,MAAM,YAAY,QAAQ,YAAR,CAAlB;;AAEA,IAAI,KAAK,QAAQ,SAAR,CAAT;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA,MAAM,uBAAuB,GAA7B;;AAEA,MAAM,cAAc,EAApB;;AAEA;AACA,KAAK,IAAI,IAAT,IAAiB,EAAjB,EAAqB;AACnB,MAAI,QAAQ,GAAG,IAAH,CAAZ;AACA,QAAM,IAAN,GAAa,IAAb;;AAEA,MAAI,CAAC,MAAM,UAAX,EAAuB;;AAEvB,QAAM,UAAN,CAAiB,OAAjB,CAAyB,OAAO;AAC9B,QAAI,OAAO,WAAX,EAAwB;AACtB,YAAM,KAAK,KAAX;AACA,YAAM,KAAK,YAAY,GAAZ,CAAX;AACA,SAAG,GAAH,GAAS,UAAU,GAAG,IAAb,EAAmB,GAAG,MAAtB,CAAT;AACA,SAAG,GAAH,GAAS,UAAU,GAAG,IAAb,EAAmB,GAAG,MAAtB,CAAT;;AAEA,UAAI,OAAO,GAAG,GAAH,GAAS,GAAG,GAAZ,GAAkB,EAAlB,GAAuB,EAAlC;AACA,UAAI,OAAO,GAAG,GAAH,IAAU,GAAG,GAAb,GAAmB,EAAnB,GAAwB,EAAnC;AACA,WAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAK,MAAM,GAAlC,CAAlB;;AAEA,cAAQ,GAAR,CAAa,GAAE,GAAI,aAAY,MAAM,KAAN,CAAY,KAAK,IAAjB,CAAuB,KAAI,KAAK,GAAI,eAAc,MAAM,GAAN,CAAU,KAAK,IAAf,CAAqB,KAAI,KAAK,GAAI,GAAnH;AACD;AACD,gBAAY,GAAZ,IAAmB,KAAnB;AACD,GAdD;AAeD;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAA+B,IAA/B,EAAqC;AACnC,KAAG,aAAH,CAAiB,IAAjB,EAAuB,KAAK,SAAL,CAAe,KAAf,CAAvB;AACD;;AAED;AACA;AACA,MAAM,QAAQ,EAAd;;AAEA,OAAO,IAAP,CAAY,EAAZ,EAAgB,IAAhB,GAAuB,OAAvB,CAA+B,KAAK;AAClC,QAAM,QAAQ,GAAG,CAAH,CAAd;AACA,QAAM,MAAM,IAAZ,IAAoB,MAAM,UAA1B;AACD,CAHD;;AAKA,eAAe,KAAf,EAAsB,KAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,EAA2B,YAA3B,CAAtB","file":"build-compiled.js","sourcesContent":["\n\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst mimeScore = require('mime-score');\n\nlet db = require('mime-db');\nlet chalk = require('chalk');\n\nconst STANDARD_FACET_SCORE = 900;\n\nconst byExtension = {};\n\n// Clear out any conflict extensions in mime-db\nfor (let type in db) {\n  let entry = db[type];\n  entry.type = type;\n\n  if (!entry.extensions) continue;\n\n  entry.extensions.forEach(ext => {\n    if (ext in byExtension) {\n      const e0 = entry;\n      const e1 = byExtension[ext];\n      e0.pri = mimeScore(e0.type, e0.source);\n      e1.pri = mimeScore(e1.type, e1.source);\n\n      let drop = e0.pri < e1.pri ? e0 : e1;\n      let keep = e0.pri >= e1.pri ? e0 : e1;\n      drop.extensions = drop.extensions.filter(e => e !== ext);\n\n      console.log(`${ext}: Keeping ${chalk.green(keep.type)} (${keep.pri}), dropping ${chalk.red(drop.type)} (${drop.pri})`);\n    }\n    byExtension[ext] = entry;\n  });\n}\n\nfunction writeTypesFile(types, path) {\n  fs.writeFileSync(path, JSON.stringify(types));\n}\n\n// Segregate into standard and non-standard types based on facet per\n// https://tools.ietf.org/html/rfc6838#section-3.1\nconst types = {};\n\nObject.keys(db).sort().forEach(k => {\n  const entry = db[k];\n  types[entry.type] = entry.extensions;\n});\n\nwriteTypesFile(types, path.join(__dirname, '..', 'types.json'));\n"]}