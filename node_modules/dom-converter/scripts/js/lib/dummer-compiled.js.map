{"version":3,"sources":["dummer.js"],"names":[],"mappings":"AAAA,IAAI,MAAJ;AAAA,IAAY,MAAZ;AAAA,IAAoB,SAApB;AAAA,IACE,YAAY,GAAG,cADjB;;AAGA,SAAS,QAAQ,OAAR,EAAiB,MAA1B;;AAEA,YAAY,QAAQ,aAAR,CAAZ;;AAEA,OAAO,OAAP,GAAiB,SAAS;AACxB,SAAO,UAAS,CAAT,EAAY;AACjB,QAAI,CAAC,MAAM,OAAN,CAAc,CAAd,CAAL,EAAuB;AACrB,UAAI,CAAC,OAAO,YAAP,CAAoB,CAApB,CAAL,EAA6B;AAC3B,cAAM,MAAM,uDAAN,CAAN;AACD;AACF;AACD,QAAI,UAAU,QAAV,CAAmB,CAAnB,CAAJ;AACA,WAAO,OAAO,SAAP,CAAiB,CAAjB,CAAP;AACD,GATuB;AAUxB,aAAW,UAAS,CAAT,EAAY,MAAZ,EAAoB;AAC7B,QAAI,QAAJ,EAAc,IAAd,EAAoB,IAApB,EAA0B,CAA1B,EAA6B,EAA7B,EAAiC,IAAjC;AACA,QAAI,UAAU,IAAd,EAAoB;AAClB,eAAS,IAAT;AACD;AACD,eAAW,EAAX;AACA,WAAO,IAAP;AACA,SAAK,KAAK,CAAL,EAAQ,OAAO,EAAE,MAAtB,EAA8B,KAAK,IAAnC,EAAyC,IAAzC,EAA+C;AAC7C,UAAI,EAAE,EAAF,CAAJ;AACA,UAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;AACzB,eAAO,OAAO,SAAP,CAAiB,CAAjB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,OAAO,YAAP,CAAoB,CAApB,EAAuB,MAAvB,CAAP;AACA,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,MAAL,GAAc,MAAd;AACA,YAAI,QAAQ,IAAZ,EAAkB;AAChB,eAAK,IAAL,GAAY,IAAZ;AACA,eAAK,IAAL,GAAY,IAAZ;AACD;AACD,eAAO,IAAP;AACD;AACD,eAAS,IAAT,CAAc,IAAd;AACD;AACD,WAAO,QAAP;AACD,GAnCuB;AAoCxB,gBAAc,UAAS,CAAT,EAAY;AACxB,QAAI,OAAJ,EAAa,QAAb,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,GAA7B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,CAA9C,EAAiD,GAAjD,EAAsD,IAAtD;AACA,QAAI,CAAJ;AACA,SAAK,CAAL,IAAU,CAAV,EAAa;AACX,UAAI,CAAC,UAAU,IAAV,CAAe,CAAf,EAAkB,CAAlB,CAAL,EAA2B;AAC3B,UAAI,EAAE,CAAF,CAAJ;AACA,UAAI,IAAI,CAAR,EAAW;AACT,cAAM,MAAM,0DAAN,CAAN;AACD;AACD,YAAM,CAAN;AACA,YAAM,CAAN;AACA;AACD;AACD,WAAO,EAAP;AACA,QAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,MAAM,+DAAN,CAAN;AACD;AACD,QAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,iBAAW,CAAC,OAAO,SAAP,CAAiB,GAAjB,CAAD,CAAX;AACD,KAFD,MAEO,IAAI,MAAM,OAAN,CAAc,GAAd,CAAJ,EAAwB;AAC7B,iBAAW,OAAO,SAAP,CAAiB,GAAjB,EAAsB,IAAtB,CAAX;AACD,KAFM,MAEA;AACL,cAAQ,CAAR;AACA,YAAM,MAAM,gEAAN,CAAN;AACD;AACD,SAAK,IAAL,GAAY,KAAZ;AACA,WAAO,OAAO,SAAP,CAAiB,GAAjB,CAAP,EAA8B,OAAO,KAAK,IAA1C,EAAgD,UAAU,KAAK,OAA/D;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,WAAO,IAAP;AACD,GAnEuB;AAoExB,aAAW,UAAS,CAAT,EAAY;AACrB,WAAO;AACL,YAAM,MADD;AAEL,YAAM;AAFD,KAAP;AAID,GAzEuB;AA0ExB,WAAS,mCA1Ee;AA2ExB,aAAW,UAAS,CAAT,EAAY;AACrB,QAAI,OAAJ,EAAa,OAAb,EAAsB,GAAtB,EAA2B,EAA3B,EAA+B,CAA/B,EAAkC,IAAlC,EAAwC,KAAxC;AACA,QAAI,CAAC,EAAE,KAAF,CAAQ,sCAAR,CAAD,IAAoD,EAAE,KAAF,CAAQ,SAAR,CAAxD,EAA4E;AAC1E,YAAM,MAAM,uBAAuB,CAAvB,GAA2B,GAAjC,CAAN;AACD;AACD,cAAU,EAAV;AACA,YAAQ;AACN,YAAM,EADA;AAEN,eAAS;AAFH,KAAR;AAIA,QAAI,IAAI,EAAE,KAAF,CAAQ,YAAR,CAAR,EAA+B;AAC7B,aAAO,EAAE,CAAF,CAAP;AACA,UAAI,CAAC,KAAK,KAAL,CAAW,OAAO,OAAlB,CAAL,EAAiC;AAC/B,cAAM,MAAM,eAAe,IAAf,GAAsB,gBAA5B,CAAN;AACD;AACD,YAAM,IAAN,GAAa,IAAb;AACA,UAAI,EAAE,MAAF,CAAS,KAAK,MAAd,EAAsB,EAAE,MAAxB,CAAJ;AACD;AACD,QAAI,IAAI,EAAE,KAAF,CAAQ,oBAAR,CAAR,EAAuC;AACrC,WAAK,EAAE,CAAF,CAAL;AACA,UAAI,CAAC,GAAG,KAAH,CAAS,OAAO,OAAhB,CAAL,EAA+B;AAC7B,cAAM,MAAM,aAAa,EAAb,GAAkB,gBAAxB,CAAN;AACD;AACD,cAAQ,EAAR,GAAa,EAAb;AACA,UAAI,EAAE,MAAF,CAAS,GAAG,MAAH,GAAY,CAArB,EAAwB,EAAE,MAA1B,CAAJ;AACD;AACD,cAAU,EAAV;AACA,WAAO,IAAI,EAAE,KAAF,CAAQ,sBAAR,CAAX,EAA4C;AAC1C,YAAM,EAAE,CAAF,CAAN;AACA,UAAI,CAAC,IAAI,KAAJ,CAAU,OAAO,OAAjB,CAAL,EAAgC;AAC9B,cAAM,MAAM,gBAAgB,GAAhB,GAAsB,gBAA5B,CAAN;AACD;AACD,cAAQ,IAAR,CAAa,GAAb;AACA,UAAI,EAAE,OAAF,CAAU,MAAM,GAAhB,EAAqB,EAArB,CAAJ;AACD;AACD,QAAI,QAAQ,MAAZ,EAAoB;AAClB,cAAQ,OAAR,IAAmB,QAAQ,IAAR,CAAa,GAAb,CAAnB;AACD;AACD,WAAO,KAAP;AACD;AAlHuB,CAA1B","file":"dummer-compiled.js","sourcesContent":["var dummer, object, sanitizer,\n  __hasProp = {}.hasOwnProperty;\n\nobject = require('utila').object;\n\nsanitizer = require('./sanitizer');\n\nmodule.exports = dummer = {\n  toDom: function(o) {\n    if (!Array.isArray(o)) {\n      if (!object.isBareObject(o)) {\n        throw Error(\"toDom() only accepts arrays and bare objects as input\");\n      }\n    }\n    o = sanitizer.sanitize(o);\n    return dummer._children(o);\n  },\n  _children: function(a, parent) {\n    var children, node, prev, v, _i, _len;\n    if (parent == null) {\n      parent = null;\n    }\n    children = [];\n    prev = null;\n    for (_i = 0, _len = a.length; _i < _len; _i++) {\n      v = a[_i];\n      if (typeof v === 'string') {\n        node = dummer._textNode(v);\n      } else {\n        node = dummer._objectToDom(v, parent);\n        node.prev = null;\n        node.next = null;\n        node.parent = parent;\n        if (prev != null) {\n          node.prev = prev;\n          prev.next = node;\n        }\n        prev = node;\n      }\n      children.push(node);\n    }\n    return children;\n  },\n  _objectToDom: function(o) {\n    var attribs, children, i, k, key, name, node, v, val, _ref;\n    i = 0;\n    for (k in o) {\n      if (!__hasProp.call(o, k)) continue;\n      v = o[k];\n      if (i > 0) {\n        throw Error(\"_objectToDom() only accepts an object with one key/value\");\n      }\n      key = k;\n      val = v;\n      i++;\n    }\n    node = {};\n    if (typeof key !== 'string') {\n      throw Error(\"_objectToDom()'s key must be a string of tag name and classes\");\n    }\n    if (typeof val === 'string') {\n      children = [dummer._textNode(val)];\n    } else if (Array.isArray(val)) {\n      children = dummer._children(val, node);\n    } else {\n      inspect(o);\n      throw Error(\"_objectToDom()'s key's value must only be a string or an array\");\n    }\n    node.type = 'tag';\n    _ref = dummer._parseTag(key), name = _ref.name, attribs = _ref.attribs;\n    node.name = name;\n    node.attribs = attribs;\n    node.children = children;\n    return node;\n  },\n  _textNode: function(s) {\n    return {\n      type: 'text',\n      data: s\n    };\n  },\n  _nameRx: /^[a-zA-Z\\-\\_]{1}[a-zA-Z0-9\\-\\_]*$/,\n  _parseTag: function(k) {\n    var attribs, classes, cls, id, m, name, parts;\n    if (!k.match(/^[a-zA-Z0-9\\#\\-\\_\\.\\[\\]\\\"\\'\\=\\,\\s]+$/) || k.match(/^[0-9]+/)) {\n      throw Error(\"cannot parse tag `\" + k + \"`\");\n    }\n    attribs = {};\n    parts = {\n      name: '',\n      attribs: attribs\n    };\n    if (m = k.match(/^([^\\.#]+)/)) {\n      name = m[1];\n      if (!name.match(dummer._nameRx)) {\n        throw Error(\"tag name `\" + name + \"` is not valid\");\n      }\n      parts.name = name;\n      k = k.substr(name.length, k.length);\n    }\n    if (m = k.match(/^#([a-zA-Z0-9\\-]+)/)) {\n      id = m[1];\n      if (!id.match(dummer._nameRx)) {\n        throw Error(\"tag id `\" + id + \"` is not valid\");\n      }\n      attribs.id = id;\n      k = k.substr(id.length + 1, k.length);\n    }\n    classes = [];\n    while (m = k.match(/\\.([a-zA-Z0-9\\-\\_]+)/)) {\n      cls = m[1];\n      if (!cls.match(dummer._nameRx)) {\n        throw Error(\"tag class `\" + cls + \"` is not valid\");\n      }\n      classes.push(cls);\n      k = k.replace('.' + cls, '');\n    }\n    if (classes.length) {\n      attribs[\"class\"] = classes.join(\" \");\n    }\n    return parts;\n  }\n};\n"]}