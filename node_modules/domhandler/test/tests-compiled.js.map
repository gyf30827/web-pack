{"version":3,"sources":["tests.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,QAAQ,IAAR,CAAT;AAAA,IACI,OAAO,QAAQ,MAAR,CADX;AAAA,IAEI,SAAS,QAAQ,QAAR,CAFb;AAAA,IAGI,OAAO,QAAQ,MAAR,CAHX;AAAA,IAII,cAAc,QAAQ,gBAAR,CAJlB;AAAA,IAKI,SAAS,QAAQ,aAAR,EAAuB,MALpC;AAAA,IAMI,UAAU,QAAQ,KAAR,CANd;;AAQA,IAAI,WAAW,KAAK,OAAL,CAAa,SAAb,EAAwB,OAAxB,CAAf;AAAA,IACI,cAAc,EAAE,YAAY,IAAd,EAAoB,OAAO,IAA3B,EADlB;;AAGA,GACC,WADD,CACa,QADb,EAEC,MAFD,CAEQ,OAAO,SAAP,CAAiB,IAFzB,EAE+B,SAF/B,EAE0C;AAF1C,CAGC,GAHD,CAGK,UAAS,IAAT,EAAc;AAClB,QAAO,KAAK,OAAL,CAAa,QAAb,EAAuB,IAAvB,CAAP;AACA,CALD,EAMC,GAND,CAMK,OANL,EAOC,OAPD,CAOS,UAAS,IAAT,EAAc;AACtB,IAAG,KAAK,IAAR,EAAc,YAAU;AACvB,MAAI,WAAW,KAAK,QAApB;;AAEA,MAAI,UAAU,IAAI,OAAJ,CAAY,UAAS,GAAT,EAAc,MAAd,EAAqB;AAC9C,UAAO,OAAP,CAAe,GAAf;AACA,OAAI;AACH,YAAQ,QAAR,EAAkB,MAAlB;AACA,IAFD,CAEE,OAAM,CAAN,EAAQ;AACT,MAAE,QAAF,GAAa,KAAK,OAAL,CAAa,QAAb,EAAuB,WAAvB,CAAb;AACA,MAAE,MAAF,GAAa,KAAK,OAAL,CAAa,MAAb,EAAuB,WAAvB,CAAb;AACA,UAAM,CAAN;AACA;AACD,GATa,EASX,KAAK,OATM,CAAd;;AAWA,MAAI,OAAO,KAAK,IAAhB;;AAEA,MAAI,SAAS,IAAI,MAAJ,CAAW,OAAX,EAAoB,KAAK,OAAzB,CAAb;;AAEA;AACA,OAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,KAAK,MAAxB,EAAgC,GAAhC,EAAoC;AACnC,UAAO,KAAP,CAAa,KAAK,MAAL,CAAY,CAAZ,CAAb;AACA;AACD,SAAO,IAAP;;AAEA;AACA,SAAO,aAAP,CAAqB,IAArB;AACA,EA1BD;AA2BA,CAnCD;;AAqCA,SAAS,OAAT,CAAiB,QAAjB,EAA2B,MAA3B,EAAkC;AACjC,QAAO,KAAP,CAAa,OAAO,QAApB,EAA8B,OAAO,MAArC,EAA6C,oBAA7C;AACA,KAAG,OAAO,QAAP,KAAoB,QAApB,IAAgC,aAAa,IAAhD,EAAqD;AACpD,SAAO,WAAP,CAAmB,QAAnB,EAA6B,MAA7B,EAAqC,+BAArC;AACA,EAFD,MAEO;AACN,OAAI,IAAI,IAAR,IAAgB,QAAhB,EAAyB;AACxB,UAAO,EAAP,CAAU,QAAQ,MAAlB,EAA0B,oCAAoC,IAA9D;AACA,WAAQ,SAAS,IAAT,CAAR,EAAwB,OAAO,IAAP,CAAxB;AACA;AACD;AACD","file":"tests-compiled.js","sourcesContent":["var fs = require(\"fs\"),\n    path = require(\"path\"),\n    assert = require(\"assert\"),\n    util = require(\"util\"),\n    ElementType = require(\"domelementtype\"),\n    Parser = require(\"htmlparser2\").Parser,\n    Handler = require(\"../\");\n\nvar basePath = path.resolve(__dirname, \"cases\"),\n    inspectOpts = { showHidden: true, depth: null };\n\nfs\n.readdirSync(basePath)\n.filter(RegExp.prototype.test, /\\.json$/) //only allow .json files\n.map(function(name){\n\treturn path.resolve(basePath, name);\n})\n.map(require)\n.forEach(function(test){\n\tit(test.name, function(){\n\t\tvar expected = test.expected;\n\n\t\tvar handler = new Handler(function(err, actual){\n\t\t\tassert.ifError(err);\n\t\t\ttry {\n\t\t\t\tcompare(expected, actual);\n\t\t\t} catch(e){\n\t\t\t\te.expected = util.inspect(expected, inspectOpts);\n\t\t\t\te.actual   = util.inspect(actual,   inspectOpts);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}, test.options);\n\n\t\tvar data = test.html;\n\n\t\tvar parser = new Parser(handler, test.options);\n\n\t\t//first, try to run the test via chunks\n\t\tfor(var i = 0; i < data.length; i++){\n\t\t\tparser.write(data.charAt(i));\n\t\t}\n\t\tparser.done();\n\n\t\t//then parse everything\n\t\tparser.parseComplete(data);\n\t});\n});\n\nfunction compare(expected, result){\n\tassert.equal(typeof expected, typeof result, \"types didn't match\");\n\tif(typeof expected !== \"object\" || expected === null){\n\t\tassert.strictEqual(expected, result, \"result doesn't equal expected\");\n\t} else {\n\t\tfor(var prop in expected){\n\t\t\tassert.ok(prop in result, \"result didn't contain property \" + prop);\n\t\t\tcompare(expected[prop], result[prop]);\n\t\t}\n\t}\n}"]}